#library "snclkld"
#include "zcommon.acs"
#define Sonic 0
#define Amy 1
#define ClassicSonic 2
#define Shadow 3

/* Following script taken from the ZDoom Forums <https://forum.zdoom.org/viewtopic.php?t=51848#p903998> */

script "LastWeaponHandler" enter
{
    int pn            = PlayerNumber();
    str currentWeapon = GetWeapon();
    if (GetCvar("LastWeapon") == "") {
		SetCvar("lastWeapon", currentWeapon);
	}
    
    while (1) {
        if (StrCmp(currentWeapon, GetWeapon())) {
			SetCvar("lastWeapon", currentWeapon);
		}
        currentWeapon = GetWeapon();
        Delay(1);
    }
}

script "LastWeapon" (void)
{
    SetWeapon(GetCvar("lastWeapon"));
}

/* End of borrowed script */

script "Taunt" (void)
{
	NoiseAlert(0, 0);
	int tauntchance;
	switch(PlayerClass(PlayerNumber())) {
		case Sonic:
			tauntchance = random(1, 3);
			switch (tauntchance) {
				case 1:
					PlaySound(1001, "sonic/taunt1", 9, 1.0);
					if (!(CheckInventory("PowerSuper")||CheckInventory("PowerHyper"))) {
						SetMugshotState("GrinSmol");
					}
					if (GetCvar("Subtitles")) {
						HudMessage(l:"staunt1";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 1.5, 1.0);
					}
					break;
				case 2:
					PlaySound(1001, "sonic/taunt2", 9, 1.0);
					if (!(CheckInventory("PowerSuper")||CheckInventory("PowerHyper"))) {
						SetMugshotState("GrinSmol");
					}
					if (GetCvar("Subtitles")) {
						HudMessage(l:"staunt2";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
				case 3:
					PlaySound(1001, "sonic/taunt3", 9, 1.0);
					if (!(CheckInventory("PowerSuper")||CheckInventory("PowerHyper"))) {
						SetMugshotState("GrinSmol");
					}
					if (GetCvar("Subtitles")) {
						HudMessage(l:"staunt3";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
			}
			break;
		case Amy:
			PlaySound(1001, "amy/taunt", 9, 1.0);
			if (!CheckInventory("PowerSuper")) {
				SetMugshotState("GrinSmol");
			}
			if (GetCvar("Subtitles")) {
				HudMessage(l:"ataunt1";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
			}
			break;
		case ClassicSonic:
			tauntchance = random(1, 5);
			switch (tauntchance) {
				case 1:
					PlaySound(1001, "classic/taunt1", 9, 1.0);
					if (!(CheckInventory("PowerSuper")||CheckInventory("PowerHyper"))) {
						SetMugshotState("GrinSmol");
					}
					if (GetCvar("Subtitles")) {
						HudMessage(l:"ctaunt1";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
				case 2:
					PlaySound(1001, "classic/taunt2", 9, 1.0);
					if (!(CheckInventory("PowerSuper")||CheckInventory("PowerHyper"))) {
						SetMugshotState("GrinSmol");
					}
					if (GetCvar("Subtitles")) {
						HudMessage(l:"ctaunt2";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
				case 3:
					PlaySound(1001, "classic/taunt3", 9, 1.0);
					if (!(CheckInventory("PowerSuper")||CheckInventory("PowerHyper"))) {
						SetMugshotState("GrinSmol");
					}
					if (GetCvar("Subtitles")) {
						HudMessage(l:"ctaunt3";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 4.0, 1.0);
					}
					break;
				case 4:
					PlaySound(1001, "classic/taunt4", 9, 1.0);
					if (!(CheckInventory("PowerSuper")||CheckInventory("PowerHyper"))) {
						SetMugshotState("GrinSmol");
					}
					if (GetCvar("Subtitles")) {
						HudMessage(l:"ctaunt4";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
				case 5:
					PlaySound(1001, "classic/taunt5", 9, 1.0);
					if (!(CheckInventory("PowerSuper")||CheckInventory("PowerHyper"))) {
						SetMugshotState("FailSmol");
					}
					if (GetCvar("Subtitles")) {
						HudMessage(l:"ctaunt5";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
			}
			break;
		case Shadow:
			tauntchance = random(1, 2);
			if (random(1, 35) == 35) {
				PlaySound(1001, "imthe/coolest", 9, 1.0);
				if (!CheckInventory("PowerSuper")) {
					SetMugshotState("Grin");
				}
				if (GetActorProperty(1001, APROP_Health) < 145) {
					SetActorProperty(1001, APROP_Health, 145);
				}
				if (GetCvar("Subtitles")) {
					HudMessage(l:"dtaunt3";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			} else {
				switch (tauntchance) {
					case 1:
						PlaySound(1001, "shadow/taunt1", 9, 1.0);
						if (GetCvar("Subtitles")) {
							HudMessage(l:"dtaunt1";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
						}
						break;
					case 2:
						PlaySound(1001, "shadow/taunt2", 9, 1.0);
						if (GetCvar("Subtitles")) {
							HudMessage(l:"dtaunt2";
									   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
						}
						break;
				}
			}
			break;
	}
}

script "IsCrouching" (void)
{
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);

	if (buttons & BT_CROUCH) { SetResultValue(1); }
	else { SetResultValue(0); }
}

script 3 (void) // I have no clue what this is supposed to do
{
    ThrustThingZ(0, 7, 0, 1);
}

script "TransformSuper" (void)
{
	if (CheckInventory("PowerSuper"))
	{
		switch (PlayerClass(PlayerNumber()))
		{
            case Sonic: // Super Sonic
                 if (GetCvar("SuperMusic")) {
					 SetMusic("S_SUPER", 0);
				 }
                 break;
            case Amy: // Dark Amy
                 if (GetCvar("SuperMusic")) {
					SetMusic("A_SUPER", 0);
				 }
                 break;
            case ClassicSonic: // Classic Super Sonic
                 if (GetCvar("SuperMusic")) {
					 SetMusic("C_SUPER", 0);
				 }
                 break;
            case Shadow: // Super Shadow
                 if (GetCvar("SuperMusic")) {
					 SetMusic("D_SUPER", 0);
				 }
                 break;
            case -1:
            default:
                 break;
        }
		while (CheckInventory("PowerSuper")) {
		    SetMugShotState("Super");
			Delay(35);
		}
		if (GetCvar("SuperMusic")) { 
			SetMusic("*", 0);
		}
		SetMugShotState("Normal");
	}
	else {
		SetMusic("*", 0);
	}
}

script "TransformHyper" (void)
{
	if (CheckInventory("PowerHyper"))
	{
		while (CheckInventory("PowerHyper"))
		{
			if (GetCvar("SuperMusic")) {
				switch(PlayerClass(PlayerNumber())) {
					case Sonic:
						SetMusic("S_HYPER", 0);
						break;
					case ClassicSonic:
						SetMusic("C_HYPER", 0);
						break;
					default:
						 break;
				}
			}
		    SetMugShotState("Hyper");
			Delay(35); 
		}
		if (GetCvar("SuperMusic")) { SetMusic("*", 0); }
		SetMugShotState("Normal");
		SetActorProperty(1001, APROP_JumpZ, 12.0);
	}
	else
	{
		if (GetCvar("HyperMusic")) { SetMusic("*", 0); }
		SetActorProperty(1001, APROP_JumpZ, 12.0);
	}
}

script "Invincibility" (void)
{
	if (!CheckInventory("PowerSuper") && !CheckInventory("PowerHyper"))
	{
		if (CheckInventory("PowerInvulnerable"))
		{
			if (GetCvar("InvincMusic")) {
				switch (PlayerClass(PlayerNumber()))
				{
						case 0: 
							SetMusic("s_invinc", 0);
							break;
						case 1: 
							SetMusic("a_invinc", 0);
							break;
						case 2: 
							SetMusic("c_invinc", 0);
							break;
						case 3:
							SetMusic("d_invinc", 0);
							break;
						case -1:
						default:
							break;
				}
			}
			while (CheckInventory("PowerInvulnerable"))
			{
				delay(15);
			}
			if (GetCvar("InvincMusic")) { 
				SetMusic("*", 0);
			}
		}
		else
		{
			if (GetCvar("InvincMusic")) { 
				SetMusic("*", 0);
			}
		}
	}
}

script "InitMusic" ENTER
{
	SetMugShotState("Normal");
	SetMusic("*", 0);
}

script "ChaosEmeraldHandler" (void)
{
	int character = PlayerClass(PlayerNumber());
	if (CheckInventory("PowerSuper") || CheckInventory("PowerHyper")) {
		if ((character == Sonic || character == ClassicSonic) && !CheckInventory("PowerHyper") && GetCvar("HyperSonic")) {
			Log(s:"\c[White]Press \cl", k:"invuse", s:" \c[White]to go even further beyond!");
		} else {
			Log(s:"Chaos Energy refilled!");
			TakeInventory("ChaosEmeralds", 1);
			GiveInventory("ChaosEnergy", 999);
		}
	}
	else
	{
		switch(PlayerClass(PlayerNumber()))
		{
			case Amy:
				Log(s:"\c[Purple]Press \cl", k:"invuse", s:" \c[Purple]to embrace the darkness!");
				break;
			case Shadow:
				Log(s:"\c[Gold]Press \cl", k:"invuse", s:" \c[Gold]to activate Super Shadow!");
				break;
			default: // Sonic and Classic Sonic
				Log(s:"\c[Gold]Press \cl", k:"invuse", s:" \c[Gold]to activate Super Sonic!");
				break;
		}
	}
}

script "SuperTransformPrompt" enter
{
	while (1) {
		Delay(1);
		int x = 0.5;
		int y;
		int holdTime = 0.1;
		switch (GetCvar("HUDType")) {
			case 3:
				// Legacy
				y = 0.8;
				break;
			default:
				// Unified, Classic-Style
				y = 0.9;
				break;
		}
		if (CheckInventory("ChaosEmeralds") && !GetCvar("ControlHints")) {
			switch(PlayerClass(PlayerNumber()))
			{
				case Sonic:
					if (CheckInventory("PowerSuper")) {
						HudMessage(s:"\c[Gold]", k:"invuse", s:"  \c[Sonic]Hyper Sonic";
						HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, holdTime);
					} else {
						HudMessage(s:"\c[Gold]", k:"invuse", s:"  \c[Sonic]Super Sonic";
						HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, holdTime);
					}
					break;
				case Amy:
					HudMessage(s:"\c[Purple]", k:"invuse", s:"  \c[Amy]Dark Amy";
					HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, holdTime);
					break;
				case ClassicSonic:
					if (CheckInventory("PowerSuper")) {
						HudMessage(s:"\c[Gold]", k:"invuse", s:"  \c[Classic]Hyper Sonic";
						HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, holdTime);
					} else {
						HudMessage(s:"\c[Gold]", k:"invuse", s:"  \c[Classic]Super Sonic";
						HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, holdTime);
					}
					break;
				case Shadow:
					HudMessage(s:"\c[Gold]", k:"invuse", s:"  \c[Shadow]Super Shadow";
					HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, holdTime);
					break;
				default:
					break;
			}
		}
	}
}

script "DeathMusic" (int xdeath)
{
	if (GetCvar("DeathMusic") && GetLevelInfo(LEVELINFO_LEVELNUM) != 69) {
		switch (PlayerClass(PlayerNumber())) {
			case Sonic:
				if (xdeath) SetMusic("S_DEADX", 0);
				else 		SetMusic("S_DEADM", 0);
				break;
			case Amy:
				SetMusic("A_DEADM", 0);
				break;
			case ClassicSonic:
				if (xdeath) SetMusic("C_DEADX", 0);
				else {
					SetMusic("C_DEADM", 0);
					Delay(9*35);
					if (ClassifyActor(0) & ACTOR_DEAD) { SetMusic(""); }
				}
				break;
			case Shadow:
				if (xdeath) SetMusic("D_DEADX", 0);
				else {
					SetMusic("D_DEADM", 0);
					Delay(7*35);
					if (ClassifyActor(0) & ACTOR_DEAD) { SetMusic(""); }
				}
				break;
			default:
				break;
		}
	}
}

script "DeathScreen" DEATH
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) == 69) terminate;
    FadeTo(0, 0, 0, 1.0, 1.0);
    Delay(30);
	str message;
	if (ClassifyActor(0) & ACTOR_DEAD) {
		switch (random(1, 15)) {
			case 1:
				message = "death_msg1";
				break;
			case 2:
				message = "death_msg2";
				break;
			case 3:
				message = "death_msg3";
				break;
			case 4:
				message = "death_msg4";
				break;
			case 5:
				message = "death_msg5";
				break;
			case 6:
				message = "death_msg6";
				break;
			case 7:
				message = "death_msg7";
				break;
			case 8:
				switch (PlayerClass(PlayerNumber())) {
					case Sonic:
						message = "death_msg8s";
						break;
					case Amy:
						message = "death_msg8a";
						break;
					case ClassicSonic:
						message = "death_msg8c";
						break;
					case Shadow:
						message = "death_msg8d";
						break;
				}
				break;
			case 9:
				message = "death_msg9";
				break;
			case 10:
				if (GetActorProperty(0, APROP_Waterlevel) > 2) {
					message = "death_msg10";
					break;
				}
			case 11:
				message = "death_msg11";
				break;
			case 12:
				if (Timer() < 70) {
					message = "death_msg12";
					break;
				}
			case 13:
				if (GameSkill() < 2) {
					message = "death_msg13a";
					break;
				}
				else if (GameSkill() == 4) {
					message = "death_msg13b";
					break;
				}
				else if (GameSkill() == 5) {
					message = "death_msg13c";
					break;
				}
			case 14:
				if (GameSkill() > 1) {
					message = "death_msg14";
					break;
				}
			case 15:
				if (CheckWeapon("DualRockets")) {
					message = "death_msg15";
					break;
				}
			default:
				message = "death_msg16";
				break;
		}
		HudMessage(l:message; 0, 9, CR_WHITE, 0.5, 0.45, 0.0, 1.0);
		HudMessage(s:"Press \c[Gold]", k:"+use", s:"\c[White] to try again"; 0, 10, CR_WHITE, 0.5, 0.55, 0.0, 1.0);
	}
	else {
		Delay(6);
		FadeTo(0.0, 0.0, 0.0, 0.0, 0);
	}
}

script "DidResurrect" RESPAWN
{
	SetMusic("*");
	ACS_NamedTerminate("DeathScreen", 0);
	HudMessage(s:""; 0, 9, CR_UNTRANSLATED, 0.0, 0.0, 0.0, 0.0);
	HudMessage(s:""; 0, 10, CR_UNTRANSLATED, 0.0, 0.0, 0.0, 0.0);
    FadeTo(0.0, 0.0, 0.0, 0.0, 0);
	if (GetCvar("Subtitles")) {
		switch (PlayerClass(PlayerNumber())) {
			case Sonic:
				HudMessage(s:"\c[Sonic] Sonic: \c[Grey] (Never happened.)";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case Amy:
				HudMessage(s:"\c[Amy] Amy: \c[Grey] (Huh? I'm still alive?)";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case ClassicSonic:
				HudMessage(s:"\c[Classic] Sonic: \c[Grey] (Cutting it too close...)";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case Shadow:
				HudMessage(s:"\c[Shadow] Shadow: \c[Grey] (Time to stop being so careless...)";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			default:
				break;
		}
	}
}

script "TakeRingsIfSuper" (void)
{
	while (CheckInventory("PowerSuper"))
	{
		TakeInventory("ChaosEnergy", 1);
		if (CheckInventory("ChaosEmeralds")) {
			Delay(4);
		}
		else if (PlayerClass(PlayerNumber()) == Amy) {
			Delay(2);
		}
		else {
			Delay(3);
		}
		if (!CheckInventory("ChaosEnergy"))
		{
			TakeInventory("PowerSuper", 1);
			TakeInventory("PowerInvulnerable", 1);
		}
	}
}

script "TakeRingsIfHyper" (void)
{
	while (CheckInventory("PowerHyper"))
	{
		Delay(2);
		TakeInventory("ChaosEnergy", 1);
		if (!CheckInventory("ChaosEnergy"))
		{
			TakeInventory("PowerHyper", 1);
			TakeInventory("PowerInvulnerable", 1);
		}
	}
}

int oldz;

function void ScaleVelocity(int TID, int scale)
{
	// credit: https://forum.zdoom.org/viewtopic.php?p=674662&sid=8584f1daa6b46cfa8b01858ef17fded2#p674662
	SetActorVelocity(TID, FixedMul(scale,GetActorVelX(TID)), FixedMul(scale,GetActorVelY(TID)), FixedMul(scale,GetActorVelZ(TID)), false, false);
}

script "SetFriction" ENTER
{
	int x, y, z, speed;
	while (true) {
		oldz = GetActorZ(0);
		Delay(1);
		x = GetActorVelX(0);
		y = GetActorVelY(0);
		speed = FixedSqrt(FixedMul(x, x) + FixedMul(y, y));
		int forward = GetPlayerInput(-1, MODINPUT_FORWARDMOVE);
		int sidem = GetPlayerInput(-1, MODINPUT_SIDEMOVE);
		int buttons = GetPlayerInput(-1, MODINPUT_BUTTONS);
		bool isMoving = forward > 0 || sidem > 0 || forward < 0 || sidem < 0;
		if (GetCvar("IsSpinDashing")) {
			SetActorProperty(0, APROP_Friction, 1.5);
		}
		else if (GetCvar("IsCrouching") && speed >= 1.0) {
			SetActorProperty(0, APROP_Friction, 1.088);
			if (speed < 100.0) {
				ScaleVelocity(0, 1.0 + (oldz - GetActorZ(0)) / 98);
			}
		}
		else if (GetCvar("ReservedMode")) {
			SetActorProperty(0, APROP_Friction, 1.0);
			SetAirControl(0.4);
		}
		else if (speed > 50.0 && !isMoving) {
			SetActorProperty(0, APROP_Friction, 1.03);
			SetAirControl(0.0);
		}
		else if (isMoving) {
			SetActorProperty(0, APROP_Friction, 1.0);
			SetAirControl(0.4);
		}
		else {
			SetActorProperty(0, APROP_Friction, 0.9);
			SetAirControl(0.0);
		}
	}
}

script "KickCooldown" ENTER
{
	while (true)
	{
		Delay(1);
		TakeInventory("KickCooldown", 1);
	}
}

script "RingCountCheck" ENTER
{
	while (true)
	{
		Delay(2);
		if (CheckInventory("Health") > 500)
		{
			GiveInventory("OverRinged2", 1);
		}
		else if (CheckInventory("Health") > 300)
		{
			GiveInventory("OverRinged", 1);
		}
		else
		{
			TakeInventory("PowerOverRinged", 1);
			TakeInventory("PowerOverRinged2", 1);
		}
	}
	
}

script "GiveTID" ENTER
{
	Thing_ChangeTID(0, 1001);
}

script "Damn4thChaosEmerald" (void)
{
	AmbientSound("shadow/damn4thchaos", 127);
}

script "NoMusic" (void)
{
	SetMusic("", 0);
}

script "ResetMusic" (void)
{
	SetMusic("*", 0);
}

script "ReticleSound" (void)
{
	AmbientSound("sweapons/reticle", 127);
}

function str DoubleDigitSeconds(int seconds)
{
	if (StrLen(StrParam(d:seconds % 60)) < 2) {
		return StrParam(s:"0", d:seconds % 60);
	}
	return StrParam(d:seconds % 60);
}

script "GoalRing" (void)
{
	// Variables
	int score, targetscore;
	int LevelTime = Timer() / 35;
	int ParTime = GetLevelInfo(LEVELINFO_PAR_TIME);
	int CurrentRings = GetActorProperty(1001, APROP_Health);
	int KilledMonsters = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
	int TotalMonsters = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);
	str Rank;
	
	// Your score
	if (CurrentRings > 300) {
		score += 600 + (CurrentRings - 300);
	}
	else {
		score += CurrentRings * 2;
	}
	score += KilledMonsters * 95;
	if (score < 0) score = 0;
	
	// Stop the player and remove their form and invincibility
	Thing_Stop(1001);
	TakeInventory("PowerInvulnerable", 1);
	TakeInventory("PowerSuper", 1);
	TakeInventory("PowerHyper", 1);
	ACS_NamedTerminate("TransformSuper", 0);
	ACS_NamedTerminate("TransformHyper", 0);
	SetMugShotState("Normal");
	
	Delay(5);
	SetActorProperty(1001, APROP_DamageFactor, 0.0);
	
	// Your target score
	targetscore += TotalMonsters * 90;
	if (GameSkill() == 5) targetscore *= 1.5;
	
	HudMessage(s:"Time: ", d:LevelTime / 60, s:":", s:DoubleDigitSeconds(LevelTime), s:"\n",
			   s:"Score: ", d:score, s:"\n\n",
			   s:"Target Time: ", d:ParTime / 60, s:":", s:DoubleDigitSeconds(ParTime), s:"\n", 
			   s:"Target Score: ", d:targetscore, s:"\n"; 
			   HUDMSG_PLAIN, 5, CR_WHITE, 1.5, 0.5, 0, 1.0);
			   
	// Victory message and rank
	SetFont("BIGFONT");
	switch (PlayerClass(PlayerNumber()))
	{
		case Sonic:
			SetMusic("S_VICTOR");
			HudMessage(s:"\c[Sonic]Stage Clear"; HUDMSG_PLAIN, 6, CR_WHITE, 1.5, 0.4, 0, 1.0);
			break;
		case Amy:
			SetMusic("A_VICTOR");
			HudMessage(s:"\c[Amy]Act Clear!"; HUDMSG_PLAIN, 6, CR_WHITE, 1.5, 0.4, 0, 1.0);
			break;
		case ClassicSonic:
			SetMusic("C_VICTOR");
			HudMessage(s:"\c[Classic]SONIC \c[White]GOT THROUGH\n\c[White]", s:strParam(n:PRINTNAME_LEVELNAME); HUDMSG_PLAIN, 6, CR_WHITE, 1.5, 0.4, 0, 1.0);
			break;
		case Shadow:
			SetMusic("D_VICTOR");
			HudMessage(s:"\c[Shadow]Mission Cleared"; HUDMSG_PLAIN, 6, CR_WHITE, 1.5, 0.4, 0, 1.0);
			break;
		default:
			break;
	}
	bool s_rank = score > targetscore && LevelTime <= ParTime;
	bool a_rank = score > targetscore || score > targetscore / 2 && LevelTime <= ParTime;
	bool b_rank = score > targetscore / 2 || score > targetscore / 3 && LevelTime <= ParTime;
	bool c_rank = score > targetscore / 3 || LevelTime <= ParTime;
	if 		(s_rank)	SetFont("s_rank");
	else if (a_rank)	SetFont("a_rank");
	else if (b_rank)	SetFont("b_rank");
	else if (c_rank)	SetFont("c_rank");
	else				SetFont("d_rank");
	if (PlayerClass(PlayerNumber()) == Amy) Delay(35*5);
	else Delay(35*6);
	AmbientSound("sglobal/rankget", 127);
	HudMessage(s:"A";
			   HUDMSG_PLAIN, 8, CR_WHITE, 1.5, 0.65, 0, 1.0);
	SetMusic("");
	Delay(14);
	int speechdelay;
	SetFont("SMALLFONT");
	switch (PlayerClass(PlayerNumber()))
	{
		case Sonic:
			if (s_rank)  {
				bool thatwasright = (random(0, 5) == 5);
				if (thatwasright)
					PlaySound(1001, "sonic/thatwasright"); // "THAT WAS RIGHT!"
				else
					PlaySound(1001, "sonic/perfectresult"); // "That was incredible!"
				speechdelay = 60;
				SetMugshotState("Grin");
				if (GetCvar("Subtitles")) {
					if (thatwasright) {
						HudMessage(l:"sresult0";
								HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					else {
						HudMessage(l:"sresult1";
								HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
				}
			}
			else if (a_rank) {
				PlaySound(1001, "sonic/goodresult"); // "No problem!"
				speechdelay = 40;
				SetMugshotState("Grin");
				if (GetCvar("Subtitles")) {
					HudMessage(l:"sresult2";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else if (b_rank) {
				PlaySound(1001, "sonic/okayresult"); // "Not my best run..."
				speechdelay = 50;
				SetMugshotState("Failure");
				if (GetCvar("Subtitles")) {
					HudMessage(l:"sresult3";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else if (c_rank) {
				PlaySound(1001, "sonic/badresult"); // "Aw, I gotta try that again!"
				speechdelay = 60;
				SetMugshotState("Failure");
				if (GetCvar("Subtitles")) {
					HudMessage(l:"sresult4";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else {
				PlaySound(1001, "sonic/terribleresult"); // "Nooo!!"
				speechdelay = 40;
				SetMugshotState("Failure");
				if (GetCvar("Subtitles")) {
					HudMessage(l:"sresult5";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			break;
		case Amy:
			if (a_rank) {
				PlaySound(1001, "amy/goodresult", CHAN_BODY, 0.7); // "Yay!"
				speechdelay = 30;
				SetMugshotState("Grin");
				if (GetCvar("Subtitles")) {
					HudMessage(l:"aresult1";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else {
				PlaySound(1001, "amy/badresult"); // Brief moment of silence
				speechdelay = 105;
				SetMugshotState("Failure");
				if (GetCvar("Subtitles")) {
					HudMessage(l:"aresult2";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			break;
		case ClassicSonic:
			if (a_rank) {
				PlaySound(1001, "classic/goodresult"); // Classic whistles and says "That was cool!"
				speechdelay = 45;
				SetMugshotState("Grin");
				if (GetCvar("Subtitles")) {
					HudMessage(l:"cresult1";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else if (b_rank) {
				PlaySound(1001, "classic/okayresult"); // "Huh... no problem."
				speechdelay = 35;
				SetMugshotState("OK");
				if (GetCvar("Subtitles")) {
					HudMessage(l:"cresult2";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else {
				PlaySound(1001, "classic/badresult"); // "Barely made it..."
				speechdelay = 30;
				SetMugshotState("Failure");
				if (GetCvar("Subtitles")) {
					HudMessage(l:"cresult3";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			break;
		case Shadow:
			if (s_rank) {
				PlaySound(1001, "shadow/goodresult"); // "Yes!"
				speechdelay = 30;
				SetMugshotState("OK");
				if (GetCvar("Subtitles")) {
					HudMessage(l:"dresult1";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else {
				SetFont("SMALLFONT");
				PlaySound(1001, "shadow/badresult"); // "Need to stay focused."
				speechdelay = 50;
				SetMugshotState("Failure");
				if (GetCvar("Subtitles")) {
					HudMessage(l:"dresult2";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			break;
		case -1:
		default:
			break;
	}
	Delay(speechdelay);
	SetActorProperty(1001, APROP_DamageFactor, 1.0);
	Exit_Normal(0);
}

script "SonicN64" (void)
{
	AmbientSound("sonic/nintendo64", 127);
}

script "Drowning" ENTER
{
	int drowntimer;
	int maxdrown;
	maxdrown = 15;
	while (1) {
		if (GetActorProperty(1001, APROP_Waterlevel) == 3) {
			if (!CheckActorInventory(1001, "PowerSuper") && !CheckActorInventory(1001, "PowerHyper") && !CheckActorInventory(1001, "PowerInvulnerable")) {
				drowntimer++;
			}
			if (drowntimer > 4)
			{
				switch(PlayerClass(PlayerNumber())) {
					case Sonic:
						SetMusic("S_DROWN", 0);
						break;
					case Amy:
						SetMusic("A_DROWN", 0);
						break;
					case ClassicSonic:
						SetMusic("C_DROWN", 0);
						maxdrown = 16;
						break;
					case Shadow:
						SetMusic("D_DROWN", 0);
						break;
					default:
						break;
				}
				SetFont("BIGFONT");
				int drowncounter = maxdrown - drowntimer;
				if (drowncounter >= 0 && drowncounter <= 9) {
					HudMessage(s:"\c[Sapphire]", d:drowncounter; HUDMSG_PLAIN, 6, CR_UNTRANSLATED, 0.5, 0.55, 0.7);
				}
			}
			if (drowntimer > maxdrown)
			{
				DamageActor(1001, AAPTR_PLAYER1, 0, AAPTR_NULL, 9999, "Drowned");
				SetMusic("", 0);
				break;
			}
		}
		else {
			if (drowntimer > 4) {
				SetMusic("*");
			}
			drowntimer = 0;
		}
		Delay(35);
	}
}

script "ReactionTime" (void)
{
	AmbientSound("sglobal/reaction", 127);
}

script "BossMusic2" (void)
{
	SetMusic("B_SCRT2");
}

script "JumpHeight" ENTER
{
	while (1) {
		if (CheckInventory("PowerSuper") || CheckInventory("PowerHyper")) {
			SetActorProperty(1001, APROP_JumpZ, 17.0);
		}
		else if (!GetCvar("ReservedMode")) {
			SetActorProperty(1001, APROP_JumpZ, 15.0);
		}
		else {
			SetActorProperty(1001, APROP_JumpZ, 12.0);
		}
		Delay(1);
	}
}

script "WallJump" (int height, int distance, int angle)
{
	Delay(1);
	PlaySound(0, "sonic/walljump", CHAN_BODY);
	int jangle;
	/* I don't care that this sucks.
	   If you have a better solution for
	   this send a PR or something. */
	switch (angle) {
		case 90:
			jangle = 64;
			break;
		case 180:
			jangle = 128;
			break;
		case 270:
			jangle = 192;
			break;
		case 360:
		default:
			jangle = 256;
			break;
	}
	ThrustThing((GetActorAngle(0) >> 8) + jangle, distance * -1, 1, 0);
	ThrustThingZ(0, height, 0, 0);
}

script "HowManyZFireLeft" (int clear)
{
	int RemainingShots = CheckInventory("ChaosEnergy") / 120;
	if (CheckInventory("PowerSuper")) {
		HudMessage(s:"\c[Purple]Infinite shots remaining"; HUDMSG_PLAIN, 2, CR_UNTRANSLATED, 0.5, 0.6, 0.3);
	} else {
		HudMessage(s:"\c[Amy]", d:RemainingShots, s:"/", d:8, s:" shots remaining"; HUDMSG_PLAIN, 2, CR_UNTRANSLATED, 0.5, 0.6, 0.3);
	}
}

script "Subtitles" (int subtitle)
{
	if (GetCvar("Subtitles")) {
		int subtitleref = strparam(s:"gsubtitle", d:subtitle);
		HudMessage(l:subtitleref; HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
	}
}

script "AmyBlockTint" enter
{
	while (PlayerClass(PlayerNumber()) == Amy && ClassifyActor(0) & ACTOR_ALIVE) {
		if (CheckInventory("PowerBlocking")) {
			FadeTo(192, 23, 112, 0.2, 0.0);
		}
		else {
			FadeTo(0, 0, 0, 0, 0.0); 
		}
		Delay(1);
	}
}

script "LowHealthSound" enter
{
	while (true) {
		if (GetActorProperty(1001, APROP_Health) < 20 && GetCvar("LowHealthSound") && (ClassifyActor(1001) & ACTOR_ALIVE) && !(CheckInventory("PowerSuper")||CheckInventory("PowerHyper")||CheckInventory("PowerInvulnerable"))) {
			AmbientSound("sglobal/lowhealth", 127);
			Delay(12);
		}
		else {
			Delay(1);
		}
	}
}

script "LowEnergySound" enter
{
	int EnergyThreshold;
	while (true) {
		if (PlayerClass(PlayerNumber()) == Amy) EnergyThreshold = 250;
		else if (CheckInventory("PowerHyper"))  EnergyThreshold = 200;
		else 									EnergyThreshold = 150;
		
		if (CheckInventory("ChaosEnergy") < EnergyThreshold && (CheckInventory("PowerSuper")||CheckInventory("PowerHyper")) && GetCvar("LowEnergySound")) {
			AmbientSound("sglobal/lowenergy", 127);
			Delay(50);
		}
		else {
			Delay(1);
		}
	}
}

script "ControlHints" enter
{
	str PrimaryFire, SecondaryFire, Jump, Crouch, OffhandAttack, OffhandAbility, SuperForm;
	int Character = PlayerClass(PlayerNumber());
	while (GameType() == GAME_SINGLE_PLAYER) {
		bool Midair = GetActorZ(0) > GetActorFloorZ(0);
		int buttons = GetPlayerInput(-1, MODINPUT_BUTTONS);
		
		// Jump and crouch
		if (GetCvar("CanJump")) {
			bool IsClassicAndHyper = Character == ClassicSonic && CheckInventory("PowerHyper");
			if (Midair && (Character != ClassicSonic || IsClassicAndHyper)) Jump = "Aerial Jump";
			else Jump = "Jump";
		}
		else Jump = "\c[DarkGray]None";
		Crouch = "Crouch";
		if (Midair) Crouch = "Slam Attack";
		
		if (Character == Sonic) {
			if (CheckInventory("PowerHyper")) OffhandAttack = "Shockwave Kick";
			else OffhandAttack = "Kick";
			OffhandAbility = "Quick Step";
			if (GetCvar("CanHoming")) OffhandAttack = "Homing Attack";
			if (Midair) {
				if (GetCvar("CanHoming") && GetCvar("HomingSnap")) OffhandAbility = "Homing Snap";
			}
			if (GetCvar("CanWallJump") && Midair) {
				Jump = "Wall Jump";
			}
		}
		else if (Character == Amy) {
			OffhandAttack = "Kick";
			OffhandAbility = "Slide";
			if (Midair) {
				OffhandAbility = "\c[DarkGray]None";
			}
			if (GetCvar("Sliding")) Jump = "Slide Jump";
			if (GetCvar("CanHammerJump")) Jump = "Hammer Jump";
		}
		else if (Character == ClassicSonic) {
			OffhandAttack = "Spin Attack";
			OffhandAbility = "Sonic Thok";
			if (Midair) {
				OffhandAttack = "D. Spin Attack";
				Crouch = "Bounce Attack";
				if (GetCvar("DidJump") && !CheckInventory("PowerHyper")) {
					Jump = "Sonic Thok";
				}
			}
		}
		else if (Character == Shadow) {
			if (GetCvar("CanHoming")) Jump = "Homing Attack";
			OffhandAttack = "Chaos Spear";
			if (GetCvar("CloseToEnemy")) OffhandAttack = "Punch";
			OffhandAbility = "Chaos Snap";
		}
		
		// Sonic's weapons
		if (CheckWeapon("Caliburn")) {
			PrimaryFire = "Sword Swing";
			SecondaryFire = "Boost";
			if (!Midair && (buttons & BT_ALTATTACK)) Jump = "Boost Jump";
		}
		if (CheckWeapon("AcceleratedPistol")) {
			PrimaryFire = "Burst Fire";
			SecondaryFire = "Recoil Charge"; 
			if (buttons & BT_ALTATTACK) PrimaryFire = "Recoil Burst";
		}
		if (CheckWeapon("KineticShotty")) { PrimaryFire = "Shotty Burst"; SecondaryFire = "Kinetic Grenade"; }
		if (CheckWeapon("ShurikenCrossbow")) { PrimaryFire = "Shuriken Launch"; SecondaryFire = "\c[DarkGray]None"; }
		if (CheckWeapon("EclipseBlaster")) { PrimaryFire = "Eclipse Shot"; SecondaryFire = "Chaos Restore"; }
		if (CheckWeapon("AirStrikeLauncher")) { PrimaryFire = "Rocket Launch"; SecondaryFire = "Remote Detonate"; }
		
		// Amy's weapons
		if (CheckWeapon("PikoPikoHammer")) { PrimaryFire = "Piko Strike"; SecondaryFire = "Parry"; }
		if (CheckWeapon("SilentRosePistol")) { PrimaryFire = "Silenced Shot"; SecondaryFire = "Reload"; }
		if (CheckWeapon("PrecisionShotgun")) { 
			if (buttons & BT_ALTATTACK) PrimaryFire = "Precise Shot"; 
			else PrimaryFire = "Shotgun Blast";
			SecondaryFire = "Precision Scope"; 
		}
		if (CheckWeapon("RailshotCannon")) { PrimaryFire = "Railshot Burst"; SecondaryFire = "Zoom"; }
		if (CheckWeapon("AmyEclipseBlaster")) { PrimaryFire = "Eclipse Shot"; SecondaryFire = "Chaos Restore"; }
		if (CheckWeapon("RapidMissiles")) { PrimaryFire = "Rapid Launch"; SecondaryFire = "Triple Launch"; }
		
		// Classic Sonic's weapons
		if (CheckWeapon("ClassicAbilities")) {
			if (Midair) {
				PrimaryFire = "Drop Dash";
				if (GetCvar("CanWallJump")) PrimaryFire = "Wall Dash";
			}
			else PrimaryFire = "Spin Dash";
			bool CanFly = (CheckInventory("PowerSuper")||CheckInventory("PowerHyper")) && Midair;
			if (CanFly) SecondaryFire = "Hover";
			else if (!Midair) {
				if (buttons & BT_CROUCH) {
					SecondaryFire = "Healing";
				}
				else {
					SecondaryFire = "Drift";
				}
			}
			else SecondaryFire = "\c[DarkGray]None";
			if (CanFly && (buttons & BT_ALTATTACK)) {
				Jump = "Fly Up";
				Crouch = "Fly Down";
			}
		}
		if (CheckWeapon("ChaosBlaster")) { PrimaryFire = "Plasma Stream"; SecondaryFire = "\c[DarkGray]None"; }
		if (CheckWeapon("SpeedyShotgun")) { PrimaryFire = "Speedy Shot"; SecondaryFire = "Burst Shot"; }
		if (CheckWeapon("ChaosRain")) { PrimaryFire = "Bullet Rain"; SecondaryFire = "\c[DarkGray]None"; }
		if (CheckWeapon("ClassicRocketStream")) { PrimaryFire = "Stream Launch"; SecondaryFire = "\c[DarkGray]None"; }
		
		// Shadow's weapons
		if (CheckWeapon("HighShovel")) {
			PrimaryFire = "Shovel Smash";
			SecondaryFire = "Boost";
			if (!Midair && (buttons & BT_ALTATTACK)) Jump = "Boost Jump";
		}
		if (CheckWeapon("ShadowKnife")) { PrimaryFire = "Ultimate Stab"; SecondaryFire = "\c[DarkGray]None"; }
		if (CheckWeapon("ShadowMP5")) { PrimaryFire = "Rapid Fire"; SecondaryFire = "\c[DarkGray]None"; }
		if (CheckWeapon("DarkAssault")) { PrimaryFire = "Assault Shot"; SecondaryFire = "\c[DarkGray]None"; }
		if (CheckWeapon("QuadShotty")) { PrimaryFire = "Decimation Blast"; SecondaryFire = "\c[DarkGray]None"; }
		if (CheckWeapon("ChaosEmerald")) { PrimaryFire = "Chaos Blast"; SecondaryFire = "Chaos Restore"; }
		if (CheckWeapon("DualRockets")) { PrimaryFire = "Targeted Launch"; SecondaryFire = "Untargeted Launch"; }
		
		// Super/Dark/Hyper
		if (CheckInventory("ChaosEmeralds")) {
			switch (Character) {
				case Sonic:
				case ClassicSonic:
					if (CheckInventory("PowerSuper")) SuperForm = "Hyper Sonic";
					else SuperForm = "Super Sonic";
					break;
				case Amy:
					SuperForm = "Dark Amy";
					break;
				case Shadow:
					SuperForm = "Super Shadow";
					break;
			}
		}
		else SuperForm = "";
		
		if (GetCvar("ControlHints")) {
			if (ClassifyActor(0) & ACTOR_DEAD) {
				HudMessage(k:"+use", s:"\c[White]: Try Again\n";
						   HUDMSG_PLAIN, 7, CR_GOLD, -0.02, -0.48, 1.0, 1.0);
			}
			else if (stricmp(SuperForm, "")) {
				HudMessage(k:"+attack", s:"\c[White]: ", s:PrimaryFire, s:"\n",
						   k:"+altattack", s:"\c[White]: ", s:SecondaryFire, s:"\n",
						   k:"+jump", s:"\c[White]: ", s:Jump, s:"\n",
						   k:"+crouch", s:"\c[White]: ", s:Crouch, s:"\n",
						   k:"+reload", s:"\c[White]: ", s:OffhandAttack, s:"\n",
						   k:"+zoom", s:"\c[White]: ", s:OffhandAbility, s:"\n",
						   k:"pukename LastWeapon", s:"\c[White]: Last Used Weapon\n",
						   k:"invuse", s:"\c[White]: ", s:SuperForm;
						   HUDMSG_PLAIN, 7, CR_GOLD, -0.02, -0.4, 1.0, 1.0);
			}
			else {
				HudMessage(k:"+attack", s:"\c[White]: ", s:PrimaryFire, s:"\n",
						   k:"+altattack", s:"\c[White]: ", s:SecondaryFire, s:"\n",
						   k:"+jump", s:"\c[White]: ", s:Jump, s:"\n",
						   k:"+crouch", s:"\c[White]: ", s:Crouch, s:"\n",
						   k:"+reload", s:"\c[White]: ", s:OffhandAttack, s:"\n",
						   k:"+zoom", s:"\c[White]: ", s:OffhandAbility, s:"\n",
						   k:"pukename LastWeapon", s:"\c[White]: Last Used Weapon\n";
						   HUDMSG_PLAIN, 7, CR_GOLD, -0.02, -0.41, 0.1, 1.0);
			}
		}
		Delay(1);
	}
}

script 69 (void)
{
	if (PlayerClass(PlayerNumber()) == Sonic)
		HudMessage(s:"\c[Sonic] Sonic: \c[White] Consider this your bad Lock & Load!"; HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
}

script "FormTint" enter
{
	int counter;
	int cdelay = 5;
	bool redFlash = false;
	while (1) {
		counter++;
		if (counter % cdelay == 0) {
			redFlash = !redFlash;
		}
		if (ClassifyActor(0) & ACTOR_ALIVE) {
			switch (PlayerClass(PlayerNumber())) {
				case Sonic:
					if (CheckInventory("PowerHyper")) {
						if (CheckInventory("ChaosEnergy") < 100 && redFlash && GetCvar("LowEnergySound")) {
							FadeTo(255, 0, 0, 0.2, 0.1);
						}
						else FadeTo(255, 255, 255, 0.1, 0.1);	
					}
					else if (CheckInventory("PowerSuper")) {
						if (CheckInventory("ChaosEnergy") < 50 && redFlash && GetCvar("LowEnergySound")) {
							FadeTo(255, 0, 0, 0.2, 0.1);
						}
						else FadeTo(240, 188, 24, 0.2, 0.1);
					}
					break;
				case Amy:
					if (CheckInventory("PowerSuper")) {
						if (CheckInventory("ChaosEnergy") < 100 && redFlash && GetCvar("LowEnergySound")) {
							FadeTo(255, 0, 0, 0.3, 0.1);
						}
						else FadeTo(123, 13, 102, 0.3, 0.1);
					}
					break;
				case ClassicSonic:
					if (CheckInventory("PowerHyper")) {
						if (CheckInventory("ChaosEnergy") < 100 && redFlash && GetCvar("LowEnergySound")) {
							FadeTo(255, 0, 0, 0.2, 0.1);
						}
						else FadeTo(255, 255, 255, 0.1, 0.1);
					}
					else if (CheckInventory("PowerSuper")) {
						if (CheckInventory("ChaosEnergy") < 50 && redFlash && GetCvar("LowEnergySound")) {
							FadeTo(255, 0, 0, 0.2, 0.1);
						}
						else FadeTo(240, 188, 24, 0.2, 0.1);
					}
					break;
				case Shadow:
					if (CheckInventory("PowerSuper")) {
						if (CheckInventory("ChaosEnergy") < 50 && redFlash && GetCvar("LowEnergySound")) {
							FadeTo(255, 0, 0, 0.2, 0.1);
						}
						else FadeTo(234, 205, 114, 0.1, 0.1);
					}
					break;
			}
		}
		Delay(1);
	}
}

script "HomingReticle" (void)
{
	switch (GetCvar("HomingReticle")) {
		case 1: // Minimal
			SetFont("reticlm");
			break;
		case 2: // Enabled
			SetFont("reticle");
			break;
	}
	HudMessage(s:"A"; HUDMSG_LAYER_UNDERHUD|HUDMSG_FADEOUT, 12, 0, 0.5, 0.5, 0.1, 0.1);
}

script "ParryEffect" (void)
{
	SetActivator(1001);
	AmbientSound("sweapons/blockattackx", 127);
	FadeTo(102, 88, 221, 0.8, 0.1);
	Delay(1);
	FadeTo(102, 88, 221, 0.2, 0.1);
	Delay(6);
	FadeTo(0, 0, 0, 0, 0.1); 
}