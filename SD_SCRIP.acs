#library "snclkld"
#include "zcommon.acs"
#define CSF_SOLIDGROUND 1
#define CSF_SOLIDACTORS 2
#define CSF_ALL (CSF_SOLIDGROUND|CSF_SOLIDACTORS)

//int StopBeingBrutal = 0;

script "Taunt" (void)
{
	NoiseAlert(0, 0);
	switch(PlayerClass(PlayerNumber())) {
		case 0:
			PlaySound(1001, "sonic/taunt", 9, 1.0);
            break;
		case 1:
			PlaySound(1001, "amy/taunt", 9, 1.0);
			break;
		case 2:
			PlaySound(1001, "classic/taunt", 9, 1.0);
			break;
		case 3:
			if (random(1, 35) == 35) {
				PlaySound(1001, "imthe/coolest", 9, 1.0);
			} else {
				PlaySound(1001, "shadow/taunt", 9, 1.0);
			}
			break;
		case -1:
			default:
			break;
	}
}

script "IsCrouching" (void)
{
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);

	if (buttons & BT_CROUCH) { SetResultValue(1); }
	else { SetResultValue(0); }
}

script 3 (void) // I have no clue what this is supposed to do
{
    ThrustThingZ(0, 7, 0, 1);
}

script "TransformSuper" (void)
{
	if (CheckInventory("PowerSuper"))
	{
		switch(PlayerClass(PlayerNumber()))
		{
            case 0: // Super Sonic
                 if (GetCvar("SupSonic") == 1) {
					 SetMusic("S_SUPER", 0);
				 }
				 else if (GetCvar("SupSonic") == 2) {
					 SetMusic("S_SUPER2", 0);
				 }
                 break;
            case 1: // Dark Amy
                 if (GetCvar("SupAmy")) {
					SetMusic("A_SUPER", 0);
				 }
                 break;
            case 2: // Classic Super Sonic
                 if (GetCvar("SupClassic") == 1) {
					 SetMusic("C_SUPER", 0);
				 }
				 else if (GetCvar("SupClassic") == 2) {
					 SetMusic("C_SUPER2", 0);
				 }
                 break;
            case 3: // Super Shadow
                 if (GetCvar("SupShadow") == 1) {
					 SetMusic("D_SUPER", 0);
				 }
				 else if (GetCvar("SupShadow") == 2) {
					 SetMusic("D_SUPER2", 0);
				 }
                 break;
            case -1:
            default:
                 break;
        }
		while (CheckInventory("PowerSuper"))
		{
		    SetMugShotState("Super");
			Delay(35);
		}
		if (GetCvar("SupSonic")||GetCvar("SupAmy")||GetCvar("SupClassic")||GetCvar("SupShadow")) { 
			SetMusic("*", 0);
		}
		SetMugShotState("Normal");
	}
	else
	{
		SetMusic("*", 0);
	}
}

script "TransformHyper" (void)
{
	if (CheckInventory("PowerHyper"))
	{
		while (CheckInventory("PowerHyper"))
		{
			if (GetCvar("HyperMusic"))
			{
				SetMusic("C_HYPER", 0);
			}
		    SetMugShotState("Hyper");
			TakeInventory("PowerSuper", 1);
			TakeInventory("ChaosEmeralds", 1);
			Delay(35); 
		}
		if (GetCvar("HyperMusic")) { SetMusic("*", 0); }
		SetMugShotState("Normal");
		SetActorProperty(1001, APROP_JumpZ, 12.0);
	}
	else
	{
		if (GetCvar("HyperMusic")) { SetMusic("*", 0); }
		SetActorProperty(1001, APROP_JumpZ, 12.0);
	}
}

script "Invincibility" (void)
{
	if (!CheckInventory("PowerSuper") && !CheckInventory("PowerHyper"))
	{
		if (CheckInventory("PowerInvulnerable"))
		{
			switch(PlayerClass(PlayerNumber()))
			{
					case 0: 
						if (GetCvar("InvSonic")) { SetMusic("s_invinc", 0); }
						break;
					case 1: 
						if (GetCvar("InvAmy")) { SetMusic("a_invinc", 0); }
						break;
					case 2: 
						if (GetCvar("InvClassic")) { SetMusic("c_invinc", 0); }
						break;
					case 3:
						if (GetCvar("InvShadow")) { SetMusic("d_invinc", 0); }
						break;
					case -1:
					default:
						break;
			}
			while (CheckInventory("PowerInvulnerable"))
			{
				delay(15);
			}
			if (GetCvar("InvSonic")||GetCvar("InvAmy")||GetCvar("InvClassic")||GetCvar("InvShadow")) { 
				SetMusic("*", 0);
			}
		}
		else
		{
			if (GetCvar("InvSonic")||GetCvar("InvAmy")||GetCvar("InvClassic")||GetCvar("InvShadow")) { 
				SetMusic("*", 0);
			}
		}
	}
}

script "InitMusic" ENTER
{
	SetMugShotState("Normal");
	SetMusic("*", 0);
}

script "ChaosEmeraldHandler" (void)
{
	if (CheckInventory("PowerSuper") || CheckInventory("PowerHyper"))
	{
		if (PlayerClass(PlayerNumber()) == 2 && !CheckInventory("PowerHyper") && GetCvar("HyperSonic"))
		/* If playing as Classic Sonic, you're not already in Hyper form and Hyper form is enabled... */
		{
            PlaySound(1001, "super/classich", CHAN_BODY, 1.0);
			Log(s:"\c[ClassicBlue]Okay, NO more playing around!!");
			TakeInventory("PowerSuper", 1);
			GiveInventory("HyperForm", 1);
			ACS_NamedExecute("TransformHyper", 0);
			ACS_NamedExecute("TakeRingsIfHyper", 0);
		}
		else
		{
			Log(s:"Chaos Energy refilled!");
			TakeInventory("ChaosEmeralds", 1);
			GiveInventory("ChaosEnergy", 999);
		}
	}
	else
	{
		switch(PlayerClass(PlayerNumber()))
		{
			case 1:
				Log(s:"\c[Purple]Press \cl", k:"invuse", s:" \c[Purple]to embrace the darkness!"); // Amy
				break;
			case 3:
				Log(s:"\c[Gold]Press \cl", k:"invuse", s:" \c[Gold]to activate Super Shadow!"); // Shadow
				break;
			default:
				Log(s:"\c[Gold]Press \cl", k:"invuse", s:" \c[Gold]to activate Super Sonic!"); // Sonic and Classic
				break;
		}
	}
}

script "NoBrutal4U" ENTER
{
	if (CheckClass("BrutalWeapon"))
	{
		if (GetLevelInfo(LEVELINFO_CLUSTERNUM) != 412 && GetLevelInfo(LEVELINFO_CLUSTERNUM) != 413)
		{
			if (GetCvar("StopBeingBrutal") == 1)
			{
				ChangeLevel("LMAONO", 0, CHANGELEVEL_NOINTERMISSION, -1);
			}
			else
			{
				SetCvar("StopBeingBrutal", 1);
				ChangeLevel("ERR666", 0, CHANGELEVEL_NOINTERMISSION, -1);
			}
		}
	}
	else
	{
		if (GetLevelInfo(LEVELINFO_CLUSTERNUM) == 412)
		{
			switch (Random(1, 6))
			{
				case 1:
					Print(s:"See you next game!");
					break;
				case 2:
					Print(s:"You aren't meant to be here");
					break;
				case 3:
					Print(s:"Sorry, this level is only for heretics");
					break;
				case 4:
					Print(s:"No! This isn't the way you're supposed to play the game!");
					break;
				case 5:
					Print(s:"lol no");
					break;
				case 6:
					Print(s:"Why would you even...?");
					break;
				default:
					Print(s:"Send chicken wings");
					break;
			}
			Exit_Normal(0);
		}
	}
}

script "DeathMusic" (int xdeath)
{
	if (GetCvar("DeathMusic")) {
		if (xdeath) {
			switch(PlayerClass(PlayerNumber())) {
				case 0:
					break;
				case 1:
					break;
				case 2:
					SetMusic("C_DEADX", 0);
					break;
				case 3:
					SetMusic("D_DEADX", 0);
					break;
				case -1:
				default:
					break;
			}
		} 
		
		else {
			switch(PlayerClass(PlayerNumber()))
			{
				case 0:
					SetMusic("S_DEADM", 0);
					break;
				case 1:
					SetMusic("A_DEADM", 0);
					break;
				case 2:
					SetMusic("C_DEADM", 0);
					Delay(9*35);
					SetMusic("*");
					break;
				case 3:
					SetMusic("D_DEADM", 0);
					Delay(7*35);
					SetMusic("*");
					break;
				case -1:
				default:
					break;
			}
		}
	}
}

script "TakeRingsIfSuper" (void)
{
	while (CheckInventory("PowerSuper"))
	{
		switch(PlayerClass(PlayerNumber()))
		{
			case 1: // Amy
				TakeInventory("ChaosEnergy", 2);
				break;
			default:
				TakeInventory("ChaosEnergy", 1);
				break;
		}
		Delay(2);
		if (!CheckInventory("ChaosEnergy"))
		{
			TakeInventory("PowerSuper", 1);
			TakeInventory("PowerInvulnerable", 1);
		}
	}
}

script "TakeRingsIfHyper" (void)
{
	while (CheckInventory("PowerHyper"))
	{
		Delay(2);
		TakeInventory("ChaosEnergy", 2);
		if (!CheckInventory("ChaosEnergy"))
		{
			TakeInventory("PowerHyper", 1);
			TakeInventory("PowerInvulnerable", 1);
		}
	}
}

script "SetAirControl" ENTER
{
	SetAirControl(0.35);
}

script "KickCooldown" ENTER
{
	while (true)
	{
		Delay(1);
		TakeInventory("KickCooldown", 1);
	}
}

script "RingCountCheck" ENTER
{
	while (true)
	{
		Delay(2);
		if (CheckInventory("Health") > 500)
		{
			GiveInventory("OverRinged2", 1);
		}
		else if (CheckInventory("Health") > 300)
		{
			GiveInventory("OverRinged", 1);
		}
		else
		{
			TakeInventory("PowerOverRinged", 1);
			TakeInventory("PowerOverRinged2", 1);
		}
	}
	
}

script "GiveTID" ENTER
{
	Thing_ChangeTID(0, 1001);
}

script "Damn4thChaosEmerald" (void)
{
	AmbientSound("shadow/damn4thchaos", 127);
}

script "NoMusic" (void)
{
	SetMusic("", 0);
}

script "ResetMusic" (void)
{
	SetMusic("*", 0);
}

script "ReticleSound" (void)
{
	AmbientSound("sweapons/reticle", 127);
}

/*
script "YouGotExe-cuted" DEATH
{
	if (ThingCount(T_BRAINS, 0))
	{
		ChangeLevel("CONTINUE", 0, CHANGELEVEL_NOINTERMISSION, -1);
	}
}
*/

script "ContinuingSucks" (void)
{
	ClearInventory();
	SetActorProperty(1001, APROP_Health, 1);
}

script "Sfjbtojbyjo" DEATH
{
	if (GetCvar("StopBeingBrutal"))
	{
		SetCvar("DkgBruTecFpgA", 1);
	}
}

script "SA1AllOverAgain" ENTER
{
	if (GetCvar("DkgBruTecFpgA"))
	{
		Delay(1);
		while (true)
		{
			SetMusic("thewindy");
			Delay(5);
		}
	}
}

function void SetMugshotIfNotSuper(str state)
{
	if (!CheckInventory("PowerSuper") && !CheckInventory("PowerHyper")) {
		SetMugShotState(state);
	}
}

script "GoalRing" (void)
{
	Thing_Stop(1001);
	GiveInventory("Invincibility", 1);
	int LevelTime = Timer() / 35;
	int ParTime = GetLevelInfo(LEVELINFO_PAR_TIME);
	int DParTime = ParTime * 2;
	int CurrentHealth = GetActorProperty(1001, APROP_Health);
	int KilledMonsters = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
	int TotalMonsters = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);
	SetFont("BIGFONT");
	switch (PlayerClass(PlayerNumber()))
	{
		case 0:
			SetMusic("S_VICTOR");
			Print(s:"\c[Sonic]Stage Clear");
			if (LevelTime > DParTime) {
				PlaySound(1001, "sonic/badresult");
				SetMugshotIfNotSuper("Failure");
			}
			else if (LevelTime > ParTime) {
				PlaySound(1001, "sonic/okayresult");
				SetMugshotIfNotSuper("Failure");
			}
			else {
				PlaySound(1001, "sonic/goodresult");
				SetMugshotIfNotSuper("Grin");
			}
			Delay(35*7);
			break;
		case 1:
			SetMusic("A_VICTOR");
			Print(s:"\c[Amy]Act Clear!");
			if (CurrentHealth < 40) {
				PlaySound(1001, "amy/badresult");
				SetMugshotIfNotSuper("Failure");
			}
			else {
				PlaySound(1001, "amy/goodresult", CHAN_BODY, 0.7);
				SetMugshotIfNotSuper("Grin");
			}
			Delay(35*7);
			break;
		case 2:
			SetMusic("C_VICTOR");
			if (CheckInventory("PowerHyper")) {
				Print(s:"\c[Purple]HYPER SONIC \c[White]GOT THROUGH");
			} else if (CheckInventory("PowerSuper")) {
				Print(s:"\c[Gold]SUPER SONIC \c[White]GOT THROUGH");
			} else {
				Print(s:"\c[Classic]SONIC \c[White]GOT THROUGH");
			}
			if (CurrentHealth < 21) {
				PlaySound(1001, "classic/badresult");
				SetMugshotIfNotSuper("Failure");
			}
			else if (LevelTime > ParTime) {
				PlaySound(1001, "classic/okayresult");
				SetMugshotIfNotSuper("OK");
			}
			else {
				PlaySound(1001, "classic/goodresult");
				SetMugshotIfNotSuper("Grin");
			}
			Delay(35*6);
			break;
		case 3:
			SetMusic("D_VICTOR");
			if (KilledMonsters == TotalMonsters) {
				Print(s:"\c[Shadow]Mission Cleared");
				PlaySound(1001, "shadow/goodresult");
				SetMugshotIfNotSuper("OK");
			}
			else {
				Print(s:"\c[Shadow]Mission Incomplete");
				PlaySound(1001, "shadow/badresult");
				SetMugshotIfNotSuper("Failure");
			}
			Delay(35*7);
			break;
		case -1:
		default:
			break;
	}
	Exit_Normal(0);
}

script "SonicN64" (void)
{
	AmbientSound("sonic/nintendo64", 127);
}

script "Drowning" ENTER
{
	int drowntimer;
	int maxdrown;
	while (1) {
		if (GetActorProperty(1001, APROP_Waterlevel) == 3) {
			if (!CheckActorInventory(1001, "PowerSuper") && !CheckActorInventory(1001, "PowerHyper") && !CheckActorInventory(1001, "PowerInvulnerable")) {
				drowntimer++;
			}
			if (drowntimer > 4)
			{
				switch(PlayerClass(PlayerNumber())) {
					case 0:
						SetMusic("S_DROWN", 0);
						break;
					case 1:
						SetMusic("A_DROWN", 0);
						break;
					case 2:
						SetMusic("C_DROWN", 0);
						break;
					case 3:
						SetMusic("D_DROWN", 0);
						break;
					default:
						break;
				}
			}
			if (drowntimer > 16)
			{
				DamageActor(1001, AAPTR_PLAYER1, 0, 0, 9999, "Drownd");
				if (!GetCvar("DeathMusic")) { SetMusic("*"); }
				break;
			}
		}
		else {
			if (drowntimer > 4) {
				SetMusic("*");
			}
			drowntimer = 0;
		}
		Delay(35);
	}
}

script "ReactionTime" (void)
{
	AmbientSound("sglobal/reaction", 127);
}

script "BossMusic2" (void)
{
	SetMusic("B_SCRT2");
}

script "JumpHeight" (int Reset)
{
	if (Reset) {
		switch(PlayerClass(PlayerNumber())) {
			case 3: // Shadow
				SetActorProperty(1001, APROP_JumpZ, 17.0);
				break;
			default: // Everyone else
				SetActorProperty(1001, APROP_JumpZ, 15.0);
				break;
		}
	} else {
		switch(PlayerClass(PlayerNumber())) {
            case 0: // Super Sonic
				SetActorProperty(1001, APROP_JumpZ, 19.0);
                break;
            case 1: // Dark Amy
				SetActorProperty(1001, APROP_JumpZ, 17.0);
                break;
            case 2:
				if (CheckInventory("PowerHyper")) {
					// Classic Hyper Sonic
					SetActorProperty(1001, APROP_JumpZ, 20.0);
				} else {
					// Classic Super Sonic
					SetActorProperty(1001, APROP_JumpZ, 17.0);
				}
                break;
            case 3: // Shadow
				SetActorProperty(1001, APROP_JumpZ, 21.0);
                break;
            case -1:
            default:
                 break;
        }
	}
}

script "DoubleJump" enter
{
	/*
	 * Thanks to Agent ME on the ZDoom Forum for this script
	 * <https://forum.zdoom.org/viewtopic.php?t=21034>
	 */
	int maxDblJumps = 1;
	int dblJumpThrust = 60;

	int lastZ = GetActorZ(0);
	int olderZ;
	int counter = 0;
	while (true)
	{
		olderZ = lastZ;
		lastZ = GetActorZ(0);
		delay(1);

		if ((GetPlayerInput(-1, MODINPUT_BUTTONS) & BT_JUMP) && !(GetPlayerInput(-1, MODINPUT_OLDBUTTONS) & BT_JUMP) && (PlayerClass(PlayerNumber()) == 0 || PlayerClass(PlayerNumber()) == 1) && GetCvar("DoubleJump") && (ClassifyActor(1001) & ACTOR_ALIVE)) {
			if ((GetActorZ(0) > lastZ) && (lastZ <= olderZ)) {
				counter = 0;
			} else {
				if (counter < maxDblJumps) {
					if (GetCvar("DoubleJump") == 1) { Thing_Stop(1001); }
					ThrustThingZ(0, dblJumpThrust, 0, 0);
					if (PlayerClass(PlayerNumber()) == 0) { PlaySound(1001, "sonic/doublejump"); }
					if (PlayerClass(PlayerNumber()) == 1) { PlaySound(1001, "amy/doublejump"); }
					counter++;
				}
			}
		} else if ((olderZ == lastZ) && (lastZ == GetActorZ(0))) {
			counter = 0;
		}
	}
}
