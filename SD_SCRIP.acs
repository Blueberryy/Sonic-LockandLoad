#library "snclkld"
#include "zcommon.acs"
#define CSF_SOLIDGROUND 1
#define CSF_SOLIDACTORS 2
#define CSF_ALL (CSF_SOLIDGROUND|CSF_SOLIDACTORS)

//int StopBeingBrutal = 0;

script "Taunt" (void)
{
	NoiseAlert(0, 0);
	switch(PlayerClass(PlayerNumber())) {
		case 0:
			PlaySound(1001, "sonic/taunt", CHAN_BODY, 1.0);
            break;
		case 1:
			PlaySound(1001, "amy/taunt", CHAN_BODY, 1.0);
			break;
		case 2:
			PlaySound(1001, "classic/taunt", CHAN_BODY, 1.0);
			break;
		case 3:
			if (random(1, 35) == 35) {
				PlaySound(1001, "imthe/coolest", CHAN_BODY, 1.0);
			} else {
				PlaySound(1001, "shadow/taunt", CHAN_BODY, 1.0);
			}
			break;
		case -1:
			default:
			break;
	}
}

script "IsCrouching" (void)
{
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);

	if (buttons & BT_CROUCH)
	{
		SetResultValue(1);
	}
	else
	{
		SetResultValue(0);
	}
}

script 3 (void) // I have no clue what this is supposed to do
{
    ThrustThingZ(0, 7, 0, 1);
}

script "TransformSuper" (void)
{
	if (CheckInventory("PowerSuper"))
	{
		switch(PlayerClass(PlayerNumber()))
		{
            case 0: // Sonic
                 if (GetCvar("SupSonic") == 1)
				 {
					 SetMusic("v_supsnc", 0);
				 }
				 else if (GetCvar("SupSonic") == 2)
				 {
					 SetMusic("m_supsnc", 0);
				 }
                 break;
            case 1: // Amy
                 if (GetCvar("SupAmy"))
				 {
					SetMusic("m_supamy", 0);
				 }
                 break;
            case 2: // Classic Sonic
                 if (GetCvar("SupClassic") == 1)
				 {
					 SetMusic("v_supcls", 0);
				 }
				 else if (GetCvar("SupClassic") == 2)
				 {
					 SetMusic("m_supcls", 0);
				 }
                 break;
            case 3: // Shadow
                 if (GetCvar("SupShadow") == 1)
				 {
					 SetMusic("v_supsha", 0);
				 }
				 else if (GetCvar("SupShadow") == 2)
				 {
					 SetMusic("m_supsha", 0);
				 }
                 break;
            case -1:
            default:
                 break;
        }
		while (CheckInventory("PowerSuper"))
		{
		    SetMugShotState("Super");
			Delay(35);
		}
		SetMusic("*", 0);
		SetMugShotState("Normal");
	}
	else
	{
		SetMusic("*", 0);
	}
}

script "TransformHyper" (void)
{
	if (CheckInventory("PowerHyper"))
	{
		while (CheckInventory("PowerHyper"))
		{
			if (GetCvar("HyperMusic") > 0)
			{
				SetMusic("m_hypcls", 0);
			}
		    SetMugShotState("Hyper");
			TakeInventory("PowerSuper", 1);
			TakeInventory("ChaosEmeralds", 1);
			Delay(35); 
		}
		if (GetCvar("HyperMusic") > 0)
		{
			SetMusic("*", 0);
		}
		SetMugShotState("Normal");
	}
	else
	{
		if (GetCvar("HyperMusic") > 0)
		{
			SetMusic("*", 0);
		}
	}
}

script "Invincibility" (void)
{
	if (!CheckInventory("PowerSuper") && !CheckInventory("PowerHyper"))
	{
		if (CheckInventory("PowerInvulnerable"))
		{
			switch(PlayerClass(PlayerNumber()))
			{
					case 0: 
						if (GetCvar("InvSonic")) { SetMusic("s_invinc", 0); }
						break;
					case 1: 
						if (GetCvar("InvAmy")) { SetMusic("a_invinc", 0); }
						break;
					case 2: 
						if (GetCvar("InvClassic")) { SetMusic("c_invinc", 0); }
						break;
					case 3:
						if (GetCvar("InvShadow")) { SetMusic("d_invinc", 0); }
						break;
					case -1:
					default:
						break;
			}
			while (CheckInventory("PowerInvulnerable"))
			{
				delay(15);
			}
			SetMusic("*", 0);
		}
		else
		{
			SetMusic("*", 0);
		}
	}
}

script "InitMusic" ENTER
{
	SetMugShotState("Normal");
	SetMusic("*", 0);
}

script "ChaosEmeraldHandler" (void)
{
	if (CheckInventory("PowerSuper") || CheckInventory("PowerHyper"))
	{
		if (PlayerClass(PlayerNumber()) == 2 && !CheckInventory("PowerHyper") && GetCvar("HyperSonic"))
		/* If playing as Classic Sonic, you're not already in Hyper form and Hyper form is enabled... */
		{
            PlaySound(1001, "super/classich", CHAN_BODY, 1.0);
			Log(s:"\c[ClassicBlue]Okay, NO more playing around!!");
			TakeInventory("PowerSuper", 1);
			GiveInventory("HyperForm", 1);
			ACS_NamedExecute("TransformHyper", 0);
			ACS_NamedExecute("TakeRingsIfHyper", 0);
		}
		else
		{
			Log(s:"Chaos Energy refilled!");
			TakeInventory("ChaosEmeralds", 1);
			GiveInventory("ChaosEnergy", 999);
		}
	}
	else
	{
		switch(PlayerClass(PlayerNumber()))
		{
			case 1:
				Log(s:"\clPress \cf", k:"invuse", s:" \clto activate Dark form!");
				break;
			case -1:
				Log(s:"\clPress \cf", k:"invuse", s:" \clto activate Super form!");
				break;
			default:
				Log(s:"\clPress \cf", k:"invuse", s:" \clto activate Super form!");
				break;
		}
	}
}

script "NoBrutal4U" ENTER
{
	if (CheckClass("BrutalWeapon"))
	{
		if (GetLevelInfo(LEVELINFO_CLUSTERNUM) != 412 && GetLevelInfo(LEVELINFO_CLUSTERNUM) != 413)
		{
			if (GetCvar("StopBeingBrutal") == 1)
			{
				ChangeLevel("LMAONO", 0, CHANGELEVEL_NOINTERMISSION, -1);
			}
			else
			{
				SetCvar("StopBeingBrutal", 1);
				ChangeLevel("ERR666", 0, CHANGELEVEL_NOINTERMISSION, -1);
			}
		}
	}
	else
	{
		if (GetLevelInfo(LEVELINFO_CLUSTERNUM) == 412)
		{
			switch (Random(1, 6))
			{
				case 1:
					Print(s:"See you next game!");
					break;
				case 2:
					Print(s:"You aren't meant to be here");
					break;
				case 3:
					Print(s:"Sorry, this level is only for heretics");
					break;
				case 4:
					Print(s:"No! This isn't the way you're supposed to play the game!");
					break;
				case 5:
					Print(s:"lol no");
					break;
				case 6:
					Print(s:"Why would you even...?");
					break;
				default:
					Print(s:"Send chicken wings");
					break;
			}
			Exit_Normal(0);
		}
	}
}

script "DeathMusic" (int xdeath)
{
	if (xdeath) {
		switch(PlayerClass(PlayerNumber())) {
			case 0:
				SetMusic("S_DEADM", 0);
				break;
			case 1:
				SetMusic("A_DEADM", 0);
				break;
			case 2:
				SetMusic("C_DEADX", 0);
				break;
			case 3:
				SetMusic("D_DEADX", 0);
				break;
			case -1:
			default:
				break;
		}
	} 
	
	else {
		switch(PlayerClass(PlayerNumber()))
		{
			case 0:
				SetMusic("S_DEADM", 0);
				break;
			case 1:
				SetMusic("A_DEADM", 0);
				break;
			case 2:
				SetMusic("C_DEADM", 0);
				Delay(9*35);
				SetMusic("*");
				break;
			case 3:
				SetMusic("D_DEADM", 0);
				Delay(7*35);
				SetMusic("*");
				break;
			case -1:
			default:
				break;
		}
	}
}

script "TakeRingsIfSuper" (void)
{
	while (CheckInventory("PowerSuper"))
	{
		Delay(2);
		TakeInventory("ChaosEnergy", 1);
		if (!CheckInventory("ChaosEnergy"))
		{
			TakeInventory("PowerSuper", 1);
			TakeInventory("PowerInvulnerable", 1);
		}
	}
}

script "TakeRingsIfHyper" (void)
{
	while (CheckInventory("PowerHyper"))
	{
		Delay(2);
		TakeInventory("ChaosEnergy", 2);
		if (!CheckInventory("ChaosEnergy"))
		{
			TakeInventory("PowerHyper", 1);
			TakeInventory("PowerInvulnerable", 1);
		}
	}
}

script "SetAirControl" ENTER
{
	switch(PlayerClass(PlayerNumber()))
	{
        case 2:
            SetAirControl(0.35);
            break;
        case -1:
        default:
			SetAirControl(0.5);
            break;
    }
}

script "KickCooldown" ENTER
{
	while (true)
	{
		Delay(1);
		TakeInventory("KickCooldown", 1);
	}
}

script "RingCountCheck" ENTER
{
	while (true)
	{
		Delay(2);
		if (CheckInventory("Health") > 500)
		{
			GiveInventory("OverRinged2", 1);
		}
		else if (CheckInventory("Health") > 300)
		{
			GiveInventory("OverRinged", 1);
		}
		else
		{
			TakeInventory("PowerOverRinged", 1);
			TakeInventory("PowerOverRinged2", 1);
		}
	}
	
}

script "GiveTID" ENTER
{
	Thing_ChangeTID(0, 1001);
}

script "Damn4thChaosEmerald" (void)
{
	AmbientSound("shadow/damn4thchaos", 127);
}

script "NoMusic" (void)
{
	SetMusic("", 0);
}

script "ResetMusic" (void)
{
	SetMusic("*", 0);
}

script "ReticleSound" (void)
{
	AmbientSound("sweapons/reticle", 127);
}

/*
script "YouGotExe-cuted" DEATH
{
	if (ThingCount(T_BRAINS, 0))
	{
		ChangeLevel("CONTINUE", 0, CHANGELEVEL_NOINTERMISSION, -1);
	}
}
*/

script "ContinuingSucks" (void)
{
	ClearInventory();
	SetActorProperty(1001, APROP_Health, 1);
}

script "Sfjbtojbyjo" DEATH
{
	if (GetCvar("StopBeingBrutal"))
	{
		SetCvar("DkgBruTecFpgA", 1);
	}
}

script "SA1AllOverAgain" ENTER
{
	if (GetCvar("DkgBruTecFpgA"))
	{
		Delay(1);
		while (true)
		{
			SetMusic("thewindy");
			Delay(5);
		}
	}
}

script "GoalRing" (void)
{
	Thing_Stop(1001);
	SetActorProperty(1001, APROP_DamageFactor, 0);
	int LevelTime = Timer() / 35;
	int ParTime = GetLevelInfo(LEVELINFO_PAR_TIME);
	int DParTime = ParTime * 2;
	int CurrentHealth = GetActorProperty(1001, APROP_Health);
	int KilledMonsters = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
	int TotalMonsters = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);
	switch (PlayerClass(PlayerNumber()))
	{
		case 0:
			if (LevelTime > DParTime) {
				PlaySound(1001, "sonic/badresult");
				SetMugShotState("Failure");
			}
			else if (LevelTime > ParTime) {
				PlaySound(1001, "sonic/okayresult");
				SetMugShotState("Failure");
			}
			else {
				PlaySound(1001, "sonic/goodresult");
				SetMugShotState("Grin");
			}
			break;
		case 1:
			if (CurrentHealth < 40) {
				PlaySound(1001, "amy/badresult");
				SetMugShotState("Failure");
			}
			else {
				PlaySound(1001, "amy/goodresult", CHAN_BODY, 0.7);
				SetMugShotState("Grin");
			}
			break;
		case 2:
			if (CurrentHealth < 21) {
				PlaySound(1001, "classic/badresult");
				SetMugShotState("Failure");
			}
			else if (LevelTime > ParTime) {
				PlaySound(1001, "classic/okayresult");
			}
			else {
				PlaySound(1001, "classic/goodresult");
				SetMugShotState("Grin");
			}
			break;
		case 3:
			if (KilledMonsters == TotalMonsters) {
				PlaySound(1001, "shadow/goodresult");
			}
			else {
				PlaySound(1001, "shadow/badresult");
				SetMugShotState("Failure");
			}
			break;
		case -1:
		default:
			break;
	}
	Delay(70);
	if (PlayerClass(PlayerNumber()) == 1) // If playing as Amy
	{
		SetActorProperty(1001, APROP_DamageFactor, 1.3);
	}
	else
	{
		SetActorProperty(1001, APROP_DamageFactor, 1);
	}
	Exit_Normal(0);
}

script "SonicN64" (void)
{
	AmbientSound("sonic/nintendo64", 127);
}

script "Drowning" ENTER
{
	int drowntimer;
	while (1) {
		if (GetActorProperty(1001, APROP_Waterlevel) == 3) {
			drowntimer++;
			if (drowntimer > 19)
			{
				SetMusic("d_drown");
			}
			if (drowntimer > 30)
			{
				DamageActor(1001, AAPTR_PLAYER1, 0, 0, 9999, "Drownd");
				SetMusic("*");
				break;
			}
		}
		else {
			if (drowntimer > 19) {
				SetMusic("*");
			}
			drowntimer = 0;
		}
		Delay(35);
	}
}