#library "snclkld"
#include "zcommon.acs"
#define Sonic 0
#define Amy 1
#define ClassicSonic 2
#define Shadow 3

/* Following script taken from the ZDoom Forums <https://forum.zdoom.org/viewtopic.php?t=51848#p903998> */

script "LastWeaponHandler" enter
{
    int pn            = PlayerNumber();
    str currentWeapon = GetWeapon();
    if (GetCvar("LastWeapon") == "") {
		SetCvar("lastWeapon", currentWeapon);
	}
    
    while (1) {
        if (StrCmp(currentWeapon, GetWeapon())) {
			SetCvar("lastWeapon", currentWeapon);
		}
        currentWeapon = GetWeapon();
        Delay(1);
    }
}

script "LastWeapon" (void)
{
    SetWeapon(GetCvar("lastWeapon"));
}

/* End of borrowed script */

script "Taunt" (void)
{
	NoiseAlert(0, 0);
	int tauntchance;
	switch(PlayerClass(PlayerNumber())) {
		case Sonic:
			tauntchance = random(1, 3);
			switch (tauntchance) {
				case 1:
					PlaySound(1001, "sonic/taunt1", 9, 1.0);
					SetMugshotState("GrinSmol");
					if (GetCvar("Subtitles")) {
						HudMessage(s:"\c[Sonic] Sonic: \c[White] You're too slow!";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 1.5, 1.0);
					}
					break;
				case 2:
					PlaySound(1001, "sonic/taunt2", 9, 1.0);
					SetMugshotState("GrinSmol");
					if (GetCvar("Subtitles")) {
						HudMessage(s:"\c[Sonic] Sonic: \c[White] Come on, step it up!";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
				case 3:
					PlaySound(1001, "sonic/taunt3", 9, 1.0);
					SetMugshotState("GrinSmol");
					if (GetCvar("Subtitles")) {
						HudMessage(s:"\c[Sonic] Sonic: \c[White] I'm Sonic the kidnapper!";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
			}
			break;
		case Amy:
			PlaySound(1001, "amy/taunt", 9, 1.0);
			SetMugshotState("FailSmol");
			if (GetCvar("Subtitles")) {
				HudMessage(s:"\c[Amy] Amy: \c[White] Are we gonna rest much longer...?";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
			}
			break;
		case ClassicSonic:
			tauntchance = random(1, 5);
			switch (tauntchance) {
				case 1:
					PlaySound(1001, "classic/taunt1", 9, 1.0);
					SetMugshotState("GrinSmol");
					if (GetCvar("Subtitles")) {
						HudMessage(s:"\c[Classic] Sonic: \c[White] Yo, have you guys been good?";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
				case 2:
					PlaySound(1001, "classic/taunt2", 9, 1.0);
					SetMugshotState("GrinSmol");
					if (GetCvar("Subtitles")) {
						HudMessage(s:"\c[Classic] Sonic: \c[White] Hey, I'll play with you some other time!";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
				case 3:
					PlaySound(1001, "classic/taunt3", 9, 1.0);
					SetMugshotState("GrinSmol");
					if (GetCvar("Subtitles")) {
						HudMessage(s:"\c[Classic] Sonic: \c[White] Sound test! You get to listen to cool sounds!";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 4.0, 1.0);
					}
					break;
				case 4:
					PlaySound(1001, "classic/taunt4", 9, 1.0);
					SetMugshotState("GrinSmol");
					if (GetCvar("Subtitles")) {
						HudMessage(s:"\c[Classic] Sonic: \c[White] Alright, put 'em up!";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
				case 5:
					PlaySound(1001, "classic/taunt5", 9, 1.0);
					SetMugshotState("FailSmol");
					if (GetCvar("Subtitles")) {
						HudMessage(s:"\c[Classic] Sonic: \c[White] Shoot, I got sand in my eye!";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
					}
					break;
			}
			break;
		case Shadow:
			tauntchance = random(1, 2);
			if (random(1, 35) == 35) {
				PlaySound(1001, "imthe/coolest", 9, 1.0);
				SetMugshotState("Grin");
				if (GetActorProperty(1001, APROP_Health) < 145) {
					SetActorProperty(1001, APROP_Health, 145);
				}
				if (GetCvar("Subtitles")) {
					HudMessage(s:"\c[Shadow] Shadow: \c[Gold] I'm the coolest!";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			} else {
				switch (tauntchance) {
					case 1:
						PlaySound(1001, "shadow/taunt1", 9, 1.0);
						if (GetCvar("Subtitles")) {
							HudMessage(s:"\c[Shadow] Shadow: \c[White] Hmph. Not even a challenge.";
								   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
						}
						break;
					case 2:
						PlaySound(1001, "shadow/taunt2", 9, 1.0);
						if (GetCvar("Subtitles")) {
							HudMessage(s:"\c[Shadow] Shadow: \c[White] You're going straight to hell!";
									   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
						}
						break;
				}
			}
			break;
	}
}

script "IsCrouching" (void)
{
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);

	if (buttons & BT_CROUCH) { SetResultValue(1); }
	else { SetResultValue(0); }
}

script 3 (void) // I have no clue what this is supposed to do
{
    ThrustThingZ(0, 7, 0, 1);
}

script "TransformSuper" (void)
{
	if (CheckInventory("PowerSuper"))
	{
		switch (PlayerClass(PlayerNumber()))
		{
            case Sonic: // Super Sonic
                 if (GetCvar("SuperMusic")) {
					 SetMusic("S_SUPER", 0);
				 }
                 break;
            case Amy: // Dark Amy
                 if (GetCvar("SuperMusic")) {
					SetMusic("A_SUPER", 0);
				 }
                 break;
            case ClassicSonic: // Classic Super Sonic
                 if (GetCvar("SuperMusic")) {
					 SetMusic("C_SUPER", 0);
				 }
                 break;
            case Shadow: // Super Shadow
                 if (GetCvar("SuperMusic")) {
					 SetMusic("D_SUPER", 0);
				 }
                 break;
            case -1:
            default:
                 break;
        }
		while (CheckInventory("PowerSuper")) {
		    SetMugShotState("Super");
			Delay(35);
		}
		if (GetCvar("SuperMusic")) { 
			SetMusic("*", 0);
		}
		SetMugShotState("Normal");
	}
	else {
		SetMusic("*", 0);
	}
}

script "TransformHyper" (void)
{
	if (CheckInventory("PowerHyper"))
	{
		while (CheckInventory("PowerHyper"))
		{
			if (GetCvar("SuperMusic")) {
				switch(PlayerClass(PlayerNumber())) {
					case Sonic:
						SetMusic("S_HYPER", 0);
						break;
					case ClassicSonic:
						SetMusic("C_HYPER", 0);
						break;
					default:
						 break;
				}
			}
		    SetMugShotState("Hyper");
			Delay(35); 
		}
		if (GetCvar("SuperMusic")) { SetMusic("*", 0); }
		SetMugShotState("Normal");
		SetActorProperty(1001, APROP_JumpZ, 12.0);
	}
	else
	{
		if (GetCvar("HyperMusic")) { SetMusic("*", 0); }
		SetActorProperty(1001, APROP_JumpZ, 12.0);
	}
}

script "Invincibility" (void)
{
	if (!CheckInventory("PowerSuper") && !CheckInventory("PowerHyper"))
	{
		if (CheckInventory("PowerInvulnerable"))
		{
			if (GetCvar("InvincMusic")) {
				switch (PlayerClass(PlayerNumber()))
				{
						case 0: 
							SetMusic("s_invinc", 0);
							break;
						case 1: 
							SetMusic("a_invinc", 0);
							break;
						case 2: 
							SetMusic("c_invinc", 0);
							break;
						case 3:
							SetMusic("d_invinc", 0);
							break;
						case -1:
						default:
							break;
				}
			}
			while (CheckInventory("PowerInvulnerable"))
			{
				delay(15);
			}
			if (GetCvar("InvincMusic")) { 
				SetMusic("*", 0);
			}
		}
		else
		{
			if (GetCvar("InvincMusic")) { 
				SetMusic("*", 0);
			}
		}
	}
}

script "InitMusic" ENTER
{
	SetMugShotState("Normal");
	SetMusic("*", 0);
}

script "ChaosEmeraldHandler" (void)
{
	int character = PlayerClass(PlayerNumber());
	if (CheckInventory("PowerSuper") || CheckInventory("PowerHyper")) {
		if ((character == Sonic || character == ClassicSonic) && !CheckInventory("PowerHyper") && GetCvar("HyperSonic")) {
			Log(s:"\c[White]Press \cl", k:"invuse", s:" \c[White]to go even further beyond!");
		} else {
			Log(s:"Chaos Energy refilled!");
			TakeInventory("ChaosEmeralds", 1);
			GiveInventory("ChaosEnergy", 999);
		}
	}
	else
	{
		switch(PlayerClass(PlayerNumber()))
		{
			case Amy:
				Log(s:"\c[Purple]Press \cl", k:"invuse", s:" \c[Purple]to embrace the darkness!");
				break;
			case Shadow:
				Log(s:"\c[Gold]Press \cl", k:"invuse", s:" \c[Gold]to activate Super Shadow!");
				break;
			default: // Sonic and Classic Sonic
				Log(s:"\c[Gold]Press \cl", k:"invuse", s:" \c[Gold]to activate Super Sonic!");
				break;
		}
	}
}

script "SuperTransformPrompt" enter
{
	while (1) {
		Delay(1);
		int x = 0.5;
		int y;
		switch (GetCvar("HUDType")) {
			case 3:
				// Legacy
				y = 0.8;
				break;
			default:
				// Unified, Classic-Style
				y = 0.9;
				break;
		}
		if (CheckInventory("ChaosEmeralds")) {
			switch(PlayerClass(PlayerNumber()))
			{
				case Sonic:
					if (CheckInventory("PowerSuper")) {
						HudMessage(s:"\c[Gold]", k:"invuse", s:"  \c[Sonic]Hyper Sonic";
						HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, 0);
					} else {
						HudMessage(s:"\c[Gold]", k:"invuse", s:"  \c[Sonic]Super Sonic";
						HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, 0);
					}
					break;
				case Amy:
					HudMessage(s:"\c[Purple]", k:"invuse", s:"  \c[Amy]Dark Amy";
					HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, 0);
					break;
				case ClassicSonic:
					if (CheckInventory("PowerSuper")) {
						HudMessage(s:"\c[Gold]", k:"invuse", s:"  \c[Classic]Hyper Sonic";
						HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, 0);
					} else {
						HudMessage(s:"\c[Gold]", k:"invuse", s:"  \c[Classic]Super Sonic";
						HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, 0);
					}
					break;
				case Shadow:
					HudMessage(s:"\c[Gold]", k:"invuse", s:"  \c[Shadow]Super Shadow";
					HUDMSG_PLAIN, 1, CR_UNTRANSLATED, x, y, 0);
					break;
				default:
					break;
			}
		}
		else { HudMessage(s:""; HUDMSG_PLAIN, 1, CR_UNTRANSLATED, 0, 0, 0, 0); }
	}
}

script "DeathMusic" (int xdeath)
{
	if (GetCvar("DeathMusic")) {
		if (xdeath) {
			switch(PlayerClass(PlayerNumber())) {
				case ClassicSonic:
					SetMusic("C_DEADX", 0);
					break;
				case Shadow:
					SetMusic("D_DEADX", 0);
					break;
				default:
					break;
			}
		}
		else {
			switch(PlayerClass(PlayerNumber()))
			{
				case Sonic:
					SetMusic("S_DEADM", 0);
					break;
				case Amy:
					SetMusic("A_DEADM", 0);
					break;
				case ClassicSonic:
					SetMusic("C_DEADM", 0);
					Delay(9*35);
					SetMusic("*");
					break;
				case Shadow:
					SetMusic("D_DEADM", 0);
					Delay(7*35);
					SetMusic("*");
					break;
				default:
					break;
			}
		}
	}
}

script "TakeRingsIfSuper" (void)
{
	while (CheckInventory("PowerSuper"))
	{
		TakeInventory("ChaosEnergy", 1);
		if (CheckInventory("ChaosEmeralds")) {
			Delay(3);
		}
		else if (PlayerClass(PlayerNumber()) == Amy) {
			Delay(1);
		}
		else {
			Delay(2);
		}
		if (!CheckInventory("ChaosEnergy"))
		{
			TakeInventory("PowerSuper", 1);
			TakeInventory("PowerInvulnerable", 1);
		}
	}
}

script "TakeRingsIfHyper" (void)
{
	while (CheckInventory("PowerHyper"))
	{
		Delay(1);
		TakeInventory("ChaosEnergy", 1);
		if (!CheckInventory("ChaosEnergy"))
		{
			TakeInventory("PowerHyper", 1);
			TakeInventory("PowerInvulnerable", 1);
		}
	}
}

script "SetFriction" ENTER
{
	int x, y, z, speed;
	while (true) {
		x = GetActorVelX(0);
		y = GetActorVelY(0);
		speed = FixedSqrt(FixedMul(x, x) + FixedMul(y, y));
		int forward = GetPlayerInput(-1, MODINPUT_FORWARDMOVE);
		int sidem = GetPlayerInput(-1, MODINPUT_SIDEMOVE);
		int buttons = GetPlayerInput(-1, MODINPUT_BUTTONS);
		bool isMoving = forward > 0 || sidem > 0 || forward < 0 || sidem < 0;
		if (speed > 60.0 && !isMoving) {
			SetActorProperty(0, APROP_Friction, 1.0);
			SetAirControl(0.0);
		}
		else if (isMoving) {
			SetActorProperty(0, APROP_Friction, 1.0);
			SetAirControl(0.4);
		}
		else {
			SetActorProperty(0, APROP_Friction, 0.9);
			SetAirControl(0.1);
		}
		Delay(1);
	}
}

script "KickCooldown" ENTER
{
	while (true)
	{
		Delay(1);
		TakeInventory("KickCooldown", 1);
	}
}

script "RingCountCheck" ENTER
{
	while (true)
	{
		Delay(2);
		if (CheckInventory("Health") > 500)
		{
			GiveInventory("OverRinged2", 1);
		}
		else if (CheckInventory("Health") > 300)
		{
			GiveInventory("OverRinged", 1);
		}
		else
		{
			TakeInventory("PowerOverRinged", 1);
			TakeInventory("PowerOverRinged2", 1);
		}
	}
	
}

script "GiveTID" ENTER
{
	Thing_ChangeTID(0, 1001);
}

script "Damn4thChaosEmerald" (void)
{
	AmbientSound("shadow/damn4thchaos", 127);
}

script "NoMusic" (void)
{
	SetMusic("", 0);
}

script "ResetMusic" (void)
{
	SetMusic("*", 0);
}

script "ReticleSound" (void)
{
	AmbientSound("sweapons/reticle", 127);
}

script "GoalRing" (void)
{
	Thing_Stop(1001);
	ACS_NamedTerminate("TransformSuper", 0);
	ACS_NamedTerminate("TransformHyper", 0);
	Delay(5);
	GiveInventory("Invincibility", 1);
	int LevelTime = Timer() / 35;
	int ParTime = GetLevelInfo(LEVELINFO_PAR_TIME);
	int DParTime = ParTime * 2;
	int CurrentHealth = GetActorProperty(1001, APROP_Health);
	int KilledMonsters = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
	int TotalMonsters = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);
	SetFont("BIGFONT");
	switch (PlayerClass(PlayerNumber()))
	{
		case Sonic:
			SetMusic("S_VICTOR");
			Print(s:"\c[Sonic]Stage Clear");
			SetFont("SMALLFONT");
			if (LevelTime > DParTime) {
				PlaySound(1001, "sonic/badresult");
				SetMugshotState("Failure");
				if (GetCvar("Subtitles")) {
					HudMessage(s:"\c[Sonic] Sonic: \c[White] Aw, I gotta try that again!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else if (LevelTime > ParTime) {
				PlaySound(1001, "sonic/okayresult");
				SetMugshotState("Failure");
				if (GetCvar("Subtitles")) {
					HudMessage(s:"\c[Sonic] Sonic: \c[White] Not my best run...";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else {
				PlaySound(1001, "sonic/goodresult");
				SetMugshotState("Grin");
				if (GetCvar("Subtitles")) {
					HudMessage(s:"\c[Sonic] Sonic: \c[White] How's that?";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			Delay(35*7);
			break;
		case Amy:
			SetMusic("A_VICTOR");
			Print(s:"\c[Amy]Act Clear!");
			SetFont("SMALLFONT");
			if (CurrentHealth < 40) {
				PlaySound(1001, "amy/badresult");
				SetMugshotState("Failure");
				if (GetCvar("Subtitles")) {
					HudMessage(s:"\c[Amy] Amy: \c[White] ...";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else {
				PlaySound(1001, "amy/goodresult", CHAN_BODY, 0.7);
				SetMugshotState("Grin");
				if (GetCvar("Subtitles")) {
					HudMessage(s:"\c[Amy] Amy: \c[White] Yay!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			Delay(35*7);
			break;
		case ClassicSonic:
			SetMusic("C_VICTOR");
			Print(s:"\c[Classic]SONIC \c[White]GOT THROUGH");
			SetFont("SMALLFONT");
			if (CurrentHealth < 21) {
				PlaySound(1001, "classic/badresult");
				SetMugshotState("Failure");
				if (GetCvar("Subtitles")) {
					HudMessage(s:"\c[Classic] Sonic: \c[White] Barely made it...";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else if (LevelTime > ParTime) {
				PlaySound(1001, "classic/okayresult");
				SetMugshotState("OK");
				if (GetCvar("Subtitles")) {
					HudMessage(s:"\c[Classic] Sonic: \c[White] Huh... no problem.";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else {
				PlaySound(1001, "classic/goodresult");
				SetMugshotState("Grin");
				if (GetCvar("Subtitles")) {
					HudMessage(s:"\c[Classic] Sonic: \c[White] *whistle* That was cool!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			Delay(35*6);
			break;
		case Shadow:
			SetMusic("D_VICTOR");
			if (KilledMonsters == TotalMonsters) {
				Print(s:"\c[Shadow]Mission Cleared");
				SetFont("SMALLFONT");
				PlaySound(1001, "shadow/goodresult");
				SetMugshotState("OK");
				if (GetCvar("Subtitles")) {
					HudMessage(s:"\c[Shadow] Shadow: \c[White] Yes!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			else {
				Print(s:"\c[Shadow]Mission Incomplete");
				SetFont("SMALLFONT");
				PlaySound(1001, "shadow/badresult");
				SetMugshotState("Failure");
				if (GetCvar("Subtitles")) {
					HudMessage(s:"\c[Shadow] Shadow: \c[White] Need to stay focused.";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				}
			}
			Delay(35*7);
			break;
		case -1:
		default:
			break;
	}
	Exit_Normal(0);
}

script "SonicN64" (void)
{
	AmbientSound("sonic/nintendo64", 127);
}

script "Drowning" ENTER
{
	int drowntimer;
	int maxdrown;
	maxdrown = 15;
	while (1) {
		if (GetActorProperty(1001, APROP_Waterlevel) == 3) {
			if (!CheckActorInventory(1001, "PowerSuper") && !CheckActorInventory(1001, "PowerHyper") && !CheckActorInventory(1001, "PowerInvulnerable")) {
				drowntimer++;
			}
			if (drowntimer > 4)
			{
				switch(PlayerClass(PlayerNumber())) {
					case Sonic:
						SetMusic("S_DROWN", 0);
						break;
					case Amy:
						SetMusic("A_DROWN", 0);
						break;
					case ClassicSonic:
						SetMusic("C_DROWN", 0);
						maxdrown = 16;
						break;
					case Shadow:
						SetMusic("D_DROWN", 0);
						break;
					default:
						break;
				}
			}
			if (drowntimer > maxdrown)
			{
				DamageActor(1001, AAPTR_PLAYER1, 0, 0, 9999, "Drownd");
				SetMusic("", 0);
				break;
			}
		}
		else {
			if (drowntimer > 4) {
				SetMusic("*");
			}
			drowntimer = 0;
		}
		Delay(35);
	}
}

script "ReactionTime" (void)
{
	AmbientSound("sglobal/reaction", 127);
}

script "BossMusic2" (void)
{
	SetMusic("B_SCRT2");
}

script "JumpHeight" (int Reset)
{
	if (Reset) {
		switch(PlayerClass(PlayerNumber())) {
			case Shadow:
				SetActorProperty(1001, APROP_JumpZ, 17.0);
				break;
			default:
				SetActorProperty(1001, APROP_JumpZ, 15.0);
				break;
		}
	} else {
		switch(PlayerClass(PlayerNumber())) {
            case Sonic:
				if (CheckInventory("PowerHyper")) {
					// Hyper Sonic
					SetActorProperty(1001, APROP_JumpZ, 20.0);
				} else {
					// Super Sonic
					SetActorProperty(1001, APROP_JumpZ, 17.0);
				}
                break;
            case Amy: // Dark Amy
				SetActorProperty(1001, APROP_JumpZ, 17.0);
                break;
            case ClassicSonic:
				if (CheckInventory("PowerHyper")) {
					// Classic Hyper Sonic
					SetActorProperty(1001, APROP_JumpZ, 20.0);
				} else {
					// Classic Super Sonic
					SetActorProperty(1001, APROP_JumpZ, 17.0);
				}
                break;
            case Shadow: // Shadow
				SetActorProperty(1001, APROP_JumpZ, 21.0);
                break;
            case -1:
            default:
                 break;
        }
	}
}


script "WallJump" (int height, int distance)
{
	if (GetCvar("WallJump")) {
		Delay(1);
		PlaySound(0, "sonic/walljump", CHAN_BODY);
		ThrustThing(GetActorAngle(0) >> 8, distance * -1, 1, 0);
		ThrustThingZ(0, height, 0, 0);
		if (GetCvar("WallJump") == 2) {
			SetActorAngle(0, GetActorAngle(0) + 0.5);
		}
	}
}


script "HowManyZFireLeft" (int clear)
{
	int RemainingShots = CheckInventory("ChaosEnergy") / 120;
	if (CheckInventory("PowerSuper")) {
		HudMessage(s:"\c[Purple]Infinite shots remaining"; HUDMSG_PLAIN, 2, CR_UNTRANSLATED, 0.5, 0.6, 0.3);
	} else {
		HudMessage(s:"\c[Amy]", d:RemainingShots, s:"/", d:8, s:" shots remaining"; HUDMSG_PLAIN, 2, CR_UNTRANSLATED, 0.5, 0.6, 0.3);
	}
}

script "Subtitles" (int subtitle)
{
	if (GetCvar("Subtitles")) {
		switch (subtitle) {
			case 1:
				HudMessage(s:"\c[Sonic] Sonic: \c[White] Well. That was lame.";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 2:
				HudMessage(s:"\c[Red] Knuckles: \c[White] Oh no.";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 3:
				HudMessage(s:"\c[Sonic] Sonic: \c[White] Ugh, thanks a lot, wall!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 4:
				HudMessage(s:"\c[Sonic] Sonic: \c[White] Ugh, this wall's in the way!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 5:
				HudMessage(s:"\c[Gold] Super Sonic: \c[White] Now I'll show you!!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 6:
				HudMessage(s:"\c[Purple] Dark Amy: \c[White] I'll destroy all of you!!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 7:
				HudMessage(s:"\c[Gold] Super Shadow: \c[White] Witness the might of my power!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 8:
				HudMessage(s:"\c[Gold] Super Sonic: \c[White] Let's blast through with sonic speed!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 9:
				HudMessage(s:"\c[Hyper] Hyper Sonic: \c[White] Now I'm serious!!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 10:
				HudMessage(s:"\c[Hyper] Hyper Sonic: \c[White] Okay, no more playing around!!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 11:
				HudMessage(s:"\c[Classic] Sonic: \c[White] You don't have enough memory in the memory card.";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 12:
				HudMessage(s:"\c[Classic] Sonic: \c[White] Catch me if you can!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 1.5, 1.0);
				break;
			case 13:
				HudMessage(s:"\c[Classic] Sonic: \c[White] Here we go!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 0.5, 1.0);
				break;
			case 14:
				HudMessage(s:"\c[Classic] Sonic: \c[White] Never underestimate Sonic Speed!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 15:
				HudMessage(s:"\c[Classic] Sonic: \c[White] TERIAAAAAAAA!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 16:
				HudMessage(s:"\c[Shadow] Shadow: \c[White] they cant troll you if there dead!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case 17:
				HudMessage(s:"\c[Shadow] Shadow: \c[White] That damn FOURTH Chaos Emerald!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.5, 1.0);
				break;
			case 18:
				HudMessage(s:"\c[Sonic] Sonic: \c[White] You're over!";
						   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.5, 1.0);
				break;
		}
	}
}

script "AmyBlockTint" enter
{
	while (true) {
		if (CheckInventory("PowerBlocking")) {
			FadeTo(192, 23, 112, 0.2, 0.0);
		}
		else {
			FadeTo(0, 0, 0, 0, 0.0);
		}
		Delay(1);
	}
}

script "LowHealthSound" enter
{
	while (true) {
		if (GetActorProperty(1001, APROP_Health) < 20 && GetCvar("LowHealthSound") && (ClassifyActor(1001) & ACTOR_ALIVE) && !(CheckInventory("PowerSuper")||CheckInventory("PowerHyper")||CheckInventory("PowerInvulnerable"))) {
			AmbientSound("sglobal/lowhealth", 127);
		}
		Delay(12);
	}
}

script "CheckIfCaliburn" (void)
{
	SetResultValue(!stricmp(GetWeapon(), "Caliburn"));
}


