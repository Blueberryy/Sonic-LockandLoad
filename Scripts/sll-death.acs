/* Visit sll-base.acs for information */

script "DeathMusic" (int xdeath)
{
	bool is_dead_or_game_over = ClassifyActor(0) & ACTOR_DEAD || GetLevelInfo(LEVELINFO_LEVELNUM) == 999;
	
	if (GetCvar("DeathMusic") && GetLevelInfo(LEVELINFO_LEVELNUM) != 69) {
		switch (PlayerClass(PlayerNumber())) {
			case Sonic:
				if (xdeath) SetMusic("S_DEADX", 0);
				else 		SetMusic("S_DEADM", 0);
				break;
				
			case Amy:
				SetMusic("A_DEADM", 0);
				break;
				
			case ClassicSonic:
				if (xdeath) SetMusic("C_DEADX", 0);
				else {
					SetMusic("C_DEADM", 0);
					Delay(9*35);
					if (is_dead_or_game_over) { SetMusic(""); }
				}
				break;
				
			case Shadow:
				if (xdeath) SetMusic("D_DEADX", 0);
				else {
					SetMusic("D_DEADM", 0);
					Delay(7*35);
					if (is_dead_or_game_over) { SetMusic(""); }
				}
				break;
				
			default:
				break;
		}
	}
}

function str DetermineRandomDeathMessage(void) {
	str message;
    switch (random(1, 7)) {
        case 1:
            message = "death_rmsg1";
            break;
        case 2:
            message = "death_rmsg2";
            break;
        case 3:
            message = "death_rmsg3";
            break;
        case 4:
            message = "death_rmsg4";
            break;
        case 5:
            message = "death_rmsg5";
            break;
        case 6:
            switch (PlayerClass(PlayerNumber())) {
				case 0:
					message = "death_rmsg6s";
					break;
				case 1:
					message = "death_rmsg6a";
					break;
				case 2:
					message = "death_rmsg6c";
					break;
				case 3:
					message = "death_rmsg6d";
					break;
			}
            break;
        case 7:
            message = "death_rmsg7";
            break;
    }
    return message;
}

script "DeathScreen" DEATH
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) == 69 || GetCvar("PermadeathMode") == true) {
		terminate;
	}
    FadeTo(0, 0, 0, 1.0, 0.3);
    Delay(10);
	if (ClassifyActor(0) & ACTOR_ALIVE) {
		FadeTo(0.0, 0.0, 0.0, 0.0, 0);
		terminate;
	}
    Delay(20);
	str message;
    if (GetActorProperty(0, APROP_Waterlevel) > 2) {
        message = "death_drown";
    }
    if (Timer() < 70) {
        message = "death_fast";
    }
    if (GameSkill() < 2) {
        message = "death_easy";
    }
    if (GameSkill() == 3) {
        message = "death_hard";
    }
    if (GameSkill() == 4) {
        message = "death_ohno";
    }
    if (CheckWeapon("DualRockets")) {
        message = "death_assm";
    }
    else {
        message = DetermineRandomDeathMessage();
    }
	if (ClassifyActor(0) & ACTOR_DEAD) {
		HudMessage(l:message; 0, 9, CR_WHITE, 0.5, 0.45, 0.0, 1.0);
		HudMessage(s:"Press \c[Gold]", k:"+use", s:"\c[White] to try again"; 0, 10, CR_WHITE, 0.5, 0.55, 0.0, 1.0);
	}
}

script "HandlePermadeath" DEATH
{
	if (GetCvar("PermadeathMode") == false) {
		terminate;
	}
	SetPlayerProperty(1, 1, PROP_TOTALLYFROZEN);
	SetMusic("");
	FadeTo(0, 0, 0, 1.0, 0.5);
	Delay(45);
	int level_flags = CHANGELEVEL_RESETHEALTH|CHANGELEVEL_RESETINVENTORY|CHANGELEVEL_NOINTERMISSION;
	ChangeLevel("SDFAIL", 0, level_flags, -1);
}

script "DidResurrect" RESPAWN
{
	SetMusic("*");
	ACS_NamedTerminate("DeathScreen", 0);
	HudMessage(s:""; 0, 9, CR_UNTRANSLATED, 0.0, 0.0, 0.0, 0.0);
	HudMessage(s:""; 0, 10, CR_UNTRANSLATED, 0.0, 0.0, 0.0, 0.0);
    FadeTo(0.0, 0.0, 0.0, 0.0, 0);
	if (GetCvar("Subtitles")) {
		switch (PlayerClass(PlayerNumber())) {
			case Sonic:
				HudMessage(s:"\c[Sonic] Sonic: \c[Grey] (Never happened.)";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case Amy:
				HudMessage(s:"\c[Amy] Amy: \c[Grey] (Huh? I'm still alive?)";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case ClassicSonic:
				HudMessage(s:"\c[Classic] Sonic: \c[Grey] (Cutting it too close...)";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			case Shadow:
				HudMessage(s:"\c[Shadow] Shadow: \c[Grey] (Time to stop being so careless...)";
							   HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
				break;
			default:
				break;
		}
	}
}