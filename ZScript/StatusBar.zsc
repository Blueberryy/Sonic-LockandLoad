enum RingCountStates
{
	RC_SHOW = 0,
	RC_REPLACE = 1,
	RC_HIDE = 2,
};

class SLL_StatusBar : BaseStatusBar
{
	HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mAmountFont;
	InventoryBarState diparms;

	override void Init()
	{
		Super.Init();
		SetSize(0, 320, 200);

		// Create the font used for the fullscreen HUD
		Font fnt = "HUDFONT_DOOM";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_DOOM";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);
		mAmountFont = HUDFont.Create("INDEXFONT");
		diparms = InventoryBarState.Create();
	}
	
	Inventory GetInventory(class<Inventory> item)
	{
		return CPlayer.mo.FindInventory(item);
	}

	override void Draw(int state, double TicFrac)
	{
		Super.Draw (state, TicFrac);

		if (state == HUD_StatusBar) {
			BeginStatusBar();
			switch (cvar.FindCvar("HUDType").GetInt()) {
				case 0: // Unified
					DrawUnifiedHUD(TicFrac);
					break;
				case 1: // Classic-Style
					DrawClassicStyleHUD(TicFrac);
					break;
				case 2: // Legacy
					DrawLegacyEditionHUD(TicFrac);
					break;
			}
		}
		if (state == HUD_Fullscreen) {
			BeginHUD();
			DrawFullScreenHUD();
		}
		
		if (cvar.FindCvar("ShowScore").GetBool()) {
			switch (state) {
				case HUD_StatusBar:
					DrawScore(HUDFont.Create("BIGFONT"), (470, -98));
					break;
				case HUD_Fullscreen:
					DrawScore(HUDFont.Create("BIGFONT"), (-10, 18));
					break;
			}
		}
	}

	
	protected void DisplayUnifiedHUD(Vector2 hud_position)
	{
		if (GetInventory("PowerHyper")) {
			DrawImage("hyp_hud", hud_position);
		}
		else if (GetInventory("PowerSuper")) {
			if (GetInventory("AmyCheck")) {
				DrawImage("drk_hud", hud_position);
			}
			else {
				DrawImage("sup_hud", hud_position);
			}
		}
		else {
			if (GetInventory("SonicCheck")) 	{ DrawImage("snc_hud", hud_position); }
			if (GetInventory("AmyCheck")) 		{ DrawImage("amy_hud", hud_position); }
			if (GetInventory("ClassicCheck")) 	{ DrawImage("csn_hud", hud_position); }
			if (GetInventory("ShadowCheck")) 	{ DrawImage("sha_hud", hud_position); }
		}
	}
	
	protected void DrawBarKeys(int base_x, int base_y, int spacing)
	{
		// Taken from DoomStatusBar and adapted because I'm lazy
		bool locks[6];
		String image;
		
		for (int i = 0; i < 6; i++) {
			locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);
		}
		
		if (locks[1] && locks[4]) image = "STKEYS6";
		else if (locks[1]) image = "STKEYS0";
		else if (locks[4]) image = "STKEYS3";
		DrawImage(image, (base_x, base_y - spacing), DI_ITEM_OFFSETS);
		
		if (locks[2] && locks[5]) image = "STKEYS7";
		else if (locks[2]) image = "STKEYS1";
		else if (locks[5]) image = "STKEYS4";
		else image = "";
		DrawImage(image, (base_x, base_y), DI_ITEM_OFFSETS);
		
		if (locks[0] && locks[3]) image = "STKEYS8";
		else if (locks[0]) image = "STKEYS2";
		else if (locks[3]) image = "STKEYS5";
		else image = "";
		DrawImage(image, (base_x, base_y + spacing), DI_ITEM_OFFSETS);
	}
	
	protected void DrawRingsAndEnergy(HUDFont fnt, Vector2 rings_position, Vector2 energy_position, int ringcount = RC_SHOW, String rings_colour = "Gold", String energy_colour = "Green")
	{
		bool is_transformed = GetInventory("PowerSuper") || GetInventory("PowerHyper");
		int energy = GetInventory("ChaosEnergy").Amount;
		int flags = DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW;
		
		if (ringcount == RC_SHOW || !is_transformed) {
			if (CPlayer.health <= 0) {
				rings_colour = "Red";
			}
			else if (CPlayer.health <= 20) {
				if ((level.time / (35 / 7)) % 2 == 0) {
					rings_colour = "Red";
				}
			}
			DrawString(fnt, String.Format("%03d", CPlayer.health), rings_position, flags, Font.FindFontColor(rings_colour));
		}
		
		if (GetInventory("PowerSuper") && cvar.FindCvar("HUDType").GetInt() != 1) {
			if (GetInventory("AmyCheck")) energy_colour = "Purple";
			else energy_colour = "Gold";
		}
		else {
			if (GetInventory("PowerHyper")) energy_colour = "White";
			else {
				if (energy < 1) energy_colour = "Red";
			}
		}
		
		if (is_transformed && ringcount == RC_REPLACE) {
			energy_position = rings_position;
		}
		
		DrawString(fnt, String.Format("%03d", energy), energy_position, flags, Font.FindFontColor(energy_colour));
	}

	protected int GetTimeColour(bool include_super = true)
	{
		Name time_colour;
		
		if (GetInventory("SonicCheck")) 	{ time_colour = "Sonic"; }
		if (GetInventory("AmyCheck")) 		{ time_colour = "Amy"; }
		if (GetInventory("ClassicCheck")) 	{ time_colour = "Classic"; }
		if (GetInventory("ShadowCheck")) 	{ time_colour = "Shadow"; }
		
		if (include_super) {
			if (GetInventory("PowerHyper")) { time_colour = "White"; }
			if (GetInventory("PowerSuper")) {
				time_colour = "Gold";
				if (GetInventory("AmyCheck")) { time_colour = "Purple"; }
			}
		}
		
		return Font.FindFontColor(time_colour);
	}
	
	protected String GetTimeDisplay()
	{
		int overall_seconds = level.time / 35;
		int seconds = overall_seconds % 60;
		int minutes = (overall_seconds / 60) % 60;
		int hours = overall_seconds / 3600;

		return String.Format("%02d:%02d:%02d", hours, minutes, seconds);
	}

	protected void DisplayHead(Vector2 head_position, bool show_emeralds = false)
	{
		Vector2 emeralds_position = (head_position.x + 20, head_position.y + 57);
		
		if (GetInventory("ChaosEmeralds") && show_emeralds) 
			DrawImage("em_back", emeralds_position, DI_ITEM_OFFSETS);
			
		DrawTexture(GetMugShot(1), head_position, DI_ITEM_OFFSETS);
		
		if (GetInventory("ChaosEmeralds") && show_emeralds)
			DrawImage("em_front", emeralds_position, DI_ITEM_OFFSETS);
	}
	
	protected void DisplayLabels(Vector2 position, HUDFont fnt)
	{
		DrawString(fnt, "Time", position, 0, GetTimeColour(false));
		position.y += 18;
		DrawString(fnt, "Rings", position, 0, Font.FindFontColor("Gold"));
		position.y += 18;
		DrawString(fnt, "Energy", position, 0, Font.FindFontColor("Green"));
	}

	protected void DrawUnifiedHUD(double TicFrac)
	{
		DisplayUnifiedHUD((32, 156));
		DrawString(HUDFont.Create("BIGFONT"), GetTimeDisplay(), (43, 146), 0, GetTimeColour());
		DisplayHead((-46, 117), true);
		DrawBarKeys(120, 147, 10);
		DrawRingsAndEnergy(HUDFont.Create("BIGFONT"), (31, 123), (90, 123), RC_REPLACE);
	}
	
	protected void DrawClassicStyleHUD(double TicFrac)
	{
		HUDFont fnt = HUDFont.Create("BIGFONT");
		int base_x = -130;
		int base_y = -60;
		int gap = 175;
		DisplayLabels((base_x, base_y), fnt);
		DrawString(fnt, GetTimeDisplay(), (base_x + gap, base_y), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, Font.FindFontColor("White"));
		DrawRingsAndEnergy(fnt, (base_x + gap, base_y + 18), (base_x + gap, base_y + 36), false, "White", "White");
		DisplayHead((base_x, 143));
		DrawBarKeys(65, base_y + 20, 18);
	}

	protected void DrawLegacyEditionHUD(double TicFrac)
	{
		int base_x = 145;
		int base_y = 180;
		int label_y = base_y + 11;
		DisplayHead((base_x, base_y - 15));
		DrawBarKeys(240, 182, 8);
		if (GetInventory("ChaosEmeralds")) {
			DrawImage("em_smol", (56, base_y + 15));
		}
		DrawRingsAndEnergy(HUDFont.Create("HUDFONT_DOOM"), (base_x - 10, base_y - 6), (base_x + 85, base_y - 6), false);
		DrawString(HUDFont.Create("SMALLFONT"), "RINGS", (base_x - 30, label_y), DI_TEXT_ALIGN_CENTER, Font.FindFontColor("Gold"));
		string energy_colour = "Green";
		string energy_text	 = "ENERGY";
		if (GetInventory("PowerSuper")) {
			energy_colour = "Gold";
			energy_text   = "SUPER";
		}
		DrawString(HUDFont.Create("SMALLFONT"), energy_text, (base_x + 65, label_y), DI_TEXT_ALIGN_CENTER, Font.FindFontColor(energy_colour));
	}
	
	protected void DrawFullScreenHUD()
	{
		HUDFont fnt = HUDFont.Create("HUDFONT_DOOM");
		DisplayHead((3, -35));
		DrawString(HUDFont.Create("BIGFONT"), GetTimeDisplay(), (-10, 2), DI_TEXT_ALIGN_RIGHT, GetTimeColour());
		if (GetInventory("ChaosEmeralds")) {
			DrawImage("em_smol", (-95, -4));
		}
		DrawBarKeys(-60, -17, 8);
		DrawRingsAndEnergy(fnt, (79, -22), (-5, -22), RC_HIDE);
	}
	
	protected void DrawScore(HUDFont fnt, Vector2 position)
	{
		/* Target score */
		int targetscore;
		let skill_level = G_SkillPropertyInt(SKILLP_ACSReturn);
		targetscore += Level.Total_Monsters * 90;
		if (skill_level >= 4) targetscore *= 1.5;
		
		/* Current score */
		int score;
		if (CPlayer.health > 300) {
			score += 600 + (CPlayer.health - 300);
		}
		else {
			score += CPlayer.health * 2;
		}
		score += Level.Killed_Monsters * 95;
		if (score < 0) score = 0;
		
		/* Decide colour */
		int score_colour = GetTimeColour(false);
		if (score >= targetscore) score_colour = Font.FindFontColor("Gold");
		
		/* Display it */
		DrawString(fnt, String.Format("%d", score), position, DI_TEXT_ALIGN_RIGHT, score_colour);
	}
}
