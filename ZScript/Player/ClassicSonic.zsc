class ClassicSonicPlayer : LockLoadPlayer
{
	Default
	{
		Health 125;
		DamageFactor "RocketStream", 0.2;
		Player.DisplayName "$classic";
		Player.SoundClass "classic";
		Player.Face "CLF";
		Player.StartItem "ClassicAbilities";
		Player.StartItem "ChaosBlaster";
		Player.StartItem "ChaosEnergy", 150;
		Player.StartItem "ClassicCheck";
		Player.StartItem "SonicThok";
		Player.StartItem "SpinAttack";
		Player.WeaponSlot 1, "ClassicAbilities";
		Player.WeaponSlot 2, "ChaosBlaster";
		Player.WeaponSlot 3, "SpeedyShotgun";
		Player.WeaponSlot 4, "ChaosRain";
		Player.WeaponSlot 5, "ClassicRocketStream";
	}
	override void Tick()
	{
		if (CountInv("PowerHyper") > 0) {
			A_SetSpeed(12);
			ACS_NamedExecute("JumpHeight");
		}
		else if (CountInv("PowerSuper") > 0) {
			A_SetSpeed(8);
			ACS_NamedExecute("JumpHeight");
		}
		else {
			A_SetSpeed(4);
			ACS_NamedExecute("JumpHeight", 0, 1);
		}
		Super.Tick();
	}
	States
	{
		Pain:
			TNT1 A 0 A_PlaySound("sglobal/loserings", 6);
			TNT1 A 0 { if (random(1, 4) == 4) { A_PlaySound("classic/pain", 7); } }
			PLAY G 4;
			PLAY G 4;
			Goto Spawn;
		Death:
			TNT1 A 0
			{
				if (random(1,5) == 4) {
					ACS_NamedExecute("Subtitles", 0, 11);
					A_PlaySound("classic/memorycard");
				} else {
					A_PlaySound("classic/death");
				}
			}
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_JumpIf(!GetCvar("DeathMusic"), "OhNo");
			TNT1 A 0 A_PlaySound("classic/ohno");
			TNT1 A 0 A_Log("NO WAY? NO WAY!");
			TNT1 A 0 { if (GetCvar("DeathMusic")) { ACS_NamedExecute("DeathMusic", 0, 1); } }
			PLAY O 5;
			PLAY P 5;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
		OhNo:
			TNT1 A 0 A_Log("OH NO");
			TNT1 A 0 A_PlaySound("classic/ohno");
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
	}
}

class ClassicAbilities : LockLoadWeapon replaces Fist
{
	int SpinCharges;
	int ShweeDelay;
	int HoverCounter;
	Default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 10;
		Tag "Sonic the Hedgehog";
		+Weapon.MELEEWeapon
		+Weapon.NOAUTOFIRE
	}
	action void SetHeight(int height)
	{
		A_SetSize(-1, height);
		Player.ViewHeight = height;
	}
	States
	{
		Ready:
			TNT1 A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			TNT1 A 1 A_Lower(100);
			Loop;
		Select:
			TNT1 A 1 A_Raise(100);
			Loop;
		Fire:
			TNT1 A 0 {
				invoker.SpinCharges = 0;
				int buttons = GetPlayerInput(MODINPUT_BUTTONS);
				if (A_CheckFloor("Null")) {
					invoker.ShweeDelay = 10;
					return ResolveState("SpinCharge");
				}
                if (!A_CheckFloor("Null") && waterlevel < 1) {
                    invoker.ShweeDelay = 10;
                    return ResolveState("DropCharge");
                }
				return ResolveState(null);
			}
			Goto Ready;
		AltFire:
			TNT1 A 0 {
				int buttons = GetPlayerInput(MODINPUT_BUTTONS);
				if ((CountInv("PowerSuper") || CountInv("PowerHyper")) && !A_CheckFloor("Null") && (buttons & BT_ALTATTACK)) {
					invoker.HoverCounter = 1;
					return ResolveState("Hover");
				}
				if (!GetCvar("IsSpinDashing") && !(buttons & BT_CROUCH) && A_CheckFloor("Null")) {
					if (random[HereWeGo](1, 2) == 1) {
						int driftline = random(1, 4);
						ACS_NamedExecute("Subtitles", 0, 11 + driftline);
						switch (driftline) {
							case 1:
								A_PlaySound("classic/ifyoucan", 7);
								break;
							case 2:
								A_PlaySound("classic/herego", 7);
								break;
							case 3:
								A_PlaySound("classic/underestimate", 7);
								break;
							case 4:
								A_PlaySound("classic/teria", 7);
								break;
						}
					}
					return ResolveState("Drift");
				}
				return ResolveState(null);
			}
			Goto Ready;
		Drift:
			TNT1 A 0 {
				A_ClearOverlays(0, 0);
				A_PlaySound("sWeapons/drift", 5);
				if (A_CheckFloor("Drift")) {
					A_ChangeVelocity(10, 0, 0, CVF_Relative);
				} else {
					A_ChangeVelocity(2, 0, 0, CVF_Relative);
				}
			}
			TNT1 A 0 {
				if (!CountInv("PowerSuper") && !CountInv("PowerHyper") && A_CheckFloor("Null")) {
					A_GiveInventory("ChaosEnergy");
				}
			}
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "SuperDrift");
			TNT1 A 0 A_JumpIf(CountInv("PowerHyper"), "HyperDrift");
			SPIN A 1 {
				if (CountInv("PowerHyper")) {
					A_SetSpeed(12);
					A_CustomPunch(8, false, 0, "SonicPunchPuff", 86, 0, 0, "ArmorBonus", "sWeapons/finalhit");
				} else {
					A_SetSpeed(4);
					A_CustomPunch(2, false, 0, "SonicPunchPuff", 64, 0, 0, "ArmorBonus", "sWeapons/finalhit");
				}
			}
			TNT1 A 0 A_ReFire("Drift");
			TNT1 A 0 A_StopSound(5);
			TNT1 A 0 A_Light(0);
			Goto Ready;
		SuperDrift:
			SSPN A 1 {
				A_SetSpeed(8);
				A_CustomPunch(4, false, 0, "SonicPunchPuff", 86, 0, 0, "ArmorBonus", "sWeapons/finalhit");
			}
			Goto Drift+5;
		HyperDrift:
			HSPN A 1 {
				A_SetSpeed(8);
				A_CustomPunch(4, false, 0, "SonicPunchPuff", 86, 0, 0, "ArmorBonus", "sWeapons/finalhit");
			}
			Goto Drift+5;
		SpinCharge:
			TNT1 A 1 {
				int buttons = GetPlayerInput(MODINPUT_BUTTONS);
				int maxSpinCharges = 70;
				player.crouching = 1;
				SetHeight(22);
				A_Light(3);
				A_Stop();
				A_OverlayFlags(9, PSPF_ADDWeapon, true);
				if (CountInv("PowerHyper")) {
					A_Overlay(9, "HyperSpinAnim", true);
				}
                else if (CountInv("PowerSuper")) {
					A_Overlay(9, "SuperSpinAnim", true);
				}
                else {
					A_Overlay(9, "SpinAnim", true);
				}
				if (invoker.SpinCharges > maxSpinCharges) { invoker.SpinCharges = maxSpinCharges; }
				if (invoker.SpinCharges < 1 || invoker.SpinCharges % invoker.ShweeDelay == 0 && invoker.SpinCharges < maxSpinCharges) {
					A_PlaySound("sWeapons/peelout", 5);
				}
				invoker.SpinCharges++;
				if (!(buttons & BT_ATTACK) || !A_CheckFloor("Null")) {
					SetHeight(42);
					A_ClearOverlays(0, 0);
					A_Light(0);
					return ResolveState("Ready");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_SetSpeed(0.1);
			TNT1 A 1 A_ReFire("SpinCharge");
			TNT1 A 0 {
				A_ClearOverlays(0, 0);
				A_Light(0);
				A_SetSpeed(4);
				SetHeight(22);
				if (invoker.SpinCharges < 30) invoker.SpinCharges = 30;
				A_PlaySound("sWeapons/peeloutrelease", 5);
			}
            Goto SpinDash;
		DropCharge:
			TNT1 A 1 {
				A_OverlayFlags(9, PSPF_ADDWeapon, true);
				if (invoker.SpinCharges >= 10) {
					A_Light(3);
					if (CountInv("PowerHyper")) {
						A_Overlay(9, "HyperSpinAnim", true);
					}
					else if (CountInv("PowerSuper")) {
						A_Overlay(9, "SuperSpinAnim", true);
					}
					else {
						A_Overlay(9, "SpinAnim", true);
					}
				}
				if (invoker.SpinCharges > 30) { invoker.SpinCharges = 30; }
				if (invoker.SpinCharges == 10) {
					A_PlaySound("sWeapons/dropdash", 5);
				}
				invoker.SpinCharges++;
                if (A_CheckFloor("Null") || waterlevel > 1) {
                    A_ClearOverlays(0, 0);
                    A_Light(0);
                    if (invoker.SpinCharges >= 10) {
						A_SetSpeed(4);
						SetHeight(22);
						if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
							A_PlaySound("sWeapons/superdropdash", 5);
							A_QuakeEx(3, 3, 3, 30, 800, 100, "", QF_SCALEDOWN);
						}
						else {
							A_PlaySound("sWeapons/peeloutrelease", 5);
						}
						invoker.SpinCharges += 10;
						return ResolveState("SpinDash");
					}
					else {
						return ResolveState("Ready");
					}
                }
                return ResolveState(null);
			}
			TNT1 A 0 A_SetSpeed(0.1);
			TNT1 A 1 A_ReFire("DropCharge");
			TNT1 A 0 {
                A_ClearOverlays(0, 0);
				A_Light(0);
                invoker.SpinCharges = 0;
				return ResolveState(null);
			}
            Goto Ready;
		SpinDash:
			TNT1 A 1 {
				SetHeight(22);
                cvar.FindCvar("IsSpinDashing").SetBool(true);
				A_ChangeVelocity(invoker.SpinCharges * 2, 0, Vel.Z, CVF_Relative|CVF_Replace);
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP && A_CheckFloor("Null")) {
					A_ChangeVelocity(0, 0, invoker.SpinCharges / 5);
				}
				A_CustomPunch(invoker.SpinCharges * 2, false, CPF_NOTURN, "SonicPunchPuff", 128, 0, 0, "ArmorBonus", "sWeapons/finalhit");
			}
			TNT1 A 0 { 
				SetHeight(42);
                cvar.FindCvar("IsSpinDashing").SetBool(false);
				int speed = sqrt(Vel.X ** 2 + Vel.Y ** 2);
				if (invoker.SpinCharges / 2 && A_CheckFloor("Null") && speed > 20) {
					if (GetPlayerInput(MODINPUT_FORWARDMOVE) < 0) {
						invoker.SpinCharges -= 2;
					}
					else {
						invoker.SpinCharges--;
					}
					return ResolveState("SpinDash");
				}
				invoker.SpinCharges = 0;
				return ResolveState(null);
			}
			Goto Ready;
		Hover:
			TNT1 A 1 {
				A_ChangeVelocity(Vel.X, Vel.Y, 0, CVF_Replace);
				A_SetGravity(0);
				invoker.HoverCounter++;
				if (invoker.HoverCounter > 75) {
					return A_Jump(256, "HoverEnd");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire("Hover");
			Goto Ready;
		HoverEnd:
			TNT1 A 0 A_SetGravity(1);
			Goto Ready;
		SpinAnim:
			SPIN ABCDEFEDCB 1;
			Loop;
		SuperSpinAnim:
			SSPN ABCDEFEDCB 1;
			Loop;
		HyperSpinAnim:
			HSPN ABCDEFEDCB 1;
			Loop;
	}
}

class ChaosBlaster : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 2;
		Weapon.AmmoGive 25;
		Weapon.KickBack 100;
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Chaos Blaster";
		Inventory.PickupMessage "You got the Chaos Blaster!";
	}
	States
	{
		Ready:
			PLSG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			#### # 1 A_Lower(10);
			Loop;
		Select:
			PLSG A 1 A_Raise(10);
			Loop;
		Fire:
			PLSG A 1 A_FireProjectile("MinorChaosEnergyBall");
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicThok");
			Goto Ready;
		Flash:
			PLSF A 4 Bright A_Light1;
			Goto LightDone;
			PLSF B 4 Bright A_Light1;
			Goto LightDone;
		Spawn:
			PLAS A -1;
			Stop;
	}
}
class SpeedyShotgun : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse1 12;
		Weapon.AmmoUse2 8;
		Weapon.AmmoGive 32;
		Weapon.KickBack 500;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		AttackSound "Weapons/shotgf";
		Tag "Speedy Shotgun";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "You got the Speedy Shotgun!";
	}
	States
	{
		Ready:
			SHTG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			#### # 1 A_Lower(10);
			Loop;
		Select:
			SHTG A 1 A_Raise(10);
			Loop;
		Fire:
			SHTG A 5
			{
				A_FireBullets(5.6, 0, 7, 5, "BulletPuff");
				A_PlaySound("Weapons/shotgf", 1);
				if (CountInv("PowerHyper") > 0) {
					A_GunFlash("HyperFlash");
				} else {
					A_GunFlash();
				}
				if (CountInv("PowerHyper") > 0) { A_ReFire(); }
			}
			Goto Ready;
		AltFire:
			TNT1 A 0 A_JumpIf(CountInv("PowerHyper"), "HyperFire");
			SHTG AA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SHTG A 1
			{
				A_GunFlash("QuickFlash");
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets(8, 3, 10, 4, "BulletPuff");
			}
			SHTG AA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SHTG A 1
			{
				A_GunFlash("QuickFlash");
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (5, 2, 10, 5, "BulletPuff");
			}
			SHTG AA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SHTG A 1
			{
				A_GunFlash("QuickFlash");
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (3, 1, 10, 6, "BulletPuff");
			}
			SHTG AA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SHTG A 1
			{
				A_GunFlash("QuickFlash");
				A_ChangeVelocity(Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (1, 0, 10, 7, "BulletPuff");
			}
			SHTG AA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SHTG A 1
			{
				A_GunFlash("QuickFlash");
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (0, 0, 10, 8, "BulletPuff");
			}
			SHTG A 1 A_GunFlash();
			SHTG AAAAAABBBBBCCCCCDDDDCCCCCBBBBBAAAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		HyperFire:
			SHTG A 1
			{
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (8, 3, 10, 4, "BulletPuff");
				A_GunFlash("HyperFlash");
			}
			SHTG A 1
			{
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (5, 2, 10, 5, "BulletPuff");
				A_GunFlash("HyperFlash");
			}
			SHTG A 1
			{
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (3, 1, 10, 6, "BulletPuff");
				A_GunFlash("HyperFlash");
			}
			SHTG A 1
			{
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (1, 0, 10, 7, "BulletPuff");
				A_GunFlash("HyperFlash");
			}
			SHTG A 1
			{
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (0, 0, 10, 8, "BulletPuff");
				A_GunFlash("HyperFlash");
				A_ReFire();
			}
			SHTG BC 3;
			SHTG D 2;
			SHTG CB 3;
			SHTG A 1;
			SHTG A 5 A_ReFire();
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicThok");
			Goto Ready;
		Flash:
			SHTF A 4 Bright A_Light1;
			SHTF B 3 Bright A_Light2;
			Goto LightDone;
		QuickFlash:
			SHTF A 1 Bright A_Light1;
			SHTF B 1 Bright A_Light2;
			Goto LightDone;
		HyperFlash:
			TNT1 A 0 A_JumpIf(random(1, 2) > 1, "HFlash2");
		HFlash1:
			SHTF A 1 Bright A_Light1;
			Goto LightDone;
		HFlash2:
			SHTF B 1 Bright A_Light1;
			Goto LightDone;
		Spawn:
			SHOT A -1;
			Stop;
	}
}

class ClassicRocketStream : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 2500;
		Weapon.AmmoUse 15;
		Weapon.AmmoGive 45;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Rocket Stream";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "You got the Rocket Stream!";
	}
	States
	{
		Ready:
			MISG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			#### # 1 A_Lower(10);
			Loop;
		Select:
			MISG A 1 A_Raise(10);
			Loop;
		Fire:
			MISG B 1 A_GunFlash();
			MISG A 1 A_FireProjectile("StreamRocket");
			Goto Ready;
		Flash:
			MISF A 3 Bright A_Light1;
			MISF B 4 Bright;
			MISF CD 4 Bright A_Light2;
			Goto LightDone;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicThok");
			Goto Ready;
		Spawn:
			LAUN A -1;
			Stop;
	}
}

class ChaosRain : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 700;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Chaos Rain";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "You got the Chaos Rain!";
	}
	States
	{
		Ready:
			CHGG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			#### # 1 A_Lower(10);
			Loop;
		Select:
			CHGG A 1 A_Raise(10);
			Loop;
		Fire:
			CHGG A 1 
			{
				if (CountInv("PowerSuper") > 0) {
					A_PlaySound("Weapons/shotgf", 1);
					A_GunFlash();
					A_FireBullets(4, 2, 5, 10, "BulletPuff");
				}
				else if (CountInv("PowerHyper") > 0) {
					A_PlaySound("Weapons/shotgf", 1);
					A_GunFlash();
					A_FireBullets(6, 4, 15, 30, "BulletPuff");
				}
				else {
					A_PlaySound("Weapons/chngun", 1);
					A_GunFlash();
					A_FireBullets(2, 0, 1, 5, "BulletPuff");
				}
			}
			CHGG B 1 
			{
				if (CountInv("PowerSuper") > 0) {
					A_PlaySound("Weapons/shotgf", CHAN_Weapon);
					A_GunFlash();
					A_FireBullets(4, 2, 5, 10, "BulletPuff");
				}
				else if (CountInv("PowerHyper") > 0) {
					A_PlaySound("Weapons/shotgf", CHAN_Weapon);
					A_GunFlash();
					A_FireBullets(6, 4, 15, 30, "BulletPuff");
				}
				
				else {
					A_PlaySound("Weapons/chngun", CHAN_Weapon);
					A_GunFlash();
					A_FireBullets(2, 0, 1, 5, "BulletPuff");
				}
			}
			CHGG B 0 A_ReFire();
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicThok");
			Goto Ready;
		Spawn:
			MGUN A -1;
			Stop;
	}
}

class SpinAttack : CustomInventory
{
	int inuse;
	action void SetHeight(int height)
	{
		A_SetSize(-1, height);
		Player.ViewHeight = height;
	}
	action void DoSpinAttack()
	{
		int forward = GetPlayerInput(MODINPUT_FORWARDMOVE);
		int sidem = GetPlayerInput(MODINPUT_SIDEMOVE);
		A_Light(0);
		if (A_CheckFloor("Null")) {
			if (forward > 0 || sidem > 0 || forward < 0 || sidem < 0) {
				A_CustomPunch(80, false, CPF_NOTURN, "SonicPunchPuff", 256, 0, 0, "ArmorBonus", "sweapons/finalhit");
				SetHeight(21);
				A_ChangeVelocity(Cos(Pitch) * forward / 200, sidem / -200, 0, CVF_Relative|CVF_Replace);
			}
			else {
				A_CustomPunch(80, false, CPF_NOTURN, "SonicPunchPuff", 128, 0, 0, "ArmorBonus", "sweapons/finalhit");
				A_ChangeVelocity(Cos(Pitch) * 30, 0, 0, CVF_Relative|CVF_Replace);
			}
		}
		else {
			A_CustomPunch(80, false, CPF_NOTURN, "SonicPunchPuff", 196, 0, 0, "ArmorBonus", "sweapons/finalhit");
			A_ChangeVelocity(0, 0, 5);
		}
	}
	States
	{
		Use:
			TNT1 A 0 A_Overlay(-2, "StartAttack");
			TNT1 A 0 A_OverlayOffset(-2, 0, 32);
			Fail;
		StartAttack:
			TNT1 A 0 {
				if (A_CheckFloor("Null")) {
					A_StartSound("sweapons/spin", 8);
				}
				else {
					A_StartSound("sweapons/instashield", 8);
					A_GiveInventory("InstaShield");
				}
				A_Light(3);
				A_OverlayOffset(9, 0, 128);
				if (CountInv("PowerHyper")) {
					return ResolveState("HyperAttack");
				}
				else if (CountInv("PowerSuper")) {
					return ResolveState("SuperAttack");
				}
				else {
					return ResolveState("Attack");
				}
				return ResolveState(null);
			}
			Stop;
		Attack:
			SPIN A 1 DoSpinAttack();
			SPIN BCDEFEDCB 1;
			Goto EndAttack;
		SuperAttack:
			SSPN A 1 DoSpinAttack();
			SSPN BCDEFEDCB 1;
			Goto EndAttack;
		HyperAttack:
			HSPN A 1 DoSpinAttack();
			HSPN BCDEFEDCB 1;
			Goto EndAttack;
		EndAttack:
			TNT1 A 10 SetHeight(42);
			Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_RELOAD && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_RELOAD) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 30;
		}
	}
}

class SonicThok : CustomInventory
{
	int inuse;
	int counter;
	override void Tick()
	{
		if (owner.A_CheckFloor("Null")) {
			counter = 0;
		}
		Super.Tick();
	}
	States
	{
	Use:
		TNT1 A 0 A_Overlay(-2, "CountCheck");
		TNT1 A 0 A_OverlayOffset(-2, 0, 32);
		Fail;
	CountCheck:
		TNT1 A 0 {
			invoker.counter++;
			return A_JumpIf(invoker.counter <= 1 || CountInv("PowerSuper") || CountInv("PowerHyper"), "Thok");
		}
		Stop;
	Thok:
		TNT1 A 5
		{
			int forward = GetPlayerInput(MODINPUT_FORWARDMOVE);
			int sidem = GetPlayerInput(MODINPUT_SIDEMOVE);
			int input = 0;
			
			A_StartSound("classic/dash", 6);
			
			if (forward > 0) {
				if (!A_CheckFloor("Null")) {
					A_ChangeVelocity(80, 0, 0, CVF_Relative);
				}
				else {
					A_ChangeVelocity(50, 0, 0, CVF_Relative);
				}
				input = 1;
			}
			
			if (sidem < 0) {
				A_ChangeVelocity(0, 50, 0, CVF_Relative);
				A_StartSound("classic/homing", 7, 0, 0.75);
				input = 1;
			}
			
			if (sidem > 0) {
				A_ChangeVelocity(0, -50, 0, CVF_Relative);
				A_StartSound("classic/homing", 7, 0, 0.75);
				input = 1;
			}
			
			if (forward < 0) {
				A_ChangeVelocity(-50, 0, 0, CVF_Relative);
				A_StartSound("classic/homing", 7, 0, 0.75);
				input = 1;
			}
			
			if (!input) {
				if (CountInv("PowerSuper") || CountInv("PowerHyper")) {
					return ResolveState("Boost");
				}
				A_ChangeVelocity(50, 0, 0, CVF_Relative);
			}
			return ResolveState(null);
		}
		Stop;
	Boost:
		TNT1 A 0 {
			A_AlertMonsters();
			A_StartSound("sweapons/boost", 6);
			A_StartSound("classic/go", 8);
		}
		TNT1 A 0 A_JumpIf(CountInv("PowerHyper"), "HyperBoost");
		BOOS B 15 Bright {
			A_Light(10);
			A_FireBullets(25, 25, 100, 200, "SonicDashPuff", FBF_NOPITCH);
			A_TakeInventory("ChaosEnergy", 25);
			A_ChangeVelocity(200, 0, 0, CVF_Relative|CVF_Replace);
		}
		TNT1 A 0 { A_Light(0); }
		Stop;
	HyperBoost:
		BOOS C 15 Bright {
			A_Light(10);
			A_FireBullets(50, 50, 200, 200, "SonicDashPuff", FBF_NOPITCH);
			A_ChangeVelocity(400, 0, 0, CVF_Relative|CVF_Replace);
		}
		TNT1 A 0 { A_Light(0); }
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_ZOOM && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_ZOOM) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 30;
		}
	}
}
