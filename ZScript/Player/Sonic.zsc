class SonicPlayer : LockLoadPlayer 
{
	bool reticleActive;
	Default
	{
		Health 125;
		Player.DisplayName "$sonic";
		Player.Face "SNF";
		Player.SoundClass "sonic";
		Player.StartItem "AcceleratedPistol";
		Player.StartItem "Caliburn";
		Player.StartItem "SonicCheck";
		Player.StartItem "SonicKick";
		Player.StartItem "HomingSnapQuickStep";
		Player.StartItem "ChaosEnergy", 100;
		Player.WeaponSlot 1, "Caliburn";
		Player.WeaponSlot 2, "AcceleratedPistol";
		Player.WeaponSlot 3, "RapidShotty";
		Player.WeaponSlot 4, "ShurikenCrossbow";
		Player.WeaponSlot 5, "EclipseBlaster";
		Player.WeaponSlot 6, "AirStrikeLauncher";
	}
	override void Tick()
	{
		if (CountInv("PowerHyper")) {
			A_SetSpeed(16);
			ACS_NamedExecute("JumpHeight");
		} 
		else if (CountInv("PowerSuper")) {
			A_SetSpeed(8);
			ACS_NamedExecute("JumpHeight");
		} 
		else {
			A_SetSpeed(4);
			ACS_NamedExecute("JumpHeight", 0, 1);
		}
		if (GetCvar("HomingSnapReticle") && (GetCvar("HomingSnapReticle") == 1 && !A_CheckFloor("Null"))) {
			FTranslatedLineTarget ltinfo;
			bool ltattack = LineAttack(angle, 800, pitch, 0, 'None', "InvisiblePuff", LAF_NORANDOMPUFFZ, ltinfo, 10);
			let ltarget = ltinfo.linetarget;
			if (ltarget && Distance3D(ltarget) > 128 && health > 0) {
				if (!reticleActive) {
					A_StartSound("sweapons/reticle", 11);
					reticleActive = true;
				}
				LineAttack(angle, 800, pitch, 0, 'None', 'SonicReticle', LAF_NORANDOMPUFFZ, null, 10);
			}
			else {
				reticleActive = false;
			}
		}
		Super.Tick();
	}
	States
	{
		Pain.Falling:
			TNT1 A 0 {
				switch (random(0, 2)) {
					case 1:
						A_PlaySound("sonic/thanksalotwall", 7);
						ACS_NamedExecute("Subtitles", 0, 3);
						break;
					case 2:
						A_PlaySound("sonic/thiswallsintheway", 7);
						ACS_NamedExecute("Subtitles", 0, 4);
						break;
					default:
						A_PlaySound("sonic/pain", 7);
						break;
				}
				A_PlaySound("sglobal/loserings", 6);
			}
			Goto Spawn;
		Pain:
			PLAY G 4;
			PLAY G 0 A_PlaySound("sglobal/loserings", 6);
			PLAY G 4 A_PlaySound("sonic/pain", 7);
			Goto Spawn;
		Death:
			TNT1 A 0
			{
				if (random(1, 4) == 4) {
					A_PlaySound("sonic/thatwaslame");
					ACS_NamedExecute("Subtitles", 0, 1);
				}
				else {
					A_PlaySound("sonic/scream");
				}
			}
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			TNT1 A 0 A_PlaySound("sonic/ohno");
			TNT1 A 0 ACS_NamedExecute("Subtitles", 0, 2);
			PLAY O 5;
			PLAY P 5;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
	}
}

enum ECheckSolidFootingFlags
{
    CSF_SOLIDGROUND = 1,
    CSF_SOLIDACTORS = 2,
    
    CSF_ALL = CSF_SOLIDGROUND|CSF_SOLIDACTORS,
}

class BoostEnabledWeapon : LockLoadWeapon
{
	int BoostSpeed;
	bool BoostCheck;
	action void Boost(int form, int InitialBoostSpeed, int MaxBoostSpeed)
	{
		if (!invoker.BoostCheck) {
			invoker.BoostCheck = true;
			invoker.BoostSpeed = InitialBoostSpeed;
			A_StartSound("sonic/boost", 6);
			A_StartSound("sweapons/boost", 7);
			A_TakeInventory("ChaosEnergy", 5);
		}
		switch (form) {
			default: 
				/* Sonic */
				A_SetMugShotState("Boost");
				break;
			case 1:
				/* Super Sonic */
				A_SetMugShotState("SuperBoost");
				break;
			case 2:
				/* Hyper Sonic */
				A_SetMugShotState("HyperBoost");
				break;
		}
		A_PlaySound("sweapons/boosttrail", 1, 1.0, true);
		A_ChangeVelocity(Cos(Pitch) * invoker.BoostSpeed, 0, Vel.Z, CVF_Relative|CVF_Replace);
		if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP) && !(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP) && A_CheckFloor("Null")) {
			switch (form) {
				default: 
					A_ChangeVelocity(0, 0, 15, CVF_Relative);
					break;
				case 1:
				case 2:
					A_ChangeVelocity(0, 0, 20, CVF_Relative);
					break;
			}
		}
		if (invoker.BoostSpeed <= MaxBoostSpeed) { invoker.BoostSpeed+=5; }
		A_Light(2);
		if (!form) { A_TakeInventory("ChaosEnergy", 2); }
		switch (form) {
			default: 
				A_FireBullets(60, 60, 200, 1, "InvisibleGibPuff", FBF_NORANDOM, 125);
				break;
			case 1:
			case 2:
				A_FireBullets(120, 120, 500, 999, "InvisibleGibPuff", FBF_NORANDOM, 140);
				break;
		}
	}
	action void WallCrash()
	{
		A_StopSound(1);
		invoker.BoostCheck = false;
		int CrashSpeed = ((invoker.BoostSpeed/10)+20)*-1;
		int VerticalCrashSpeed = 0;
		if (Vel.Z >= 1) {
			VerticalCrashSpeed = Vel.Z;
		}
		A_ChangeVelocity(CrashSpeed, 0, VerticalCrashSpeed, CVF_Relative|CVF_Replace);
		A_StartSound("sweapons/finalhit", 8);
		DamageThing(invoker.BoostSpeed / 10, 17);
	}
	States
	{
		Ready:
			TNT1 A 1;
			Loop;
		Deselect:
			#### A 1 A_Lower(12);
			Loop;
		Select:
			#### A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0;
			Goto Ready;
		BoostStart:
			TNT1 A 0 A_JumpIf(CountInv("PowerHyper"), "HyperBoost");
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "SuperBoost");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy"), "Boost");
			Goto BoostEnd;
		Boost:
			BOOS A 1 Boost(0, 125, 200);
			TNT1 A 0 A_CheckLOF("WallCrash", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			TNT1 A 0 A_ReFire();
			Goto BoostEnd;
		SuperBoost:
			BOOS B 1 Boost(1, 200, 300);
			TNT1 A 0 A_CheckLOF("BoostEnd", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			TNT1 A 0 A_ReFire();
			Goto BoostEnd;
		HyperBoost:
			BOOS C 1 Boost(2, 300, 350);
			TNT1 A 0 A_CheckLOF("BoostEnd", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			TNT1 A 0 A_ReFire();
			Goto BoostEnd;
		WallCrash:
			TNT1 A 0 A_JumpIf(CountInv("PowerInvulnerable")||!GetCvar("WallCrash"), "BoostEnd");
			TNT1 A 0 WallCrash();
		BoostEnd:
			TNT1 A 0 {
				invoker.BoostCheck = false;
				A_StopSound(1);
				A_Light(0);
			}
			Goto Ready;
	}
}

class Caliburn : BoostEnabledWeapon 
{
	double oldVelZ;
	override void Tick()
	{
		oldVelZ = vel.z;
		super.Tick();
	}
	action state A_CheckSolidFooting(StateLabel label, int flags = CSF_ALL)
	{
		if (invoker.oldVelZ != vel.z) {
			return null;
		}
		if (abs(pos.z - GetZAt()) <= 1) {
			if (flags & CSF_SOLIDGROUND) {
				return ResolveState(label);
			}
		}
		bool ok; Actor below;
		[ok, below] = TestMobjZ(true);
		if (below) {
			if (flags & CSF_SOLIDACTORS) {
				return ResolveState(label);
			}
		}
		if (vel.z == invoker.oldVelZ && (flags & CSF_SOLIDGROUND)) {
			return ResolveState(label);
		}
		return null;
	}
	action void SwordSlam()
	{
		A_PlaySound("sweapons/sonicland", 1);
		if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
			A_Explode(280, 600, XF_NOTMISSILE);
			A_PlaySound("sweapons/soulsurge", 6, 0.5);
		}
		else {
			A_Explode(140, 300, XF_NOTMISSILE);
		}
	}
	Default
	{
		Weapon.SelectionOrder 1;
		Weapon.Kickback 1;
		Weapon.BobRangeX 0.5;
		Weapon.BobSpeed 1.5;
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			CALI A 1 {
				A_WeaponReady();
				if (GetCvar("SoulSurgeReady")) {
					return ResolveState("SoulCharge");
				}
				return ResolveState(null);
			}
			Loop;
		SoulCharge:
			SOUS AAABBBCCCDDDEEEFFFGGG 1 {
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) {
					cvar.FindCvar("SoulSurgeReady").SetBool(false);
					return ResolveState("SoulChargeFailed");
				}
				return ResolveState(null);
			}
			Goto SoulCharged;
		SoulCharged:
			TNT1 A 0 A_JumpIf(!GetCvar("SoulSurgeReady"), "SoulChargeFailed");
			SOUS HHHHHHHHHHH 1 {
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) {
					return ResolveState("SoulSurge");
				}
				cvar.FindCvar("SoulSurgeReady").SetBool(false);
				return ResolveState(null);
			}
			Goto SoulChargeFailed;
		SoulSurge:
			CALI E 15 {
				A_CustomPunch(4000, CPF_NOTURN, 0, "InvisiblePuff", 128, 0, 0, "ArmorBonus", "sweapons/finalhit");
				if (!(CountInv("PowerSuper") || CountInv("PowerHyper"))) {
					A_TakeInventory("ChaosEnergy", 400);
				}
				A_StartSound("sweapons/soulsurge", 8);
				cvar.FindCvar("SoulSurgeReady").SetBool(false);
			}
			CALI DCBA 1;
			Goto Ready;
		SoulChargeFailed:
			SOUS GFEDCBA 3;
			Goto Ready;
		Deselect:
			CALI # 1 A_Lower(12);
			Loop;
		Select:
			CALI A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 {
				if (!A_CheckSolidFooting("Null") && GetPlayerInput(MODINPUT_BUTTONS) & BT_CROUCH) {
					return ResolveState("SlamStart");
				}
				return ResolveState(null);
			}
		RapidSlash1:
			TNT1 A 0 {
				A_PlaySound("sweapons/swordswing", 1);
				if (random(1, 4) == 4) { A_PlaySound("sonic/grunt", 7); }
				if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
					A_PlaySound("sweapons/soulsurge", 6, 0.5);
					A_FireProjectile("EnergyBladeLeft");
				}
			}
			CALI BCD 1
			{
				if (!(CountInv("PowerSuper")||CountInv("PowerHyper"))) {
					A_SetSpeed(2.5);
				}
				else {
					A_SetSpeed(5);
				}
				A_CustomPunch(20, CPF_NOTURN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
			}	
			CALI E 1 A_CustomPunch(300, CPF_NOTURN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
			CALI EEE 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			CALI A 0 A_ReFire("RapidSlash2");
			Goto Ready;
		RapidSlash2:
			TNT1 A 0 {
				A_PlaySound("sweapons/swordswing", 1);
				if (random(1, 4) == 4) { A_PlaySound("sonic/grunt", 7); }
				if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
					A_PlaySound("sweapons/soulsurge", 6, 0.5);
					A_FireProjectile("EnergyBladeRight");
				}
			}
			CALI FGHI 1
			{
				if (!CountInv("PowerSuper")||CountInv("PowerHyper")) {
					A_SetSpeed(2.5);
					A_CustomPunch(45, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else {
					A_SetSpeed(5);
					A_CustomPunch(140, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			}
			CALI JJJ 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			CALI A 0 A_ReFire("GroundAttack");
			Goto Ready;
		SlamStart:
			TNT1 A 0 A_PlaySound("sweapons/sonicfalling", 1);
		SlamAttack:
			TNT1 A 0 A_Stop();
			TNT1 A 0 A_ChangeVelocity(0, 0, -500, CVF_Relative|CVF_Replace);
			CALI JKLMN 1
			{
				if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
					A_CustomPunch(70, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else {
					A_CustomPunch(45, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				A_ChangeVelocity(0, 0, -50, CVF_Relative|CVF_Replace);
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			}
			CALI B 0 A_CheckSolidFooting("SlamDone");
			Goto SlamAttack+6;
		SlamDone:
			TNT1 A 0 A_SetSpeed(0);	
			TNT1 A 0 SwordSlam();
			CALI N 10 A_ReFire("AirHold");
			TNT1 A 0 A_SetSpeed(2);
			Goto Ready;
		AirHold:
			CALI N 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire("AirHold");
			TNT1 A 0 A_SetSpeed(2);
			Goto Ready;
		AltFire:
			TNT1 A 0 A_Overlay(-3, "BoostStart");
			Goto Ready;
		Spawn:
			CBRN A -1;
			Stop;
	}
}

class AcceleratedPistol : LockLoadWeapon
{
	action void AccelFire()
	{
		A_PlaySound("sweapons/pistol", 1);
		if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
			A_FireBullets(0, 0, 1, 24, "NoGibPuff");
		}
		else {
			A_FireBullets(2, 2, -1, 12, "NoGibPuff");
		}
		A_GunFlash();
	}
	action void RecoilBurst()
	{
		A_PlaySound("weapons/rbeam", 1);
		if (CountInv("PowerSuper")||CountInv("PowerHyper") > 0) {
			A_RailAttack(380, 0, 1, "06 b4 00", "fd ff 00", RGF_FULLBRIGHT, 0, "GibPuff", 0, 0, 0, 25, 1.0, 1.0);
			A_ChangeVelocity (Cos(Pitch) * -50, 0, Sin(Pitch) * 50, CVF_Relative);
		}
		else {
			A_RailAttack(160, 0, 1, "c5 fe ff", "c5 c6 ff", RGF_FULLBRIGHT, 0, "NoGibPuff", 0, 0, 0, 25, 1.0, 1.0);
			A_ChangeVelocity (Cos(Pitch) * -25, 0, Sin(Pitch) * 20, CVF_Relative);
		}
		A_GunFlash("BurstFlash");
	}
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.Kickback 1;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 8;
		Weapon.AmmoGive 60;
		Weapon.BobSpeed 1.5;
		Inventory.PickupMessage "Accelerated Pistol";
		Tag "Accelerated Pistol";
		+FORCEPAIN
		+PUFFONACTORS
		+ALWAYSPUFF
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SPIS A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
			Loop;
		Deselect:
			SPIS # 1 A_Lower(12);
			Loop;
		Select:
			SPIS A 1 A_Raise(20);
			Loop;
		Fire:
			SPIS A 1 AccelFire();
			TNT1 A 0 { if (CountInv("PowerHyper")) { A_ReFire(); } }
			SPIS BC 1;
			SPIS A 0 A_ReFire();
			Goto Ready;
		AltFire:
			SPIS B 1 RecoilBurst();
			SPIS BBBCCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 { if (CountInv("PowerHyper")) { A_ReFire(); } }
			SPIS CCCCCCCCCCCCCCCCCCCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Flash:
			SPIF A 1 Bright A_Light1;
			Goto LightDone;
		BurstFlash:
			SPIF B 4 Bright A_Light1;
			Goto LightDone;
		Spawn:
			PIST A -1;
			Stop;
	}
}

class RapidShotty : LockLoadWeapon 
{
	action void RapidFire()
	{
		A_PlaySound("sweapons/shardshot", 1);
		if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
			A_FireBullets(18, 10, 20, 6, "BulletPuff");
			A_GunFlash("SuperFlash");
		}
		else {
			A_FireBullets(18, 10, 20, 6, "BulletPuff");
			A_GunFlash();
		}
	}
	action void ForceFire(int intensity)
	{
        if (!CountInv("PowerSuper") && !CountInv("PowerHyper")) {
			for (int x=1; x<intensity; x++) {
				A_TakeInventory("ChaosEnergy", 24, AAPTR_Player1);
			}
        }
		A_PlaySound("sweapons/forceshot", 1);
		A_ChangeVelocity(Cos(Pitch) * -10, 0, Sin(Pitch) * 10, CVF_Relative);
		A_FireBullets(4, 2, 25, 2 * intensity, "BulletPuff");
		A_GunFlash("ForceFlash");
	}
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse1 16;
		Weapon.AmmoUse2 24;
		Weapon.AmmoGive 64;
		Weapon.Kickback 1000;
		Weapon.BobSpeed 1.5;
		Inventory.PickupMessage "Rapid Shotty";
		Tag "Rapid Shotty";
		+PUFFONACTORS
		+ALWAYSPUFF
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SCTG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			SCTG # 1 {
				A_Lower(12);
				A_StopSound(6);
			}
			Loop;
		Select:
			SCTG A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 A_TakeInventory("KickCooldown", 110);
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper")||CountInv("PowerHyper"), "SuperFire");
			SCTG B 1 RapidFire();
			SCTG BBBBBCCCCCCCCCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SCTG A 0 A_ReFire();
			Goto Ready;
		AltFire:
			SCTG B 1 ForceFire(2);
			SCTG BBBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 { if (CountInv("PowerHyper")) { A_ReFire(); } }
			SCTG BBBBB 1 {
                if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK && !(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ALTATTACK)) {
                    return ResolveState("AltFireAgain");
                }
                A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
                return ResolveState(null);
            }
			TNT1 A 0 { if (CountInv("PowerSuper")) { A_ReFire(); } }
			SCTG CDE 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            Goto ForceReload;
		AltFireAgain:
			SCTG B 1 ForceFire(1);
			SCTG BBBBBBBBBBCDE 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            Goto ForceReload;
        ForceReload:
			SCTG F 1 A_PlaySound("sweapons/forcereload", 6);
			SCTG FFFFFFFFFFFFFFFFFFFFFFFFFFFEDCAAAAAAAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SCTG A 0 A_ReFire();
			Goto Ready;
		SuperFire:
			SCTG B 3 RapidFire();
			SCTG C 2;
			TNT1 A 0 { if (CountInv("PowerHyper")) { A_ReFire(); } }
			SCTG C 3;
			SCTG A 0 A_ReFire();
			Goto Ready;
		Flash:
			SCTF A 4 Bright;
			Stop;
		SuperFlash:
			SCTF A 2 Bright;
			Stop;
		ForceFlash:
			SCTF B 4 Bright;
			Stop;
		Spawn:
			SCAT A -1;
			Stop;
	}
}

class ShurikenCrossbow : LockLoadWeapon 
{
	Default
	{
		Weapon.SelectionOrder 800;
		Weapon.AmmoUse 24;
		Weapon.AmmoGive 100;
		Weapon.Kickback 1;
		Weapon.BobSpeed 1.5;
		Weapon.AmmoType "ChaosEnergy";
		Inventory.PickupMessage "Shuriken Crossbow";
		Tag "Shuriken Crossbow";
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SHRL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			SHRL # 1 A_Lower(12);
			Loop;
		Select:
			SHRL A 1 A_Raise(20);
			Loop;
		Fire:
			SHRL B 1 A_FireProjectile("Shuriken", 0, 1);
			TNT1 A 0 { if (CountInv("PowerSuper")||CountInv("PowerHyper")) { A_ReFire(); } }
			SHRL BBBBBBBBBBBBBBBBBBBBBBBCDEFG 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		Spawn:
			SURI A -1;
			Stop;
	}
}


class EclipseBlaster : LockLoadWeapon
{
	action void EclipseFire()
	{
		if (CountInv("PowerHyper")) {
			A_FireProjectile("ChaosEnergyBallEX", 0, 0, 10, 10);
			A_FireProjectile("ChaosEnergyBallEX", 0, 0, -10, 10);
			A_FireProjectile("ChaosEnergyBallEX", 0, 0);
			A_FireProjectile("ChaosEnergyBallEX", 0, 0, 10, -10);
			A_FireProjectile("ChaosEnergyBallEX", 0, 0, -10, -10);
		} else if (CountInv("PowerSuper")) {
			A_FireProjectile("ChaosEnergyBallEX", 0, 0);
		} else {
			A_FireProjectile("ChaosEnergyBall", 0, 1);
		}
	}
	Default
	{
		Weapon.SelectionOrder 1400;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse 5;
		Weapon.AmmoGive 35;
		Weapon.KickBack 1000;
		Weapon.BobSpeed 1.5;
		+EXTREMEDEATH
		+WEAPON.NOAUTOFIRE
		Inventory.PickupMessage "Eclipse Blaster Mk. V";
		Tag "Eclipse Blaster Mk. V";
	}
	States
	{
		Ready:
			ECBL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			ECBL # 1 A_Lower(12);
			Loop;
		Select:
			ECBL A 1 A_Raise(20);
			Loop;
		Fire:
			ECBL BBBBBBB 1 EclipseFire();
			ECBL DDDDDDDDDDDDDDDDDDDDDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		AltFire:
			ECBL C 1 {
				if ((Health < 300) && CountInv("ChaosEnergy") && !(CountInv("PowerSuper") || CountInv("PowerHyper"))) {
					A_PlaySound("sweapons/healthcharge", 4096);
					A_TakeInventory("ChaosEnergy", 4);
					A_GiveInventory("Health", 8);
					if (Health > 300) { A_SetHealth(300); }
				}
				else {
					A_PlaySound("sglobal/error", 4096);
					return ResolveState("EndHeal");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire();
			/* passthrough */
		EndHeal:
			ECBL DDDDDDDDDDDDDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Spawn:
			ECLI A -1;
			Stop;
	}
}

class AirStrikeLauncher : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1500;
		Weapon.AmmoUse 40;
		Weapon.AmmoGive 200;
		Weapon.AmmoType "ChaosEnergy";
		Inventory.PickupMessage "Rocket Rioter";
		Tag "Rocket Rioter";
		Weapon.BobSpeed 1.5;
		Weapon.Kickback 1000;
		+WEAPON.NOAUTOFIRE
		+WEAPON.NOAUTOAIM
		+WEAPON.ALT_AMMO_OPTIONAL
	}
	action void FireRocket(int Amount)
	{
		if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
			int SpreadX, SpreadY, Iterator;
			for (Iterator = 1; Iterator <= Amount; Iterator++) {
				if (A_CheckFloor("Null")) {
					SpreadX = random(-30, 30);
					SpreadY = random(-30, 30);
					A_FireProjectile("ChaosRocket", 0, 0, SpreadX, SpreadY);
				} else {
					SpreadX = random(-60, 60);
					SpreadY = random(-60, 60);
					A_FireProjectile("AirstrikeRocket", 0, 0, SpreadX, SpreadY);
					A_ChangeVelocity(Cos(Pitch) * -10, 0, Sin(Pitch) * 10, CVF_Relative);
				}
			}
		} else {
			if (A_CheckFloor("Null")) {
				A_FireProjectile("ChaosRocket", 0, 1);
			} else {
				A_FireProjectile("AirstrikeRocket", 0, 1);
				A_ChangeVelocity(Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
			}
		}
	}
	States
	{
		Ready:
			MISG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			MISG # 1 A_Lower(12);
			Loop;
		Select:
			MISG A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 A_TakeInventory("KickCooldown", 3);
			TNT1 A 0 {
				if (CountInv("PowerHyper")) {
					FireRocket(10);
				} else {
					FireRocket(5);
				}
			}
			MISG ABB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		AltFire:
			MISG A 1 A_GiveInventory("RemoteDet");
			MISG B 1 A_ReFire();
			MISG A 1 A_TakeInventory("RemoteDet");
			Goto Ready;
		Spawn:
			LAUN A -1;
			Stop;
	}
}

class SonicKick : CustomInventory
{
	int inuse;
	int EXKick;
	States
	{
	Use:
		TNT1 A 0 A_Overlay(-2, "FloorCheck");
		TNT1 A 0 A_OverlayOffset(-2, 0, 32);
		Fail;
	TimeCheck:
		TNT1 A 0 A_JumpIf(CountInv("KickCooldown")<1, "FloorCheck");
		Stop;
	FloorCheck:
		TNT1 A 0 { invoker.EXKick = 0; }
	    TNT1 A 0 A_CheckFloor("KickAttack");
		TNT1 A 0 { invoker.EXKick = 1; }
	KickAttack:
		TNT1 A 0 A_JumpIfInventory("PowerSuper", 1, "SuperKickAttack");
		TNT1 A 0 A_JumpIfInventory("PowerHyper", 1, "HyperKickAttack");
		TNT1 A 0 A_GiveInventory("KickCooldown", 25);
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 A_PlaySound("sonic/grunt", 8);
		TNT1 A 0 A_JumpIf(invoker.EXKick > 0, "SonicEagle");
		KICK A 1 A_PlaySound("sweapons/swordswing", 7);
		KICK BC 1;
		KICK D 1 A_CustomPunch(random(1,16)*24, true, CPF_NOTURN, "SonicKickPuff", 90, 0, 0, "ArmorBonus", "sweapons/finalhit");
		KICK EF 1;
		Stop;
	SonicEagle:
		EAGL A 1 A_PlaySound("sweapons/swordswing", 7);
		EAGL BC 1;
		EAGL D 1 A_CustomPunch(random(1,16)*48, true, CPF_NOTURN, "SonicKickPuff", 90, 0, 0, "ArmorBonus", "sweapons/finalhit");
		EAGL E 1;
		Stop;
	SuperKickAttack:
		TNT1 A 0 A_GiveInventory("KickCooldown", 25);
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 A_PlaySound("sonic/grunt", 8);
		TNT1 A 0 A_JumpIf(invoker.EXKick > 0, "SuperSonicEagle");
		SKIK A 1 
		{
			A_PlaySound("sweapons/shockwave", 7);
			A_FireBullets(27, 9, 100, 5, "GibPuff", 0);
		}
		SKIK BC 1;
		SKIK D 1 A_CustomPunch(random(1,16)*48, true, CPF_NOTURN, "SonicKickPuff", 110, 0, 0, "ArmorBonus", "sweapons/finalhit");
		SKIK E 1;
		Stop;
	SuperSonicEagle:
		SEAG A 1 
		{
			A_PlaySound("sweapons/shockwave", 7);
			A_FireBullets(3, 3, 150, 5, "GibPuff", 0);
		}
		SEAG BC 1;
		SEAG D 1 A_CustomPunch(random(1,16)*96, true, CPF_NOTURN, "SonicKickPuff", 110, 0, 0, "ArmorBonus", "sweapons/finalhit");
		SEAG E 1;
		Stop;
	HyperKickAttack:
		TNT1 A 0 A_GiveInventory("KickCooldown", 25);
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 A_PlaySound("sonic/grunt", 8);
		TNT1 A 0 A_JumpIf(invoker.EXKick > 0, "HyperSonicEagle");
		HKIK A 1 
		{
			A_PlaySound("sweapons/shockwave", 7);
			A_FireBullets(29, 11, 100, 10, "GibPuff", 0);
		}
		HKIK BC 1;
		HKIK D 1 A_CustomPunch(random(1,16)*48, true, CPF_NOTURN, "SonicKickPuff", 110, 0, 0, "ArmorBonus", "sweapons/finalhit");
		HKIK EF 1;
		Stop;
	HyperSonicEagle:
		HEAG A 1 
		{
			A_PlaySound("sweapons/shockwave", 7);
			A_FireBullets(5, 5, 150, 10, "GibPuff", 0);
		}
		HEAG BC 1;
		HEAG D 1 A_CustomPunch(random(1,16)*96, true, CPF_NOTURN, "SonicKickPuff", 110, 0, 0, "ArmorBonus", "sweapons/finalhit");
		HEAG E 1;
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_RELOAD && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_RELOAD) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 5;
		}
	}
}

class HomingSnapQuickStep : CustomInventory
{
	int inuse;
	int counter;
	States
	{
	Use:
		TNT1 A 0 A_Overlay(10, "Startup");
		TNT1 A 0 A_OverlayOffset(10, 0, 32);
		Fail;
	Startup:
		TNT1 A 1 {
			int QuickStepSpeed;
			if (A_CheckFloor("Null")) {
				/* Ground quick step speed */
				QuickStepSpeed = 80;
			} else {
				/* Air quick step speed */
				QuickStepSpeed = 100;
			}
			if (GetPlayerInput(MODINPUT_BUTTONS) & BT_MOVELEFT) {
				/* Quick Step Left */
				A_StartSound("sonic/quickstep", 9);
				A_ChangeVelocity(0, QuickStepSpeed, 0, CVF_Relative|CVF_Replace);
			} 
			else if (GetPlayerInput(MODINPUT_BUTTONS) & BT_MOVERIGHT) {
				/* Quick Step Right */
				A_StartSound("sonic/quickstep", 9);
				A_ChangeVelocity(0, QuickStepSpeed * -1, 0, CVF_Relative|CVF_Replace);
			}
			else {
				/* Homing Snap */
				FTranslatedLineTarget ltinfo;
				bool ltattack = LineAttack(angle, 800, pitch, 0, 'None', "BulletPuff", LAF_NORANDOMPUFFZ, ltinfo, 10);
				let ltarget = ltinfo.linetarget;
				if (ltarget && Distance3D(ltarget) > 128 && health > 0) {
					double ltdistance = Distance2D(ltarget);
					int z_diff = ltarget.Pos.Z - Pos.Z;
					A_ChangeVelocity(ltdistance - 60, 0, z_diff + ltarget.height / 2 - 20, CVF_Relative|CVF_Replace);
					A_SetPitch(10);
					A_SetAngle(ltinfo.angleFromSource);
					/* Why does ZScript not have a way to check your current weapon? */
					if (ACS_NamedExecuteWithResult("CheckIfCaliburn") && (CountInv("ChaosEnergy") >= 400 || CountInv("PowerSuper") || CountInv("PowerHyper"))) {
						A_StartSound("sweapons/soulcharge", 8);
						A_StartSound("sonic/soulcharge", CHAN_BODY);
						cvar.FindCvar("SoulSurgeReady").SetBool(true);
					}
					else {
						A_StartSound("sweapons/sdash", 8);
					}
				}
				else {
					return ResolveState("Null");
				}
				return ResolveState("DashEnd");
			}
			return ResolveState(null);
		}
		TNT1 A 4;
		TNT1 A 0 A_Stop();
		TNT1 A 5;
		Stop;
	DashEnd:
		TNT1 A 1 { 
			invoker.counter = 0;
		}
		/* passthrough */
	HomingFloat:
		TNT1 A 1 {
			A_Stop();
			if (!CheckLOF(CLOFF_JUMPENEMY|CLOFF_SKIPOBJECT|CLOFF_MUSTBESHOOTABLE|CLOFF_JUMPNONHOSTILE)) {
				return ResolveState("HomingEnd");
			}
			invoker.counter++;
			if (invoker.counter > 70 || !CheckLOF(CLOFF_JUMPENEMY|CLOFF_SKIPOBJECT|CLOFF_MUSTBESHOOTABLE|CLOFF_JUMPNONHOSTILE, 128)) {
				return ResolveState("HomingEnd");
			}
			if (GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP) {
				A_ChangeVelocity(0, 0, 15, CVF_Replace);
				A_StartSound("*doublejump", CHAN_BODY);
				return ResolveState("HomingEnd");
			}
			return ResolveState(null);
		}
		Loop;
	HomingEnd:
		TNT1 A 0 {
			cvar.FindCvar("SoulSurgeReady").SetBool(false);
		}
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_ZOOM && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_ZOOM) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 10;
		}
	}
}

