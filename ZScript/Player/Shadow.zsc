class ShadowPlayer : LockLoadPlayer 
{
	Default
	{
		Health 145;
		Player.DisplayName "$shadow";
		Player.Face "SHF";
		Player.SoundClass "shadow";
		Player.StartItem "ShadowMP5";
		Player.StartItem "ShadowAbilities";
		Player.StartItem "ShadowCheck";
		Player.StartItem "ChaosSnap";
		Player.StartItem "ChaosSpearAtk";
		Player.StartItem "ChaosEnergy", 120;
		Player.WeaponSlot 1, "ShadowAbilities", "HighShovel", "ShadowKnife";
		Player.WeaponSlot 2, "ShadowMP5";
		Player.WeaponSlot 3, "DarkAssault";
		Player.WeaponSlot 4, "QuadShotty";
		Player.WeaponSlot 5, "ChaosEmerald";
		Player.WeaponSlot 6, "DualRockets";
	}
	override void Tick()
	{
		if (GetCvar("ReservedMode")) {
			A_SetSpeed(2.5);
		}
		else if (CountInv("PowerSuper")) {
			A_SetSpeed(6);
		}
		else {
			A_SetSpeed(4);
		}
		Super.Tick();
	}
	States
	{
		Pain:
			PLAY G 4;
			PLAY G 4 A_PlaySound("shadow/pain");
			Goto Spawn;
		Death:
			TNT1 A 0 A_PlaySound("shadow/scream");
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0); 
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_PlaySound("shadow/scream");
			TNT1 A 0 A_Log("ALL FAIL SHADOW");
			PLAY O 5;
			PLAY P 5 ACS_NamedExecute("DeathMusic", 0, 1);
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
	}
}

class ShadowAbilities : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 9999999999999;
		Weapon.BobRangeX 0.0;
		Weapon.BobRangeY 0.0;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Shadow the Hedgehog";
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			TNT1 A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(12);
			Loop;
		Select:
			TNT1 A 1 A_Raise(12);
			Loop;
		Fire:
			TNT1 A 0 A_PlaySound("sweapons/swordswing", 1);
			DPNR ABC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			DPNR D 2 A_CustomPunch(random(1,64)*15, true, CPF_NOTURN, "ShadowMeleeAtk", 95, 0, 0, "ArmorBonus", "sweapons/finalhit");
			DPNR CBA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 AA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Spawn:
			SHAD A -1;
			Stop;
	}
}

class HighShovel : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1400;
		Weapon.KickBack 1500;
		Tag "High Shovel";
		Inventory.PickupMessage "\c[ShadowRedBlack]High shovel!";
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SHOV A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(12);
			Loop;
		Select:
			SHOV A 1 A_Raise(12);
			Loop;
		Fire:
			SHOV D 1;
			TNT1 A 0 A_ReFire();
			SHOV A 1 A_PlaySound("sweapons/swordswing", 1);
			SHOV B 1;
			SHOV C 1 {
				if (CountInv("PowerSuper")) {
					A_CustomPunch(600, 0, 0, "ShadowMeleeAtk", 75, 0, 0, "ArmorBonus", "sweapons/shovelbonk");
				}
				else {
					A_CustomPunch(300, 0, 0, "ShadowMeleeAtk", 75, 0, 0, "ArmorBonus", "sweapons/shovelbonk");
				}
			}
			SHOV CCCCCCCCCBA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Spawn:
			SHVL A -1;
			Stop;
	}
}

class ShadowMP5 : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1000;
		Weapon.AmmoUse 2;
		Weapon.AmmoGive 20;
		Weapon.KickBack 15;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Sub-Machine Gun";
		Inventory.PickupMessage "Sub-Machine Gun";
	}
	States
	{
		Ready:
			MP51 A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(12);
			Loop;
		Select:
			MP51 A 1 A_Raise(12);
			Loop;
		Fire:
			MP51 A 1 {
				A_FireBullets(3, 5, -1, 20, "BulletPuff");
				A_PlaySound("sweapons/shadowmp5", CHAN_WEAPON);
				A_GunFlash();
			}
			MP51 A 2;
			Goto Ready;
		Flash:
			MP5F A 1 Bright A_Light1;
			Goto LightDone;
		Spawn:
			SMG1 A -1;
			Stop;
	}
}

class DarkAssault : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 10;
		Weapon.AmmoGive 20;
		Weapon.KickBack 500;
		Weapon.AmmoType "ChaosEnergy";
		AttackSound "weapons/shotgf";
		Tag "Dark Assaulter";
		Inventory.PickupMessage "Dark Assaulter";
	}
	States
	{
		Ready:
			AA12 A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(12);
			Loop;
		Select:
			AA12 A 1 A_Raise(12);
			Loop;
		Fire:
			AA12 A 2;
			AA12 A 0 A_FireBullets(6, 2, 8, 9, "BulletPuff");
			AA12 A 0 A_PlaySound("sweapons/darkshotty", CHAN_WEAPON);
			AA12 A 0 {
				if (CountInv("PowerSuper")) { A_GunFlash("SuperFlash"); } 
				else { A_GunFlash(); }
			}
			AA12 A 3 { if (CountInv("PowerSuper")) { A_ReFire(); } }
			AA12 B 2;
			Goto Ready;
		Flash:
			AAFL A 2 Bright A_Light1;
			Goto LightDone;
		SuperFlash:
			AAFL A 1 Bright A_Light1;
			Goto LightDone;
		Spawn:
			SHOT A -1;
			Stop;
	}
}

class ChaosEmerald : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 3700;
		Weapon.AmmoType "ChaosEnergy";
		Weapon.AmmoUse 400;
		Inventory.PickupMessage "Chaos Emerald";
		Tag "Chaos Emerald";
		+WEAPON.AMMO_OPTIONAL
	}
	States
	{
		Ready:
			CARM A 1 A_WeaponReady();
			TNT1 A 0
			{
				if (!CountInv("Damn4thChaos")) {
					A_GiveInventory("Damn4thChaos");
					ACS_NamedExecute("Damn4thChaosEmerald");
					ACS_NamedExecute("Subtitles", 0, 17);
				}
				if (!CountInv("PowerSuper") && !CountInv("Charging") && CountInv("ChaosEnergy") < 400) {
					A_GiveInventory("ChaosEnergy", 1);
				}
			}
			Loop;
		Deselect:
			#### # 1 A_Lower(12);
			Loop;
		Select:
			CARM A 1 A_Lower(12);
			Loop;
		Fire:
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "AFire");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") < 400, "Error");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") >= 400, "AFire");
			Goto Ready;
		AFire:
			TNT1 A 0 A_PlaySound("shadow/cgrunt", 2);
			CARM A 1 {
				if (CountInv("PowerSuper")) { A_FireProjectile("SuperChaosEnergyBall", 0, false); }
				else { A_FireProjectile("SuperChaosEnergyBall", 0, true); }
			}
			CARM BCDEEEEEEEEEEEDCB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") > 15, "RingCheck");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") < 1, "Error");
			Goto Ready;
		RingCheck:
			TNT1 A 0 A_JumpIf(Health > 299, "Error");
			TNT1 A 0 A_JumpIf(Health < 299, "ChaosCharge");
			Goto Ready;
		Error:
			TNT1 A 0 A_TakeInventory("Charging");
			TNT1 A 0 A_PlaySound("sglobal/error", 4096);
			Goto Ready;
		ChaosCharge:
			TNT1 A 0 A_GiveInventory("Charging");
			TNT1 A 0 A_PlaySound("sweapons/healthcharge", 4096);
			CARM F 1 A_TakeInventory("ChaosEnergy", 5);
			TNT1 A 0 A_GiveInventory("Health", 15);
			TNT1 A 0 { if (Health > 300) { A_SetHealth(300); } }
			TNT1 A 0 A_ReFire("AltFire");
			TNT1 A 0 A_TakeInventory("Charging");
			Goto Ready;
		Spawn:
			CHSM G -1;
			Stop;
	}
}

class ShadowKnife : LockLoadWeapon
{
	int hasKnife;
	Default
	{
		Weapon.SelectionOrder 3800;
		Weapon.KickBack 0;
		Inventory.PickupMessage "Troll Slaiying Knife";
		Tag "Troll Slaiying Knife";
		+WEAPON.MELEEWEAPON
		+WEAPON.NOALERT
	}
	States
	{
		Ready:
			TNT1 A 0
			{
				if (invoker.hasKnife != 1) {
					invoker.hasKnife = 1;
					A_StartSound("theycant/trollyouif", 9);
					ACS_NamedExecute("Subtitles", 0, 16);
				}
			}
			KNIF A 1 A_WeaponReady;
			Loop;
		Deselect:
			#### # 1 A_Lower(12);
			Loop;
		Select:
			KNIF A 1 A_Raise(12);
			Loop;
		Fire:
			KNIF BBCCDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			KNIF E 6 A_CustomPunch(6900, true, 0, "ShadowMeleeAtk", 64, 0, 0, "ArmorBonus", "sonicdoom/finalhit");
			KNIF CCBBBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		Spawn:
			SLAI Y -1;
			Stop;
	}
}

class QuadShotty : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 400;
		Weapon.AmmoUse 40;
		Weapon.AmmoGive 160;
		Weapon.AmmoType "ChaosEnergy";
		Inventory.PickupMessage "Quarternary Decimator";
		Tag "Quarternary Decimator";
	}
	States
	{
		Ready:
			SHT4 A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(12);
			Loop;
		Select:
			SHT4 A 1 A_Raise(12);
			Loop;
		Fire:
			SHT4 A 3
			{
				A_FireBullets(12, 9, 60, 6, "BulletPuff");
				A_FireBullets(6, 3, 30, 4, "BulletPuff");
				A_FireBullets(3, 1, 15, 2, "BulletPuff");
				A_PlaySound("weapons/sshotf", CHAN_WEAPON);
				A_ChangeVelocity(Cos(Pitch) * -30, 0, Sin(Pitch) * 5, CVF_Relative);
			}
			SHT4 B 9 {
				A_GunFlash();
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			}
			TNT1 A 0 { if (CountInv("PowerSuper")) { A_ReFire(); } }
			SHT4 BBBBBBBBBBBBBBBBBBBBBBB 1;
			SHT4 A 4 A_PlaySound("weapons/sshotl");
			SHT4 C 10 A_PlaySound("weapons/sshotc");
			TNT1 A 0 A_ReFire();
			Goto Ready;
		Flash:
			SH4F A 4 Bright A_Light1;
			Goto LightDone;
		Spawn:
			SGN2 A -1;
			Stop;
	}
}

Class DualRockets : LockLoadWeapon
{
	Default
	{
		Weapon.AmmoType "ChaosEnergy";
		Weapon.AmmoUse 42;
		Weapon.AmmoGive 128;
		Inventory.PickupMessage "Dual Assimilator";
		Tag "Dual Assimilator";
		+Weapon.Explosive
		+Weapon.NoAutoFire
	}
	States
	{
		Ready:
			DGLG A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(12);
			Loop;
		Select:
			DGLG A 1 A_Raise(12);
			Loop;
		Fire:
			DGLG A 3;
			DGLG B 7 Bright
			{
				if (CountInv("PowerSuper")) {
					A_FireProjectile("DuellingRocket", -3, 0,  3);
					A_FireProjectile("DuellingRocket", 3, 0, -3);
					A_FireProjectile("DuellingRocket", -5, 0,  5);
					A_FireProjectile("DuellingRocket", 5, 0, -5);
				} else {
					A_FireProjectile("DuellingRocket", -3, 1,  3);
					A_FireProjectile("DuellingRocket", 3, 1, -3);
				}
			}
			DGLG AAAAAAAAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Spawn:
			DOUG A -1;
			Stop;
	}
}

class ChaosSpearAtk : CustomInventory
{
	int inuse;
	States
	{
	Use:
		TNT1 A 0 A_Overlay(-2, "Spear");
		TNT1 A 0 A_OverlayOffset(-2, 0, 32);
		Fail;
	Spear:
		TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") < 2, "Null");
		SARM ABC 1;
		SARM D 1 {
			int spearoffset = -20;
			int spearpitch = -1;
			int spearangle = 20;
			A_PlaySound("sweapons/chaosspear", CHAN_WEAPON);
			if (CountInv("PowerSuper")) {
				A_FireProjectile("ChaosSpearEX", spearangle, false, spearoffset, 0, 0, spearpitch);
				A_FireProjectile("ChaosSpearEX", spearangle - 10, false, spearoffset, 0, 0, spearpitch);
				A_FireProjectile("ChaosSpearEX", spearangle - 20, false, spearoffset, 0, 0, spearpitch);
			}
			else {
				A_FireProjectile("ChaosSpear", 0, false, spearoffset, 0, 0, spearpitch);
				A_TakeInventory("ChaosEnergy", 2);
			}
		}
		SARM D 4;
		SARM CBA 1;
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_RELOAD && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_RELOAD) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 15;
		}
	}
}

class ChaosSnap : CustomInventory
{
	int inuse;
	int counter;
	override void Tick()
	{
		if (owner.A_CheckFloor("Null")) {
			counter = 0;
		}
		Super.Tick();
	}
	States
	{
	Use:
		TNT1 A 0 A_Overlay(-2, "CountCheck");
		TNT1 A 0 A_OverlayOffset(-2, 0, 32);
		Fail;
	CountCheck:
		TNT1 A 0 {
			invoker.counter++;
			int maxCount;
			if (ACS_NamedExecuteWithResult("CheckIfEmerald")) {
				maxCount = 3;
			}
			else {
				maxCount = 2;
			}
			return A_JumpIf(invoker.counter <= maxCount || CountInv("PowerSuper"), "Snap");
		}
		Stop;
	Snap:
		TNT1 A 0 A_GiveInventory("KickCooldown", 25);
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 A_StartSound("shadow/teleport", 7);
		TNT1 A 0
		{
			int forward = GetPlayerInput(MODINPUT_FORWARDMOVE);
			int sidem = GetPlayerInput(MODINPUT_SIDEMOVE);
			int buttons = GetPlayerInput(MODINPUT_BUTTONS);
			int input = 0;
			int SnapSpeed = 200;
			DamageFactor = 0;
			if (player.onground) SnapSpeed = 100;
			
			if (forward > 0) {
				A_ChangeVelocity(SnapSpeed, 0, 0, CVF_Relative);
				input = 1;
			}
			
			if (sidem < 0) {
				A_ChangeVelocity(0, SnapSpeed, 0, CVF_Relative);
				input = 1;
			}
			
			if (sidem > 0) {
				A_ChangeVelocity(0, SnapSpeed * -1, 0, CVF_Relative);
				input = 1;
			}
			
			if (forward < 0) {
				A_ChangeVelocity(SnapSpeed * -1, 0, 0, CVF_Relative);
				input = 1;
			}
			
			if (buttons & BT_CROUCH && !player.onground) {
				ThrustThingZ(0, -200, 0, 0);
				input = 1;
			}
			
			if (!input) {
				ThrustThingZ(0, 200, 0, 0);
			}
		}
		TNT1 A 5;
		TNT1 A 0 A_Stop();
		TNT1 A 5;
		TNT1 A 0 { DamageFactor = 1; }
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_ZOOM && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_ZOOM) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 10;
		}
	}
}

