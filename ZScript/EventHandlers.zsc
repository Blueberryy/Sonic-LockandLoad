class DeathInfo : Object {
    Actor actor;
    int tick;
}

class RemoveCyberSpaceArenaCorpses : EventHandler
{
	Array<DeathInfo> dead_monsters;
	int current_tick;
	int delay;
	
	override void WorldThingDied(WorldEvent e)
    {
        if (e.thing && e.thing.bIsMonster && level.mapname == "SDCYBRSP") {
			DeathInfo info = new("DeathInfo");
            info.actor = e.thing;
            info.tick = current_tick;
            dead_monsters.Push(info);
		}
    }

    override void WorldTick () {
        current_tick++;
		delay = 60;
		for (int i = 0; i < dead_monsters.Size(); i++) {
            if (current_tick - dead_monsters[i].tick >= delay) {
                dead_monsters[i].actor.Destroy();
                dead_monsters.Delete(i);
                i--;
            }
        }
    }
}

class GiveEnergyOnDamage : EventHandler
{
	void GiveEnergy(Actor recipient, int energy, int maxenergy) {
		if (recipient && recipient.CountInv("ChaosEnergy") < maxenergy) {
			if (recipient.CountInv("ChaosEnergy") + energy > maxenergy) {
				energy = maxenergy - recipient.CountInv("ChaosEnergy");
			}
			recipient.A_GiveInventory("ChaosEnergy", energy);
		}
	}
	
	override void WorldThingDamaged(WorldEvent e)
    {
        if (e.thing && e.thing.bIsMonster && Cvar.FindCvar("EnemiesBleedRings").GetBool()) {
			int energy_to_give, min_energy, max_energy;
			if (e.damage > e.thing.health) {
				energy_to_give = e.damage / 16;
				min_energy = 1;
				max_energy = 300;
			}
			else {
				energy_to_give = e.damage / 8;
				min_energy = 15;
				max_energy = 500;
			}
			if (e.damage < min_energy) {
				energy_to_give = min_energy;
			}
			GiveEnergy(e.damagesource, energy_to_give, max_energy);
		}
    }
}

class EnemiesBleedRings : EventHandler
{
	override void WorldThingDamaged(WorldEvent e)
    {
        if (e.thing && e.thing.bIsMonster && Cvar.FindCvar("EnemiesBleedRings").GetBool()) {
			int ringcount = e.damage / 64;
			if (ringcount < 1) ringcount = 1;
			int maxrange  = e.damage / 48;
			if (maxrange < 2) {
				maxrange = 2;
			}
			if (e.damage > e.thing.health) ringcount = e.damage / 16;
			for (int x = 1; x <= ringcount; x++) {
				int x = random(maxrange * -1, maxrange);
				int y = random(maxrange * -1, maxrange);
				bool ring_exists;
				Actor spawned_ring;
				[ring_exists, spawned_ring] = e.thing.A_SpawnItemEx("DroppedRingEnemy", 0, 0, 1, x, y, 12, 0, SXF_NOCHECKPOSITION);
				if (ring_exists) {
					spawned_ring.Vel += e.thing.Vel / 2;
				}
			}
		}
    }
}

class StyleSystem : EventHandler
{
	int score;
	int current_tick;
    string current_weapon;
    int consecutive_uses;
	
	override void WorldThingDamaged(WorldEvent e)
    {
		if (!cvar.FindCvar("StyleSystem").GetBool()) return;
		PlayerPawn player = players[consoleplayer].mo;
		if (e.thing && e.thing is "PlayerPawn") {
			int penalty;
			int stylerank = cvar.FindCvar("StyleRank").GetInt();
			
			switch (stylerank) {
				case 0:
					penalty = 0;
					break;
				case 1:
					penalty = 64;
					break;
				case 2:
					penalty = 128;
					break;
				case 3:
					penalty = 256;
					break;
				case 4:
					penalty = 1048;
					break;
				case 5:
					penalty = 2096;
					break;
			}
			
			score -= e.damage * penalty;
		}
        else if (e.thing && e.thing.bIsMonster && (e.damagesource is "PlayerPawn"||e.inflictor is "PlayerPawn")) {
			if (player.player.ReadyWeapon && player.player.ReadyWeapon.GetClassName() == current_weapon && !(player.player.WeaponState & WF_WEAPONSWITCHOK)) {
				consecutive_uses++;
			}
			
			int stylerank = cvar.FindCvar("StyleRank").GetInt();
			
			int staleness = 1000 * consecutive_uses;
			if (staleness < 0) staleness = 0;
			if (staleness > e.damage) staleness = e.damage;
			
			if (player.player.ReadyWeapon.GetClassName() != current_weapon) {
				score += 2500;
			}
			
			int total_vel = sqrt(player.vel.x ** 2 + player.vel.y ** 2);
			score += total_vel / 14;
			
			if (!player.player.onground) score += 1000;
			
			score += e.damage * 4 - staleness;
			
			if (e.damage > e.thing.Health) {
				score += 2000;
			}
			if (score > 100000) score = 100000;
			
			/*
			It isn't here, but you can also gain Style Points
			by parrying.
			
			Go and see Sonic.zsc and Amy.zsc for that code.
			*/
		}
    }
	
	override void WorldTick()
	{
		if (!cvar.FindCvar("StyleSystem").GetBool()) return;
		cvar.FindCvar("StyleScore").SetInt(score);
		
		PlayerPawn player = players[consoleplayer].mo;
		if (player.player.ReadyWeapon && player.player.ReadyWeapon.GetClassName() != current_weapon) {
			consecutive_uses = 0;
			current_weapon = player.player.ReadyWeapon.GetClassName();
		}
		
		if (score < 0 || player.health <= 0) score = 0;
		
		current_tick++;
		
		if 		(score >= 75000) cvar.FindCvar("StyleRank").SetInt(5);
		else if (score >= 40000) cvar.FindCvar("StyleRank").SetInt(4);
		else if (score >= 20000) cvar.FindCvar("StyleRank").SetInt(3);
		else if (score >= 10000) cvar.FindCvar("StyleRank").SetInt(2);
		else if (score >= 2000)	 cvar.FindCvar("StyleRank").SetInt(1);
		else 					 cvar.FindCvar("StyleRank").SetInt(0);
		int stylerank = cvar.FindCvar("StyleRank").GetInt();
		
		int deprecation;
		switch (stylerank) {
			case 0:
			case 1:
				deprecation = 64;
				break;
			case 2:
				deprecation = 128;
				break;
			case 3:
				deprecation = 512;
				break;
			case 4:
				deprecation = 1024;
				break;
			case 5:
				deprecation = 2048;
				break;
		}
		
		int total_vel = sqrt(player.vel.x ** 2 + player.vel.y ** 2);
		
		if (total_vel >= 100.0) {
			deprecation /= 8;
		}
		else if (total_vel >= 50.0) {
			deprecation /= 4;
		}
		else if (total_vel >= 33.0) {
			deprecation /= 2;
		}
		
		if (player.CountInv("PowerSuper") || player.CountInv("PowerHyper")) {
			deprecation *= 2;
		}
		
		if (current_tick > 2) {
			current_tick = 0;
			score -= deprecation;
		}
	}
}
