class DeathInfo : Object {
    Actor actor;
    int tick;
}

class RemoveCyberSpaceArenaCorpses : EventHandler
{
	Array<DeathInfo> dead_monsters;
	int current_tick;
	int delay;
	
	override void WorldThingDied(WorldEvent e)
    {
        if (e.thing && e.thing.bIsMonster && level.mapname == "SDCYBRSP") {
			DeathInfo info = new("DeathInfo");
            info.actor = e.thing;
            info.tick = current_tick;
            dead_monsters.Push(info);
		}
    }

    override void WorldTick () {
        current_tick++;
		delay = 60;
		for (int i = 0; i < dead_monsters.Size(); i++) {
            if (current_tick - dead_monsters[i].tick >= delay) {
                dead_monsters[i].actor.Destroy();
                dead_monsters.Delete(i);
                i--;
            }
        }
    }
}

class GiveEnergyOnDamage : EventHandler
{
	void GiveEnergy(Actor recipient, int energy, int maxenergy) {
		if (recipient && recipient.CountInv("ChaosEnergy") < maxenergy) {
			if (recipient.CountInv("ChaosEnergy") + energy > maxenergy) {
				energy = maxenergy - recipient.CountInv("ChaosEnergy");
			}
			recipient.A_GiveInventory("ChaosEnergy", energy);
		}
	}
	
	override void WorldThingDamaged(WorldEvent e)
    {
        if (e.thing && e.thing.bIsMonster && Cvar.FindCvar("GiveEnergyOnDamage").GetBool()) {
			int energy_to_give, min_energy, max_energy;
			if (e.damage > e.thing.health) {
				energy_to_give = e.damage / 16;
				min_energy = 1;
				max_energy = 300;
			}
			else {
				energy_to_give = e.damage / 8;
				min_energy = 15;
				max_energy = 500;
			}
			if (e.damage < min_energy) {
				energy_to_give = min_energy;
			}
			GiveEnergy(e.damagesource, energy_to_give, max_energy);
		}
    }
}

class EnemiesBleedRings : EventHandler
{
	override void WorldThingDamaged(WorldEvent e)
    {
        if (e.thing && e.thing.bIsMonster && Cvar.FindCvar("EnemiesBleedRings").GetBool()) {
			int ringcount = e.damage / 64;
			ringcount = clamp(ringcount, 1, 300);
			int maxrange  = e.damage / 48;
			maxrange = clamp(maxrange, 2, 20);
			for (int x = 1; x <= ringcount; x++) {
				int x = random(maxrange * -1, maxrange);
				int y = random(maxrange * -1, maxrange);
				bool ring_exists;
				Actor spawned_ring;
				[ring_exists, spawned_ring] = e.thing.A_SpawnItemEx("DroppedRingEnemy", 0, 0, 1, x, y, 12, 0, SXF_NOCHECKPOSITION);
				if (ring_exists) {
					spawned_ring.Vel += e.thing.Vel / 2;
				}
			}
			FTranslatedLineTarget t;
			for (int offset = 0; offset < 360; offset += 45) {
				e.thing.LineAttack(e.thing.angle + offset, 192, e.thing.pitch, 0, "None", "InvisiblePuff", 0, t);
				if (t.linetarget && t.linetarget is "PlayerPawn") {
					t.linetarget.A_GiveInventory("Health", ringcount / 4);
				}
			}
		}
    }
}

class StyleSystem : EventHandler
{
	int score;
	int current_tick;
    string current_weapon;
    int consecutive_uses;
	
	override void WorldThingDamaged(WorldEvent e)
    {
		bool is_attackable_target = e.thing.bIsMonster || e.thing.GetClassName() == "Doox";
		
        if (!cvar.FindCvar("StyleSystem").GetBool())
            return;

        if (e.thing && e.thing is "PlayerPawn") {
            DeductStyleScore(e);
        }
		
        else if (e.thing && is_attackable_target && !(e.damagesource && e.damagesource.bIsMonster) && !(e.inflictor && e.inflictor.bIsMonster)) {
            UpdateStyleScore(e);
        }
    }

    override void WorldTick()
    {
        if (!cvar.FindCvar("StyleSystem").GetBool())
            return;

        UpdateStyleRank();
        UpdateWeapon();
        DeprecateStyleScore();
    }
	
	private void UpdateStyleScore(WorldEvent e)
	{
		/* Player object */
		PlayerPawn player = players[consoleplayer].mo;
		
		/* Consecutive uses */
		let ReadyWeapon = player.player.ReadyWeapon;
		let PlayerIsResponsible = e.damagesource && e.damagesource is "PlayerPawn";
		if (ReadyWeapon && ReadyWeapon.GetClassName() == current_weapon && PlayerIsResponsible) {
			consecutive_uses++;
		}
		
		/* Initialisation */
		int stylerank = cvar.FindCvar("StyleRank").GetInt();
		int scorebonus;
		
		/* Dealing damage */
		if (PlayerIsResponsible) {
			scorebonus += e.damage * 73;
		}
		else {
			if (stylerank >= 1) {
				scorebonus += e.damage * 12;
			}
			else {
				return;
			}
		}
		
		/* Using different weapon */
		if (ReadyWeapon.GetClassName() != current_weapon) {
			scorebonus *= 3;
		}
		
		/* Height bonus */
		if (!player.player.onground) {
			double heightbonus = player.Pos.Z - player.GetZAt();
			heightbonus /= 172;
			if (heightbonus < 1) heightbonus = 1;
			if (heightbonus > 2) heightbonus = 2;
			scorebonus *= heightbonus;
		}
		
		/* Enemy mid-air bonus */
		if (e.thing.Pos.Z > e.thing.GetZAt()) {
			scorebonus *= 2;
		}
		
		/* Add case for Offhand Attack */
		bool offhand_attack_used = e.DamageType == "SonicKick" ||
								   e.DamageType == "ShadowMelee" ||
								   e.DamageType == "Piko" ||
								   e.DamageType == "SonicPunch";
		
		/* Add case for shotguns */
		bool shotgun_used = current_weapon == "KineticShotty" ||
							current_weapon == "PrecisionShotgun" ||
							current_weapon == "SpeedyShotgun" ||
							current_weapon == "DarkAssault" ||
							current_weapon == "QuadShotty";
		
		/* Clamp score bonus */
		int minimum_score = 500 + GetScoreBonusCap() / 100;
		int maximum_score = GetScoreBonusCap();
		scorebonus = clamp(scorebonus, minimum_score, maximum_score);
		
		/* Limit score bonus if attack was Spin Dash or Boost */
		if (e.damagetype == "SpinDash" || e.DamageType == "Boost") {
			scorebonus /= 8;
		}
		
		/* Calculate staleness */
		int staleness_factor = 512;
		if (shotgun_used) staleness_factor = 64;
		int staleness = staleness_factor * consecutive_uses;
		staleness = clamp(staleness, 0, scorebonus);
		
		// Apply staleness, unless an Offhand Attack was used
		if (!offhand_attack_used) {
			scorebonus -= staleness;
		}
 		
		/* Total up and cap score */
		score += scorebonus;
		if (score > 300000) score = 300000;
		
		/* It isn't here, but the player can also gain Style
		   Points by parrying attacks.
		
		   Go and see Sonic.zsc and Amy.zsc for that code. */
	}
	
	private void DeductStyleScore(WorldEvent e)
	{
		/* Init variable and get style rank */
		int penalty;
		int stylerank = cvar.FindCvar("StyleRank").GetInt();
		switch (stylerank) {
			case 0: // Empty
				penalty = 0;
				break;
			case 1: // Drifting
			case 2: // Cruising
			case 3: // Blazing
				penalty = 64;
				break;
			case 4: // Adventurer!
				penalty = 128;
				break;
			case 5: // Skyrocketing!!
				penalty = 524;
				break;
			case 6: // Speeding Style!!!
				penalty = 1192;
				break;
			case 7: // Super Sonic Style!!!
				penalty = 2048;
				break;
		}
		penalty += (e.damage / 16) * (score / 16);
		penalty *= stylerank;
		if (penalty < 1) {
			score = 0;
			return;
		}
		score -= penalty;
	}
	
	private int GetScoreBonusCap()
	{
		PlayerPawn player = players[consoleplayer].mo;
		int stylerank = cvar.FindCvar("StyleRank").GetInt();
		int cap;
		switch (stylerank) {
			case 0:
			case 1:
				cap = 10000;
				break;
			case 2:
				cap = 15000;
				break;
			case 3:
				cap = 20000;
				break;
			case 4:
				cap = 25000;
				break;
			case 5:
				cap = 30000;
				break;
			case 6:
				cap = 40000;
				break;
			case 7:
				cap = 80000;
				break;
		}
		
		return cap;
	}
	
	private void DeprecateStyleScore()
	{
		PlayerPawn player = players[consoleplayer].mo;
		int stylerank = cvar.FindCvar("StyleRank").GetInt();
		int deprecation;
		switch (stylerank) {
			case 0: // E
			case 1: // D
				deprecation = 32;
				break;
			case 2: // C
			case 3: // B
				deprecation = 128;
				break;
			case 4: // A
			case 5: // S
				deprecation = 256;
				break;
			case 6: // SS
			case 7: // SSS
				deprecation = 512;
				break;
		}
		
		/* Super and Hyper forms are invincible,
		   so this is to balance it out */
		if (player.CountInv("PowerSuper") || player.CountInv("PowerHyper")) {
			deprecation *= 1.5;
		}
		
		/* Deducting score */
		if (current_tick > 2) {
			current_tick = 0;
			score -= deprecation;
		}
	}
	
	private void UpdateStyleRank()
	{
		PlayerPawn player = players[consoleplayer].mo;
		if (score < 0 || player.health <= 0) score = 0;
		cvar.FindCvar("StyleScore").SetInt(score);
		
		// Used above, for deprecation delay
		current_tick++;
		
		// Set your Style Rank
		if 		(score >= 100000) cvar.FindCvar("StyleRank").SetInt(7); // Super Sonic Style!!!
		else if	(score >= 80000)  cvar.FindCvar("StyleRank").SetInt(6); // Speeding Style!!!
		else if (score >= 60000)  cvar.FindCvar("StyleRank").SetInt(5); // Skyrocketing!!
		else if (score >= 40000)  cvar.FindCvar("StyleRank").SetInt(4); // Adventurer!
		else if (score >= 20000)  cvar.FindCvar("StyleRank").SetInt(3); // Blazing
		else if (score >= 10000)  cvar.FindCvar("StyleRank").SetInt(2); // Cruising
		else if (score >= 1)	  cvar.FindCvar("StyleRank").SetInt(1); // Drifting
		else 					  cvar.FindCvar("StyleRank").SetInt(0); // Empty
		
		// Obtain Style Rank to sync up
		int style_rank = cvar.FindCvar("StyleRank").GetInt();
		
		bool transformed = player.CountInv("PowerSuper") || player.CountInv("PowerHyper");
		
		// Style Bonuses
		if (style_rank >= 4 && !transformed) {
			player.A_GiveInventory("ChaosEnergy", style_rank - 4);
		}
	}
	
	private void UpdateWeapon()
	{
		PlayerPawn player = players[consoleplayer].mo;
		
		/* If the player's weapon has previously been
		   switched, reset the amount of consecutive
		   uses and reset their current weapon. */
		if (player.player.ReadyWeapon && player.player.ReadyWeapon.GetClassName() != current_weapon) {
			consecutive_uses = 0;
			current_weapon = player.player.ReadyWeapon.GetClassName();
		}
	}
}

class SpongyEnemies : EventHandler
{
	override void WorldThingSpawned(WorldEvent e)
    {
        if (e.thing && e.thing.bIsMonster && Cvar.FindCvar("SpongyEnemies").GetBool()) {
			e.thing.health *= cvar.FindCvar("Sponginess").GetInt();
			// It really is that fricking simple! :D
		}
    }
}

class DeathCounter : StaticEventHandler
{
	override void PlayerSpawned(PlayerEvent e)
	{
		int counter = cvar.FindCvar("DeathCounter").GetInt();
		if (counter > 0) {
			CallACS("DisplayFailures", counter);
		}
	}
	override void PlayerDied(PlayerEvent e)
	{
		int counter = cvar.FindCvar("DeathCounter").GetInt();
		if (cvar.FindCvar("CountDeaths").GetBool()) {
			cvar.FindCvar("DeathCounter").SetInt(counter + 1);
		}
	}
}

class LastWeaponHandler : StaticEventHandler
{
	string last_weapon;
	string current_weapon;
	
	override void NetworkProcess(ConsoleEvent e)
	{               
		if (e.Name == "quickswap") {
			SwitchWeapon();
		}
	}

    string GetDefaultWeapon()
    {
        PlayerPawn player = players[consoleplayer].mo;

        // Can't really use switch-case here, since we're working with strings
        
        // We can assume that the player just spawned in, so their weapons are
        // easy enough to guess

        if (player is "SonicPlayer") {
            return "Caliburn";
        }

        if (player is "AmyPlayer") {
            return "SilentRosePistol";
        }

        if (player is "ClassicSonicPlayer") {
            return "ChaosBlaster";
        }

        if (player is "ShadowPlayer") {
            return "HighShovel";
        }

        return "";
    }
	
	string GetWeapon()
	{
		PlayerPawn player = players[consoleplayer].mo;
		
		if (player.player.ReadyWeapon == null) {
			return "";
		}
		
		return player.player.ReadyWeapon.GetClassName();
	}
	
	override void WorldTick()
	{
		PlayerPawn player = players[consoleplayer].mo;
		
		if (player.player.ReadyWeapon == null) {
			return;
		}
		
		if (current_weapon != GetWeapon()) {
			last_weapon = current_weapon;
		}
		
		if (last_weapon == "") {
			last_weapon = GetDefaultWeapon();
		}
		
		current_weapon = GetWeapon();
	}
	
	void SwitchWeapon()
	{
		PlayerPawn player = players[consoleplayer].mo;
		
		if (!player.CountInv(last_weapon)) {
			last_weapon = GetDefaultWeapon();
		}
		
		player.A_SelectWeapon(last_weapon);
	}
}
