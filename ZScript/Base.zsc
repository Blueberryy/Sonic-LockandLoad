class LockLoadPlayer : PlayerPawn 
{
	Default
	{
		Speed 2;
		Health 125;
		Radius 15;
		Height 42;
		Player.ViewHeight 42.0;
		PainChance 250;
		Mass 100;
		Player.MaxHealth 999;
		Player.JumpZ 15.0;
	}
	States
	{
		Spawn:
			PLAY A -1;
			Loop;
		See:
			PLAY ABCD 4;
			Loop;
		Missile:
			PLAY E 12;
			Goto Spawn;
		Melee:
			PLAY F 6 BRIGHT;
			Goto Missile;
		Pain:
			PLAY G 4;
			PLAY G 0 A_PlaySound("sglobal/loserings", 6);
			PLAY G 4;
			Goto Spawn;
		Death.Drownd:
			TNT1 A 0 A_PlaySound("sglobal/drown");
			Goto Death+2;
		Death:
			TNT1 A 0;
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			TNT1 A 0;
			TNT1 A 0;
			PLAY O 5;
			PLAY P 5;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
	}
}

class LLSwitch : Actor
{
	Default
	{
		+SHOOTABLE
		+NOBLOOD
		+DONTFALL
		+NOGRAVITY
		+NOCLIP
		Health 1;
		Mass 100000;
		YScale 0.9;
		Height 30;
		DamageFactor "Normal", 0;
		DeathSound "switches/normbutn";
	}
	States
	{
		Death:
			ACTS A -1 A_Scream();
			Stop;
	}
}

class LockLoadWeapon : Weapon
{
	override bool DepleteAmmo(bool altFire, bool checkEnough, int ammouse)
	{
		if ((CountInv("PowerSuper", AAPTR_Player1) || CountInv("PowerHyper", AAPTR_Player1))) {
			if (!altfire) {
				A_GiveInventory("ChaosEnergy", AmmoUse1, AAPTR_Player1);
			}
			else {
				A_GiveInventory("ChaosEnergy", AmmoUse2, AAPTR_Player1);
			}
		}
		super.DepleteAmmo(altFire, checkEnough, ammouse);
		return true;
	}
}