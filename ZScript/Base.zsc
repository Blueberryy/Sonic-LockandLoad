class LockLoadPlayer : PlayerPawn 
{
	int dJumpCounter;
	Default
	{
		Speed 4;
		Player.ForwardMove 1, 0.5;
		Player.SideMove 1, 0.5;
		Health 125;
		Radius 15;
		Height 42;
		Player.ViewHeight 42.0;
		PainChance 250;
		Mass 100;
		Player.MaxHealth 999;
		Player.JumpZ 15.0;
	}
	override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
	{
		Super.TakeSpecialDamage(inflictor, source, damage, damagetype);
		if (damage > 0 && damage < 999 && !(player.cheats & CF_GODMODE) && !CountInv("PowerInvulnerable")) {
            A_StartSound("sglobal/loserings", 6);
			int ringcount = damage;
			int maxrange  = damage / 4;
			if (maxrange < 5) maxrange = 5;
			if (maxrange > 15) maxrange = 15;
			if (ringcount > 150) ringcount = 150;
			for (int x = 1; x <= ringcount; x++) {
				int x = random(maxrange * -1, maxrange);
				int y = random(maxrange * -1, maxrange);
				A_SpawnItemEx("DroppedRingPlayer", 0, 0, 1, x, y, 15);
			}
		}
		return damage;
	}
	States
	{
		Spawn:
			PLAY A -1;
			Loop;
		See:
			PLAY ABCD 4;
			Loop;
		Missile:
			PLAY E 12;
			Goto Spawn;
		Melee:
			PLAY F 6 BRIGHT;
			Goto Missile;
		Pain:
			PLAY G 4;
			PLAY G 0; 
			PLAY G 4;
			Goto Spawn;
		Death.Drownd:
			TNT1 A 0 A_PlaySound("sglobal/drown");
			Goto Death+2;
		Death:
			TNT1 A 0;
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			TNT1 A 0;
			TNT1 A 0;
			PLAY O 5;
			PLAY P 5;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
	}
	override void CheckJump()
	{
		let player = self.player;
		double wJumpHeight;
		double wJumpHeightOffset = 50;
		double wJumpDistance = 25;
		bool isTouchingWall = A_CheckLOF("Null", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
		int dJumpCount = 1; // You get an extra jump
		if (CountInv("SonicCheck") && CountInv("PowerHyper")) {
			dJumpCount = 2; // Two extra jumps if you're Hyper Sonic
		}
		if (player.onground) {
			dJumpCounter = 0; // Reset the double jump counter once you touch the ground
			cvar.FindCvar("DidJump").SetBool(false); // Reset the DidJump CVAR as well
		}
		if (GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP && !(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP)) {
			int buttons = GetPlayerInput(MODINPUT_BUTTONS);
			bool IsHovering = buttons & BT_ALTATTACK && (CountInv("PowerSuper")||CountInv("PowerHyper")) && !player.onground;
			if (bNoGravity) {
				Vel.Z = 3.;
			}
			else if (level.IsJumpingAllowed() && player.onground) {
				// Usual jump stuff
				cvar.FindCvar("DidJump").SetBool(true);
				double jumpvelz = JumpZ * 35 / TICRATE;
				double jumpfac = 0;

				if (jumpfac > 0) {
					jumpvelz *= jumpfac;
				}
				
				if (player.crouchoffset != 0) {
					player.crouching = 1;
				}

				Vel.Z = jumpvelz;
				bOnMobj = false;
				player.jumpTics = 0;
				if (!(player.cheats & CF_PREDICTING)) {
					A_StartSound("*jump", CHAN_BODY);
				}
			}
			else if (CountInv("SonicCheck") && isTouchingWall && Pos.Z - GetZAt() > 60 && GetCvar("WallJump")) {
				dJumpCounter = 0; // You get a free double jump after a wall jump
				if (Vel.Z >= 1) {
					wJumpHeight = Vel.Z + wJumpHeightOffset;
				}
				else {
					wJumpHeight = wJumpHeightOffset;
				}
				ACS_NamedExecute("WallJump", 0, wJumpHeight, wJumpDistance);
			}
			else if (level.IsJumpingAllowed() && (CountInv("SonicCheck") || CountInv("AmyCheck") || (CountInv("ClassicCheck") && CountInv("PowerHyper") && !IsHovering)) && GetCvar("DoubleJump")) {
				// Double jump stuff
				if (GetCvar("Sliding")) {
					A_ChangeVelocity(Vel.X, Vel.Y, JumpZ - 2, CVF_Replace);
					A_StartSound("*jump", CHAN_BODY);
				}
				else {
					if (dJumpCounter < dJumpCount || waterlevel > 1 && CountInv("SonicCheck")) {
						dJumpCounter++;
						if (GetCvar("DoubleJump") == 1) { Thing_Stop(1001); }
						A_ChangeVelocity(Vel.X, Vel.Y, JumpZ - 2, CVF_Replace);
						A_StartSound("*doublejump", CHAN_BODY);
					}
				}
			}
		}
	}
	override bool CanCrouch()
	{
		player = self.player;
		if (!player.onground) {
			return false;
		}
		Super.CanCrouch();
		return true;
	}
}

class LLSwitch : Actor
{
	Default
	{
		+SHOOTABLE
		+NOBLOOD
		+DONTFALL
		+NOGRAVITY
		+NOCLIP
		Health 1;
		Mass 100000;
		YScale 0.9;
		Height 30;
		DamageFactor "Normal", 0;
		DeathSound "switches/normbutn";
	}
	States
	{
		Death:
			ACTS A -1 A_Scream();
			Stop;
	}
}

class LockLoadWeapon : Weapon
{
	override bool DepleteAmmo(bool altFire, bool checkEnough, int ammouse)
	{
		if ((CountInv("PowerSuper", AAPTR_Player1) || CountInv("PowerHyper", AAPTR_Player1))) {
			if (!altfire) {
				A_GiveInventory("ChaosEnergy", AmmoUse1, AAPTR_Player1);
			}
			else {
				A_GiveInventory("ChaosEnergy", AmmoUse2, AAPTR_Player1);
			}
		}
		super.DepleteAmmo(altFire, checkEnough, ammouse);
		return true;
	}
}
