class SonicKick : CustomInventory
{
	int inuse;
	int EXKick;
	States
	{
	Use:
		TNT1 A 0 A_Overlay(-2, "FloorCheck");
		TNT1 A 0 A_OverlayOffset(-2, 0, 32);
		Fail;
	TimeCheck:
		TNT1 A 0 A_JumpIf(CountInv("KickCooldown")<1, "FloorCheck");
		Stop;
	FloorCheck:
		TNT1 A 0 { invoker.EXKick = 0; }
	    TNT1 A 0 A_CheckFloor("KickAttack");
		TNT1 A 0 { invoker.EXKick = 1; }
	KickAttack:
		TNT1 A 0 A_JumpIfInventory("PowerSuper", 1, "SuperKickAttack");
		TNT1 A 0 A_JumpIfInventory("PowerHyper", 1, "HyperKickAttack");
		TNT1 A 0 A_GiveInventory("KickCooldown", 25);
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 A_PlaySound("sonic/grunt", 8);
		TNT1 A 0 A_JumpIf(invoker.EXKick > 0, "SonicEagle");
		KICK A 1 A_PlaySound("sweapons/swordswing", 7);
		KICK BC 1;
		KICK D 1 A_CustomPunch(random(1,16)*24, true, CPF_NOTURN, "SonicKickPuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
		KICK EF 1;
		Stop;
	SonicEagle:
		EAGL A 1 A_PlaySound("sweapons/swordswing", 7);
		EAGL BC 1;
		EAGL D 1 A_CustomPunch(random(1,16)*48, true, CPF_NOTURN, "SonicKickPuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
		EAGL E 1;
		Stop;
	SuperKickAttack:
		TNT1 A 0 A_GiveInventory("KickCooldown", 25);
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 A_PlaySound("sonic/grunt", 8);
		TNT1 A 0 A_JumpIf(invoker.EXKick > 0, "SuperSonicEagle");
		SKIK A 1 
		{
			A_PlaySound("sweapons/shockwave", 7);
			A_FireBullets(27, 9, 100, 5, "GibPuff", 0);
		}
		SKIK BC 1;
		SKIK D 1 A_CustomPunch(random(1,16)*48, true, CPF_NOTURN, "SonicKickPuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
		SKIK E 1;
		Stop;
	SuperSonicEagle:
		SEAG A 1 
		{
			A_PlaySound("sweapons/shockwave", 7);
			A_FireBullets(3, 3, 150, 5, "GibPuff", 0);
		}
		SEAG BC 1;
		SEAG D 1 A_CustomPunch(random(1,16)*96, true, CPF_NOTURN, "SonicKickPuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
		SEAG E 1;
		Stop;
	HyperKickAttack:
		TNT1 A 0 A_GiveInventory("KickCooldown", 25);
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 A_PlaySound("sonic/grunt", 8);
		TNT1 A 0 A_JumpIf(invoker.EXKick > 0, "HyperSonicEagle");
		HKIK A 1 
		{
			A_PlaySound("sweapons/shockwave", 7);
			A_FireBullets(29, 11, 100, 10, "GibPuff", 0);
		}
		HKIK BC 1;
		HKIK D 1 A_CustomPunch(random(1,16)*48, true, CPF_NOTURN, "SonicKickPuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
		HKIK EF 1;
		Stop;
	HyperSonicEagle:
		HEAG A 1 
		{
			A_PlaySound("sweapons/shockwave", 7);
			A_FireBullets(5, 5, 150, 10, "GibPuff", 0);
		}
		HEAG BC 1;
		HEAG D 1 A_CustomPunch(random(1,16)*96, true, CPF_NOTURN, "SonicKickPuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
		HEAG E 1;
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_RELOAD && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_RELOAD) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 5;
		}
	}
}

class AmyKick : CustomInventory
{
	int inuse;
	States
	{
	Use:
		TNT1 A 0 A_Overlay(-2, "TimeCheck");
		TNT1 A 0 A_OverlayOffset(-2, 0, 32);
		Fail;
	TimeCheck:
		TNT1 A 0 A_JumpIf(CountInv("KickCooldown")<1, "KickAttack");
		Stop;
	KickAttack:
		TNT1 A 0 A_GiveInventory("KickCooldown", 25);
		AKIK A 1 A_PlaySound("sweapons/swordswing", 7);
		AKIK BC 1 A_GiveInventory("LegOut", 1);
		AKIK D 1 A_CustomPunch(10, false, CPF_NOTURN, "AmyKickPuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
		AKIK EFG 1;
		TNT1 A 0 A_TakeInventory("LegOut", 1);
		TNT1 A 1 A_SetInventory("KickCooldown", 10);
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_RELOAD && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 8;
		}
	}
}

class SonicThok : CustomInventory
{
	int inuse;
	int counter;
	override void Tick()
	{
		if (owner.A_CheckFloor("Null")) {
			counter = 0;
		}
		Super.Tick();
	}
	States
	{
	Use:
		TNT1 A 0 A_Overlay(-2, "CountCheck");
		TNT1 A 0 A_OverlayOffset(-2, 0, 32);
		Fail;
	CountCheck:
		TNT1 A 0 {
			invoker.counter++;
			return A_JumpIf(invoker.counter <= 1 || CountInv("PowerSuper") || CountInv("PowerHyper"), "Thok");
		}
		Stop;
	Thok:
		TNT1 A 5
		{
			int forward = GetPlayerInput(MODINPUT_FORWARDMOVE);
			int sidem = GetPlayerInput(MODINPUT_SIDEMOVE);
			int input = 0;
			
			A_StartSound("classic/dash", 6);
			A_CustomPunch(40, CPF_PULLIN | CPF_NOTURN, 0, "SonicDashPuff", 100, 0, 0, "ArmorBonus", "sweapons/finalhit");
			
			if (forward > 0) {
				if (!A_CheckFloor("Null")) {
					A_ChangeVelocity(80, 0, 0, CVF_Relative);
				}
				else {
					A_ChangeVelocity(50, 0, 0, CVF_Relative);
				}
				input = 1;
			}
			
			if (sidem < 0) {
				A_ChangeVelocity(0, 50, 0, CVF_Relative);
				A_StartSound("classic/homing", 7, 0, 0.75);
				input = 1;
			}
			
			if (sidem > 0) {
				A_ChangeVelocity(0, -50, 0, CVF_Relative);
				A_StartSound("classic/homing", 7, 0, 0.75);
				input = 1;
			}
			
			if (forward < 0) {
				A_ChangeVelocity(-50, 0, 0, CVF_Relative);
				A_StartSound("classic/homing", 7, 0, 0.75);
				input = 1;
			}
			
			if (!input) {
				if (CountInv("PowerSuper") || CountInv("PowerHyper")) {
					return ResolveState("Boost");
				}
				if (!A_CheckFloor("Null")) {
					A_ChangeVelocity(80, 0, 0, CVF_Relative);
				}
				else {
					A_ChangeVelocity(50, 0, 0, CVF_Relative);
				}
			}
			return ResolveState(null);
		}
		Stop;
	Boost:
		TNT1 A 0 {
			A_AlertMonsters();
			A_StartSound("sweapons/boost", 6);
			A_StartSound("classic/go", 8);
		}
		TNT1 A 0 A_JumpIf(CountInv("PowerHyper"), "HyperBoost");
		BOOS B 15 Bright {
			A_Light(10);
			A_FireBullets(25, 25, 100, 200, "SonicDashPuff", FBF_NOPITCH);
			A_TakeInventory("ChaosEnergy", 25);
			A_ChangeVelocity(200, 0, 0, CVF_Relative|CVF_Replace);
		}
		TNT1 A 0 { A_Light(0); }
		Stop;
	HyperBoost:
		BOOS C 15 Bright {
			A_Light(10);
			A_FireBullets(50, 50, 200, 200, "SonicDashPuff", FBF_NOPITCH);
			A_ChangeVelocity(400, 0, 0, CVF_Relative|CVF_Replace);
		}
		TNT1 A 0 { A_Light(0); }
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_RELOAD && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_RELOAD) && inuse == 0)
		{
			owner.UseInventory(self);
			if (owner.FindInventory("PowerSuper") || owner.FindInventory("PowerHyper")) {
				inuse = 15;
			} else {
				inuse = 6;
			}
		}
	}
}

class ChaosSnap : CustomInventory
{
	int inuse;
	int counter;
	override void Tick()
	{
		if (owner.A_CheckFloor("Null")) {
			counter = 0;
		}
		Super.Tick();
	}
	States
	{
	Use:
		TNT1 A 0 A_Overlay(-2, "CountCheck");
		TNT1 A 0 A_OverlayOffset(-2, 0, 32);
		Fail;
	CountCheck:
		TNT1 A 0 {
			invoker.counter++;
			return A_JumpIf(invoker.counter <= 2 || CountInv("PowerSuper"), "Snap");
		}
		Stop;
	Snap:
		TNT1 A 0 A_GiveInventory("KickCooldown", 25);
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 A_StartSound("shadow/teleport", 7);
		TNT1 A 0
		{
			int buttons = GetPlayerInput(MODINPUT_BUTTONS);
			int input = 0;
			
			if (buttons & BT_FORWARD) {
				A_ChangeVelocity(200, 0, 0, CVF_Relative);
				input = 1;
			}
			
			if (buttons & BT_MOVELEFT) {
				A_ChangeVelocity(0, 200, 0, CVF_Relative);
				input = 1;
			}
			
			if (buttons & BT_MOVERIGHT) {
				A_ChangeVelocity(0, -200, 0, CVF_Relative);
				input = 1;
			}
			
			if (buttons & BT_BACK) {
				A_ChangeVelocity(-200, 0, 0, CVF_Relative);
				input = 1;
			}
			
			if (buttons & BT_CROUCH) {
				ThrustThingZ(0, -200, 0, 0);
				input = 1;
			}
			
			if (!input) {
				ThrustThingZ(0, 200, 0, 0);
			}
		}
		TNT1 A 5;
		TNT1 A 0 A_Stop();
		TNT1 A 5;
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_RELOAD && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_RELOAD) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 10;
		}
	}
}