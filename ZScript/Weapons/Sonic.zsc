enum ECheckSolidFootingFlags
{
    CSF_SOLIDGROUND = 1,
    CSF_SOLIDACTORS = 2,
    
    CSF_ALL = CSF_SOLIDGROUND|CSF_SOLIDACTORS,
}

class BoostEnabledWeapon : Weapon
{
	int BoostSpeed;
	bool BoostCheck;
	action void Boost(int form, int InitialBoostSpeed, int MaxBoostSpeed)
	{
		if (!invoker.BoostCheck) {
			invoker.BoostCheck = true;
			invoker.BoostSpeed = InitialBoostSpeed;
			A_StartSound("sonic/boost", 6);
			A_StartSound("sweapons/boost", 7);
			A_TakeInventory("ChaosEnergy", 5);
		}
		switch (form) {
			default: 
				/* Sonic */
				A_SetMugShotState("Boost");
				break;
			case 1:
				/* Super Sonic */
				A_SetMugShotState("SuperBoost");
				break;
			case 2:
				/* Hyper Sonic */
				A_SetMugShotState("HyperBoost");
				break;
		}
		A_PlaySound("sweapons/boosttrail", 1, 1.0, true);
		A_ChangeVelocity(Cos(Pitch) * invoker.BoostSpeed, 0, Vel.Z, CVF_Relative|CVF_Replace);
		if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP) && !(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP) && A_CheckFloor("Null")) {
			switch (form) {
				default: 
					A_ChangeVelocity(0, 0, 15, CVF_Relative);
					break;
				case 1:
				case 2:
					A_ChangeVelocity(0, 0, 20, CVF_Relative);
					break;
			}
		}
		if (invoker.BoostSpeed <= MaxBoostSpeed) { invoker.BoostSpeed+=5; }
		A_Light(2);
		if (!form) { A_TakeInventory("ChaosEnergy", 2); }
		switch (form) {
			default: 
				A_FireBullets(60, 60, 200, 1, "InvisibleGibPuff", FBF_NORANDOM, 125);
				break;
			case 1:
			case 2:
				A_FireBullets(120, 120, 500, 999, "InvisibleGibPuff", FBF_NORANDOM, 140);
				break;
		}
	}
	action void WallCrash()
	{
		A_StopSound(1);
		invoker.BoostCheck = false;
		int CrashSpeed = ((invoker.BoostSpeed/10)+20)*-1;
		A_ChangeVelocity(CrashSpeed, 0, 0, CVF_Relative|CVF_Replace);
		A_StartSound("sweapons/finalhit", 8);
		DamageThing(invoker.BoostSpeed / 10, 17);
	}
	States
	{
		Ready:
			TNT1 A 1;
			Loop;
		Deselect:
			#### A 1 A_Lower(12);
			Loop;
		Select:
			#### A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0;
		BoostStart:
			TNT1 A 0 A_JumpIf(CountInv("PowerHyper"), "HyperBoost");
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "SuperBoost");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy"), "Boost");
			Goto BoostEnd;
		Boost:
			BOOS A 1 Boost(0, 125, 200);
			TNT1 A 0 A_CheckLOF("WallCrash", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			TNT1 A 0 A_ReFire();
			Goto BoostEnd;
		SuperBoost:
			BOOS B 1 Boost(1, 200, 300);
			TNT1 A 0 A_CheckLOF("BoostEnd", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			TNT1 A 0 A_ReFire();
			Goto BoostEnd;
		HyperBoost:
			BOOS C 1 Boost(2, 300, 350);
			TNT1 A 0 A_CheckLOF("BoostEnd", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			TNT1 A 0 A_ReFire();
			Goto BoostEnd;
		WallCrash:
			TNT1 A 0 A_JumpIf(CountInv("PowerInvulnerable")||!GetCvar("WallCrash"), "BoostEnd");
			TNT1 A 0 WallCrash();
		BoostEnd:
			TNT1 A 0 { invoker.BoostCheck = false; A_StopSound(1); A_Light(0); }
			Goto Ready;
	}
}

class Caliburn : BoostEnabledWeapon 
{
	double oldVelZ;
	override void Tick()
	{
		oldVelZ = vel.z;
		super.Tick();
	}
	action state A_CheckSolidFooting(StateLabel label, int flags = CSF_ALL)
	{
		if (invoker.oldVelZ != vel.z) {
			return null;
		}
		if (abs(pos.z - GetZAt()) <= 1) {
			if (flags & CSF_SOLIDGROUND) {
				return ResolveState(label);
			}
		}
		bool ok; Actor below;
		[ok, below] = TestMobjZ(true);
		if (below) {
			if (flags & CSF_SOLIDACTORS) {
				return ResolveState(label);
			}
		}
		if (vel.z == invoker.oldVelZ && (flags & CSF_SOLIDGROUND)) {
			return ResolveState(label);
		}
		return null;
	}
	action void SwordSwing(bool onright)
	{
		A_PlaySound("sweapons/swordswing", 1);
		if (random(1, 4) == 4) { A_PlaySound("sonic/grunt", 7); }
		if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
			A_PlaySound("sweapons/soulsurge", 6, 0.5);
			if (onright) {
				A_FireProjectile("EnergyBladeRight");
			}
			else {
				A_FireProjectile("EnergyBladeLeft");
			}
		}
	}
	action void SwordSlam()
	{
		A_PlaySound("sweapons/sonicland", 1);
		if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
			A_Explode(280, 600, XF_NOTMISSILE);
			A_PlaySound("sweapons/soulsurge", 6, 0.5);
		}
		else {
			A_Explode(140, 300, XF_NOTMISSILE);
		}
	}
	Default
	{
		Weapon.SelectionOrder 1;
		Weapon.Kickback 1;
		Weapon.BobRangeX 0.5;
		Weapon.BobSpeed 1.5;
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			CALI A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
			TNT1 A 0 A_Gravity;
			Loop;
		Deselect:
			CALI # 1 A_Lower(12);
			Loop;
		Select:
			CALI A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 {
				if (!A_CheckSolidFooting("Null") && GetPlayerInput(MODINPUT_BUTTONS) & BT_CROUCH) {
					return ResolveState("SlamStart");
				}
				return ResolveState(null);
			}
		GroundAttack:
			TNT1 A 0 SwordSwing(false);
			CALI BCDE 1
			{
				if (!(CountInv("PowerSuper")||CountInv("PowerHyper"))) {
					A_SetSpeed(2.5);
					A_CustomPunch(45, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else {
					A_SetSpeed(5);
					A_CustomPunch(140, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			}
			CALI EEE 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			CALI A 0 A_ReFire();
			Goto Ready;
		Hold:
			TNT1 A 0 SwordSwing(true);
			CALI FGHI 1
			{
				if (!CountInv("PowerSuper")||CountInv("PowerHyper")) {
					A_SetSpeed(2.5);
					A_CustomPunch(45, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else {
					A_SetSpeed(5);
					A_CustomPunch(140, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			}
			CALI JJJ 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			CALI A 0 A_ReFire("GroundAttack");
			Goto Ready;
		SlamStart:
			TNT1 A 0 A_PlaySound("sweapons/sonicfalling", 1);
		SlamAttack:
			TNT1 A 0 A_Stop();
			TNT1 A 0 A_ChangeVelocity(0, 0, -500, CVF_Relative|CVF_Replace);
			CALI JKLMN 1
			{
				if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
					A_CustomPunch(70, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else {
					A_CustomPunch(45, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				A_ChangeVelocity(0, 0, -50, CVF_Relative|CVF_Replace);
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			}
			CALI B 0 A_CheckSolidFooting("SlamDone");
			Goto SlamAttack+6;
		SlamDone:
			TNT1 A 0 A_SetSpeed(0);	
			TNT1 A 0 SwordSlam();
			CALI N 10 A_ReFire("AirHold");
			TNT1 A 0 A_SetSpeed(2);
			Goto Ready;
		AirHold:
			CALI N 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire("AirHold");
			TNT1 A 0 A_SetSpeed(2);
			Goto Ready;
		AltFire:
			TNT1 A 0 A_Overlay(-3, "BoostStart");
			Goto Ready;
		Spawn:
			CBRN A -1;
			Stop;
	}
}

class AcceleratedPistol : Weapon
{
	action void AccelFire()
	{
		A_PlaySound("sweapons/pistol", 1);
		if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
			A_FireBullets(0, 0, 1, 24, "NoGibPuff");
		}
		else {
			A_FireBullets(2, 2, -1, 12, "NoGibPuff");
		}
		A_GunFlash();
	}
	action void RecoilBurst()
	{
		A_PlaySound("weapons/rbeam", 1);
		if (CountInv("PowerSuper")||CountInv("PowerHyper") > 0) {
			A_RailAttack(96, 0, 1, "06 b4 00", "fd ff 00", RGF_FULLBRIGHT, 0, "GibPuff", 0, 0, 0, 25, 1.0, 1.0);
			A_ChangeVelocity (Cos(Pitch) * -50, 0, Sin(Pitch) * 50, CVF_Relative);
			A_GiveInventory("ChaosEnergy", 4);
		}
		else {
			A_RailAttack(24, 0, 1, "c5 fe ff", "c5 c6 ff", RGF_FULLBRIGHT, 0, "NoGibPuff", 0, 0, 0, 25, 1.0, 1.0);
			A_ChangeVelocity (Cos(Pitch) * -25, 0, Sin(Pitch) * 20, CVF_Relative);
		}
	}
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.Kickback 1;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 4;
		Weapon.AmmoGive 60;
		Weapon.BobSpeed 1.5;
		Inventory.PickupMessage "Accelerated Pistol";
		Tag "Accelerated Pistol";
		+FORCEPAIN
		+PUFFONACTORS
		+ALWAYSPUFF
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SPIS A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
			Loop;
		Deselect:
			SPIS # 1 A_Lower(12);
			Loop;
		Select:
			SPIS A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 { if (CountInv("PowerSuper")||CountInv("PowerHyper")) { A_GiveInventory("ChaosEnergy", 1); } }
			TNT1 A 0 A_TakeInventory("KickCooldown", 4);
			SPIS A 1 AccelFire();
			SPIS B 1;
			TNT1 A 0 { if (CountInv("PowerHyper")) { A_ReFire(); } }
			SPIS C 1;
			SPIS A 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0 { if (CountInv("PowerSuper")||CountInv("PowerHyper")) { A_GiveInventory("ChaosEnergy", 4); } }
			TNT1 A 0 A_TakeInventory("KickCooldown", 4);
			SPIS B 1 RecoilBurst();
			SPIS CCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 { if (CountInv("PowerHyper")) { A_ReFire(); } }
			SPIS CCCCCCCCCCCCCCCCCCCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Flash:
			SPIF A 1 Bright A_Light1;
			Goto LightDone;
		Spawn:
			PIST A -1;
			Stop;
	}
}

class RapidShotty : Weapon 
{
	action void RapidFire()
	{
		A_PlaySound("sweapons/shardshot", 1);
		if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
			A_FireBullets(18, 10, 20, 4, "BulletPuff");
			A_GunFlash("SuperFlash");
		}
		else {
			A_FireBullets(18, 10, 20, 4, "BulletPuff");
			A_GunFlash();
		}
	}
	action void ForceFire()
	{
		A_PlaySound("sweapons/forceshot", 1);
		A_ChangeVelocity(Cos(Pitch) * -20, 0, Sin(Pitch) * 20, CVF_Relative);
		A_FireBullets(8, 2, 24, 4, "BulletPuff");
		A_GunFlash("ForceFlash");
	}
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse1 16;
		Weapon.AmmoUse2 42;
		Weapon.AmmoGive 64;
		Weapon.Kickback 1000;
		Weapon.BobSpeed 1.5;
		Inventory.PickupMessage "Rapid Shotty";
		Tag "Rapid Shotty";
		+PUFFONACTORS
		+ALWAYSPUFF
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SCTG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			SCTG # 1 {
				A_Lower(12);
				A_StopSound(6);
			}
			Loop;
		Select:
			SCTG A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 A_TakeInventory("KickCooldown", 110);
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper")||CountInv("PowerHyper"), "SuperFire");
			SCTG B 1 RapidFire();
			SCTG BBBBBCCCCCCCCCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SCTG A 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0 { if (CountInv("PowerSuper") || CountInv("PowerHyper")) { A_GiveInventory("ChaosEnergy", 42); } }
			TNT1 A 0 A_TakeInventory("KickCooldown", 60);
			SCTG B 1 ForceFire();
			SCTG BBBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 { if (CountInv("PowerHyper")) { A_ReFire(); } }
			SCTG BBBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 { if (CountInv("PowerSuper")) { A_ReFire(); } }
			SCTG CDE 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SCTG F 1 A_PlaySound("sweapons/forcereload", 6);
			SCTG FFFFFFFFFFFFFFFFFFFFFFFFFFFEDCAAAAAAAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SCTG A 0 A_ReFire();
			Goto Ready;
		SuperFire:
			TNT1 A 0 A_TakeInventory("KickCooldown", 8);
			TNT1 A 0 A_GiveInventory("ChaosEnergy", 16);
			SCTG B 3 RapidFire();
			SCTG C 2;
			TNT1 A 0 { if (CountInv("PowerHyper")) { A_ReFire(); } }
			SCTG C 3;
			SCTG A 0 A_ReFire();
			Goto Ready;
		Flash:
			SCTF A 4 Bright;
			Stop;
		SuperFlash:
			SCTF A 2 Bright;
			Stop;
		ForceFlash:
			SCTF B 4 Bright;
			Stop;
		Spawn:
			SCAT A -1;
			Stop;
	}
}

class ShurikenCrossbow : Weapon 
{
	Default
	{
		Weapon.SelectionOrder 800;
		Weapon.AmmoUse 24;
		Weapon.AmmoGive 100;
		Weapon.Kickback 1;
		Weapon.BobSpeed 1.5;
		Weapon.AmmoType "ChaosEnergy";
		Inventory.PickupMessage "Shuriken Crossbow";
		Tag "Shuriken Crossbow";
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SHRL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			SHRL # 1 A_Lower(12);
			Loop;
		Select:
			SHRL A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 { if (CountInv("PowerSuper")||CountInv("PowerHyper") > 0) { A_GiveInventory("ChaosEnergy", 24); } }
			SHRL B 1 A_FireProjectile("Shuriken", 0, 1);
			TNT1 A 0 { if (CountInv("PowerSuper")||CountInv("PowerHyper")) { A_ReFire(); } }
			SHRL BBBBBBBBBBCDEFG 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		Spawn:
			SURI A -1;
			Stop;
	}
}


class EclipseBlaster : Weapon
{
	action void EclipseFire()
	{
		if (CountInv("PowerHyper")) {
			A_FireProjectile("ChaosEnergyBallEX", 0, 0, 5, 5);
			A_FireProjectile("ChaosEnergyBallEX", 0, 0, -5, 5);
			A_FireProjectile("ChaosEnergyBallEX", 0, 0, 5, -5);
			A_FireProjectile("ChaosEnergyBallEX", 0, 0, -5, -5);
		} else if (CountInv("PowerSuper")) {
			A_FireProjectile("ChaosEnergyBallEX", 0, 0);
		} else {
			A_FireProjectile("ChaosEnergyBall", 0, 1);
		}
	}
	Default
	{
		Weapon.SelectionOrder 1400;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse 4;
		Weapon.AmmoGive 25;
		Weapon.KickBack 100000000;
		Weapon.BobSpeed 1.5;
		+EXTREMEDEATH
		+WEAPON.NOAUTOFIRE
		Inventory.PickupMessage "Eclipse Blaster Mk. V";
		Tag "Eclipse Blaster Mk. V";
	}
	States
	{
		Ready:
			ECBL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			ECBL # 1 A_Lower(12);
			Loop;
		Select:
			ECBL A 1 A_Raise(20);
			Loop;
		Fire:
			ECBL B 1 EclipseFire();
			TNT1 A 0 A_ReFire();
			Goto Ready;
		AltFire:
			ECBL C 1 {
				if ((Health < 300) && CountInv("ChaosEnergy") && !(CountInv("PowerSuper") || CountInv("PowerHyper"))) {
					A_PlaySound("sweapons/healthcharge", 4096);
					A_TakeInventory("ChaosEnergy", 4);
					A_GiveInventory("Health", 8);
					if (Health > 300) { A_SetHealth(300); }
				} else {
					A_PlaySound("sonic/error", 4096);
					return ResolveState("Ready");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire();
			Goto Ready;
		Spawn:
			ECLI A -1;
			Stop;
	}
}

class AirStrikeLauncher : Weapon
{
	Default
	{
		Weapon.SelectionOrder 1500;
		Weapon.AmmoUse 40;
		Weapon.AmmoGive 200;
		Weapon.AmmoType "ChaosEnergy";
		Inventory.PickupMessage "Rocket Rioter";
		Tag "Rocket Rioter";
		Weapon.BobSpeed 1.5;
		Weapon.Kickback 1000;
		+WEAPON.NOAUTOFIRE
		+WEAPON.NOAUTOAIM
		+WEAPON.ALT_AMMO_OPTIONAL
	}
	action void FireRocket(int Amount)
	{
		if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
			int SpreadX, SpreadY, Iterator;
			for (Iterator = 1; Iterator <= Amount; Iterator++) {
				if (A_CheckFloor("Null")) {
					SpreadX = random(-30, 30);
					SpreadY = random(-30, 30);
					A_FireProjectile("ChaosRocket", 0, 0, SpreadX, SpreadY);
				} else {
					SpreadX = random(-60, 60);
					SpreadY = random(-60, 60);
					A_FireProjectile("AirstrikeRocket", 0, 0, SpreadX, SpreadY);
					A_ChangeVelocity(Cos(Pitch) * -10, 0, Sin(Pitch) * 10, CVF_Relative);
				}
			}
		} else {
			if (A_CheckFloor("Null")) {
				A_FireProjectile("ChaosRocket", 0, 1);
			} else {
				A_FireProjectile("AirstrikeRocket", 0, 1);
				A_ChangeVelocity(Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
			}
		}
	}
	States
	{
		Ready:
			MISG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			MISG # 1 A_Lower(12);
			Loop;
		Select:
			MISG A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 A_TakeInventory("KickCooldown", 3);
			TNT1 A 0 {
				if (CountInv("PowerHyper")) {
					FireRocket(10);
				} else {
					FireRocket(5);
				}
			}
			MISG ABB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		AltFire:
			MISG A 1 A_GiveInventory("RemoteDet");
			MISG B 1 A_ReFire();
			MISG A 1 A_TakeInventory("RemoteDet");
			Goto Ready;
		Spawn:
			LAUN A -1;
			Stop;
	}
}