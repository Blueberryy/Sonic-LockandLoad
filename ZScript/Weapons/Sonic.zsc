class SonicAbilities : Weapon
{
	bool BoostCheck;
	bool LightSpeedCheck;
	int HomingCharges;
	Default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 9999999999999;
		Weapon.BobRangeX 0.0;
		Weapon.BobRangeY 0.0;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Sonic the Hedgehog";
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			TNT1 A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			TNT1 AA 0 A_Lower;
			Goto Select;
		Select:
			TNT1 A 1 A_Lower;
			Goto Deselect;
		Fire:
			TNT1 A 0 A_JumpIf(GetCvar("DkgBruTecFpgA"), "AltFire");
			TNT1 A 0 A_JumpIf(invoker.HomingCharges > 40,"LightSpeedAttack");
			TNT1 A 0 A_SetSpeed(0.1);
			TNT1 A 1 A_FireBullets(0, 0, 1, 0, "SonicReticle", FBF_NORANDOMPUFFZ, 1024);
			TNT1 A 0
			{
				A_GiveInventory("PeeloutCheck");
				invoker.HomingCharges++;
				invoker.LightSpeedCheck = false;
			}
			TNT1 A 1 A_ReFire();
		HomingAttack:
			TNT1 A 0 A_PlaySound("sweapons/sdash", 5);
			TNT1 A 0 A_TakeInventory("PeeloutCheck");
			TNT1 A 0 { invoker.HomingCharges = 0; }
			TNT1 A 0 A_SetSpeed(4);
			TNT1 A 0
			{
				if (CountInv("PowerSuper"))
				{
					A_FireBullets(0, 0, 1, random(1,16)*48, "LightAttack", FBF_NORANDOM, 1024);
				}
				else
				{
					A_FireBullets(0, 0, 1, random(1,16)*24, "LightAttack", FBF_NORANDOM, 1024);
				}
			}
			TNT1 A 12 A_ChangeVelocity (Cos(Pitch) * 50, 0, Sin(Pitch) * -20, CVF_Relative);
			Goto Ready;
		LightSpeedAttack:
			TNT1 A 0 A_FireBullets(0, 0, 1, 0, "LightSpeedReticle", FBF_NORANDOMPUFFZ);
			TNT1 A 0 A_SetSpeed(1.5);
			TNT1 A 0 A_TakeInventory("PeeloutCheck");
			TNT1 A 1
			{
				if (!invoker.LightSpeedCheck)
				{
					invoker.LightSpeedCheck = true;
					A_PlaySound("sonic/herewe", 6);
				}
			}
			TNT1 A 0 A_ReFire();
			TNT1 A 0
			{
				invoker.HomingCharges = false;
				invoker.LightSpeedCheck = false;
			}
			TNT1 A 0 A_SetSpeed(8);
			TNT1 A 0 A_PlaySound("sonic/go", 6);
			TNT1 A 0 A_PlaySound("sweapons/sdash", 7);
			TNT1 A 0 
			{
				if (CountInv("PowerSuper"))
				{
					A_FireBullets(0, 0, 20, random(1,16)*48, "LightAttack", FBF_NORANDOM);
				}
				else
				{
					A_FireBullets(0, 0, 20, random(1,16)*24, "LightAttack", FBF_NORANDOM);
				}
			}
			TNT1 A 1 A_ChangeVelocity (Cos(Pitch) * 260, 0, Sin(Pitch) * -260, CVF_Relative);
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicKick");
			Goto Ready;
		AltFire:
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper") > 0, "SuperBoost");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") > 0, "Boost");
			TNT1 A 0 A_Gravity;
			TNT1 A 0 { invoker.BoostCheck = false; }
			TNT1 A 0 A_StopSound(1);
			Goto Ready;
		Boost:
			TNT1 A 0
			{
				if (!invoker.BoostCheck)
				{
					invoker.BoostCheck = true;
					A_StartSound("sonic/boost", 6);
					A_StartSound("sweapons/boost", 7);
				}
			}
			TNT1 A 0 A_SetMugShotState("Boost");
			TNT1 A 0 A_PlaySound("sweapons/boosttrail", 1, 1.0, true);
			TNT1 A 0
			{
				if (!GetCvar("DkgBruTecFpgA"))
				{
					if (GetCvar("VerticalBoost"))
					{
						A_ChangeVelocity (Cos(Pitch) * 20, 0, Sin(Pitch) * -20, CVF_Relative);
					}
					else
					{
						A_LowGravity();
						A_Recoil(-40);
					}
				}
			}
			TNT1 A 0 A_Light(2);
			TNT1 A 0 A_TakeInventory("ChaosEnergy", 1);
			BOOS A 1 A_CustomPunch(5, false, CPF_NOTURN, "GibPuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
			TNT1 A 0 A_ReFire();
			TNT1 A 0
			{
				if (!GetCvar("VerticalBoost"))
				{
					A_Gravity();
				}
			}
			TNT1 A 0 { invoker.BoostCheck = false; }
			TNT1 A 0 A_StopSound(1);
			Goto Ready;
		SuperBoost:
			TNT1 A 0
			{
				if (!invoker.BoostCheck)
				{
					invoker.BoostCheck = true;
					A_StartSound("sonic/boost", 6);
					A_StartSound("sweapons/boost", 7);
				}
			}
			TNT1 A 0 A_SetMugShotState("SuperBoost");
			TNT1 A 0 A_PlaySound("sweapons/boosttrail", 1, 1.0, true);
			TNT1 A 0
			{
				if (GetCvar("VerticalBoost"))
				{
					A_ChangeVelocity (Cos(Pitch) * 30, 0, Sin(Pitch) * -20, CVF_Relative);
				}
				else
				{
					A_LowGravity();
					A_Recoil(-60);
				}
			}
			TNT1 A 0 A_Light(2);
			BOOS B 1 A_CustomPunch(999, false, CPF_NOTURN, "GibPuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
			TNT1 A 0 A_ReFire();
			TNT1 A 0
			{
				if (!GetCvar("VerticalBoost"))
				{
					A_Gravity();
				}
			}
			TNT1 A 0 { invoker.BoostCheck = false; }
			TNT1 A 0 A_StopSound(1);
			Goto Ready;
		Spawn:
			SONC A -1;
			Stop;
	}
} 
class Caliburn : Weapon 
{
	bool BoostCheck;
	action void SwordSwing(bool onright)
	{
		A_PlaySound("sweapons/swordswing", 1);
		A_PlaySound("sonic/grunt", 7);
		if (CountInv("PowerSuper")) {
			A_PlaySound("sweapons/soulsurge", 6, 0.5);
			if (onright) {
				A_FireProjectile("EnergyBladeRight");
			}
			else {
				A_FireProjectile("EnergyBladeLeft");
			}
		}
	}
	action void SwordSlam()
	{
		A_PlaySound("sweapons/sonicland", 7);
		if (CountInv("PowerSuper")) {
			A_Explode(280, 600, XF_NOTMISSILE);
			A_PlaySound("sweapons/soulsurge", 6, 0.5);
		}
		else {
			A_Explode(140, 300, XF_NOTMISSILE);
		}
	}
	Default
	{
		Weapon.SelectionOrder 1;
		Weapon.Kickback 1;
		Inventory.PickupMessage "\c[SonicBlue]I like sword -- that's a personal weapon!\n\c[CaliburnGold]*sigh*";
		Inventory.PickupSound "spickup/sonic";
		Weapon.BobRangeX 0.5;
		Weapon.BobSpeed 1.5;
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			CALI A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			TNT1 A 0 A_Gravity;
			Loop;
		Deselect:
			TNT1 AA 0 A_Lower;
			CALI A 1 A_Lower;
			Goto Deselect+1;
		Select:
			TNT1 AA 0 A_Raise;
			CALI A 1 A_Raise;
			Goto Select+1;
		Fire:
			TNT1 A 0 A_JumpIf(GetCvar("DkgBruTecFpgA"), "AirStart");
			TNT1 A 0 A_CheckFloor("GroundAttack");
			Goto AirStart;
		GroundAttack:
			TNT1 A 0 SwordSwing(false);
			CALI BCDE 1
			{
				if (!CountInv("PowerSuper")) {
					A_SetSpeed(2.5);
					A_CustomPunch(45, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else {
					A_SetSpeed(5);
					A_CustomPunch(140, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
			}
			CALI E 5;
			CALI A 0 A_ReFire();
			Goto Ready;
		AirStart:
			TNT1 A 0 A_PlaySound("sweapons/sonicfalling", 7);
		AirAttack:
			TNT1 A 0 A_Stop();
			TNT1 A 0 ThrustThingZ(0, 40, 1, 1);
			CALI JKLMN 1
			{
				if (CountInv("PowerSuper")) {
					A_CustomPunch(70, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else {
					A_CustomPunch(45, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				ThrustThingZ(0, 5, 1, 1);
			}
			CALI B 0 A_CheckFloor("AirDone");
			Goto AirAttack+6;
		AirDone:
			TNT1 A 0 A_SetSpeed(0);
			TNT1 A 0 SwordSlam();
			CALI N 10 A_ReFire("AirHold");
			TNT1 A 0 A_SetSpeed(2);
			Goto Ready;
		AirHold:
			CALI N 1;
			TNT1 A 0 A_ReFire("AirHold");
			TNT1 A 0 A_SetSpeed(2);
			Goto Ready;
		Hold:
			TNT1 A 0 SwordSwing(true);
			CALI FGHI 1
			{
				if (CountInv("PowerSuper")) {
					A_SetSpeed(2.5);
					A_CustomPunch(45, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else {
					A_SetSpeed(5);
					A_CustomPunch(140, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
			}
			CALI J 5;
			CALI A 0 A_ReFire("GroundAttack");
			Goto Ready;
		AltFire:
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper") > 0, "SuperBoost");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") > 0, "Boost");
			TNT1 A 0 A_PlaySound("sonic/error", 4096);
			TNT1 A 0 A_Gravity();
			TNT1 A 0 { invoker.BoostCheck = false; }
			TNT1 A 0 A_StopSound(1);
			Goto Ready;
		Boost:
			TNT1 A 0
			{
				if (!invoker.BoostCheck)
				{
					invoker.BoostCheck = true;
					A_StartSound("sonic/boost", 6);
					A_StartSound("sweapons/boost", 7);
				}
			}
			TNT1 A 0 A_SetMugShotState("Boost");
			TNT1 A 0 A_PlaySound("sweapons/boosttrail", 1, 1.0, true);
			TNT1 A 0
			{
				if (!GetCvar("DkgBruTecFpgA"))
				{
					if (GetCvar("VerticalBoost"))
					{
						A_ChangeVelocity (Cos(Pitch) * 20, 0, Sin(Pitch) * -20, CVF_Relative);
					}
					else
					{
						A_LowGravity();
						A_Recoil(-40);
					}
				}
			}
			TNT1 A 0 A_Light(2);
			TNT1 A 0 A_TakeInventory("ChaosEnergy", 1);
			CBOO A 1 A_CustomPunch(15, false, CPF_NOTURN, "GibPuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
			TNT1 A 0 A_ReFire();
			TNT1 A 0
			{
				if (!GetCvar("VerticalBoost"))
				{
					A_Gravity();
				}
			}
			TNT1 A 0 { invoker.BoostCheck = false; }
			TNT1 A 0 A_StopSound(1);
			Goto Ready;
		SuperBoost:
			TNT1 A 0
			{
				if (!invoker.BoostCheck)
				{
					invoker.BoostCheck = true;
					A_StartSound("sonic/boost", 6);
					A_StartSound("sweapons/boost", 7);
				}
			}
			TNT1 A 0 A_SetMugShotState("SuperBoost");
			TNT1 A 0 A_PlaySound("sweapons/boosttrail", 1, 1.0, true);
			TNT1 A 0
			{
				if (GetCvar("VerticalBoost"))
				{
					A_ChangeVelocity (Cos(Pitch) * 30, 0, Sin(Pitch) * -20, CVF_Relative);
				}
				else
				{
					A_LowGravity();
					A_Recoil(-60);
				}
			}
			TNT1 A 0 A_Light(2);
			CBOO B 1 A_CustomPunch(999, false, CPF_NOTURN, "GibPuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
			TNT1 A 0 A_ReFire();
			TNT1 A 0
			{
				if (!GetCvar("VerticalBoost"))
				{
					A_Gravity();
				}
			}
			TNT1 A 0 { invoker.BoostCheck = false; }
			TNT1 A 0 A_StopSound(1);
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicKick");
			Goto Ready;
		Spawn:
			CBRN A -1;
			Stop;
	}
}

class AcceleratedPistol : Weapon
{
	action void AccelFire()
	{
		A_PlaySound("sweapons/pistol");
		if (CountInv("PowerSuper")) {
			A_FireBullets(0, 0, 1, 24, "NoGibPuff");
		}
		else {
			A_FireBullets(2, 2, -1, 12, "NoGibPuff");
		}
		A_GunFlash();
	}
	action void RecoilBurst()
	{
		A_PlaySound("weapons/rbeam");
		if (CountInv("PowerSuper") > 0) {
			A_RailAttack(96, 0, 1, "06 b4 00", "fd ff 00", RGF_FULLBRIGHT, 0, "GibPuff", 0, 0, 0, 25, 1.0, 1.0);
			A_ChangeVelocity (Cos(Pitch) * -50, 0, Sin(Pitch) * 50, CVF_Relative);
			A_GiveInventory("ChaosEnergy", 4);
		}
		else {
			A_RailAttack(24, 0, 1, "c5 fe ff", "c5 c6 ff", RGF_FULLBRIGHT, 0, "NoGibPuff", 0, 0, 0, 25, 1.0, 1.0);
			if (GetCvar("DkgBruTecFpgA")) {
				A_ChangeVelocity (Cos(Pitch) * 25, 0, Sin(Pitch) * -25, CVF_Relative);
			}
			else {
				A_ChangeVelocity (Cos(Pitch) * -25, 0, Sin(Pitch) * 20, CVF_Relative);
			}
		}
	}
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.Kickback 1;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 4;
		Weapon.AmmoGive 60;
		Weapon.BobSpeed 1.5;
		Inventory.PickupMessage "Picked up a pistol.";
		Tag "Accelerated Pistol";
		+FORCEPAIN
		+PUFFONACTORS
		+ALWAYSPUFF
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SPIS A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			TNT1 AA 0 A_Lower;
			SPIS A 1 A_Lower;
			Goto Deselect+1;
		Select:
			TNT1 AA 0 A_Raise;
			SPIS A 1 A_Raise;
			Goto Select+1;
		Fire:
			TNT1 A 0
			{
				if (CountInv("PowerSuper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 1);
				}
			}
			TNT1 A 0 A_TakeInventory("KickCooldown", 4);
			SPIS A 1 AccelFire();
			SPIS BCA 1;
			SPIS A 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0 A_TakeInventory("KickCooldown", 4);
			SPIS A 0 RecoilBurst();
			SPIS BC 1;
			SPIS C 15;
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicKick");
			Goto Ready;
		Flash:
			SPIF A 1 Bright A_Light1;
			Goto LightDone;
		Spawn:
			PIST A -1;
			Stop;
	}
}

class RapidShotty : Weapon 
{
	action void RapidFire()
	{
		A_PlaySound("sweapons/shardshot", 1);
		
		if (CountInv("PowerSuper")) {
			A_FireBullets(18, 10, 20, 4, "BulletPuff");
			A_GunFlash("SuperFlash");
		}
		else {
			A_FireBullets(18, 10, 20, 4, "BulletPuff");
			A_GunFlash();
		}
	}
	action void ForceFire()
	{
		A_PlaySound("sweapons/forceshot");
		A_ChangeVelocity(Cos(Pitch) * -20, 0, Sin(Pitch) * 20, CVF_Relative);
		A_FireBullets(8, 2, 24, 4, "BulletPuff");
		A_GunFlash("ForceFlash");
	}
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse1 16;
		Weapon.AmmoUse2 42;
		Weapon.AmmoGive 64;
		Weapon.Kickback 1000;
		Weapon.BobSpeed 1.5;
		Inventory.PickupMessage "\c[SonicBlue]I'm runnin' circles around ya!";
		Tag "Rapid Shotty";
		+PUFFONACTORS
		+ALWAYSPUFF
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SCTG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			TNT1 AA 0 A_Lower;
			SCTG A 1 A_Lower;
			Goto Deselect+1;
		Select:
			TNT1 AA 0 A_Raise;
			SCTG A 1 A_Raise;
			Goto Select+1;
		Fire:
			TNT1 A 0 A_TakeInventory("KickCooldown", 110);
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper") > 0, "SuperFire");
			SCTG B 6 RapidFire();
			SCTG C 4;
			SCTG C 6;
			SCTG A 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0 A_TakeInventory("KickCooldown", 60);
			SCTG B 12 ForceFire();
			SCTG A 0 { if (CountInv("PowerSuper") > 0) { A_GiveInventory("ChaosEnergy", 42); A_ReFire(); } }
			SCTG CDE 1;
			SCTG F 28 A_PlaySound("sweapons/forcereload", 6);
			SCTG EDC 1;
			SCTG A 14;
			SCTG A 0 A_ReFire();
			Goto Ready;
		SuperFire:
			TNT1 A 0 A_TakeInventory("KickCooldown", 8);
			TNT1 A 0 A_GiveInventory("ChaosEnergy", 16);
			SCTG B 3 RapidFire();
			SCTG C 2;
			SCTG C 3;
			SCTG A 0 A_ReFire();
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicKick");
			Goto Ready;
		Flash:
			SCTF A 4 Bright;
			Stop;
		SuperFlash:
			SCTF A 2 Bright;
			Stop;
		ForceFlash:
			SCTF B 4 Bright;
			Stop;
		Spawn:
			SCAT A -1;
			Stop;
	}
}

class ShurikenCrossbow : Weapon 
{
	Default
	{
		Weapon.SelectionOrder 800;
		Weapon.AmmoUse 24;
		Weapon.AmmoGive 100;
		Weapon.Kickback 1;
		Weapon.BobSpeed 1.5;
		Weapon.AmmoType "ChaosEnergy";
		Inventory.PickupMessage "\c[SonicBlue]Is that a crossbow that fires shurikens?! Awesome!!";
		Tag "Shuriken Crossbow";
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SHRL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			TNT1 AA 0 A_Lower;
			SHRL A 1 A_Lower;
			Goto Deselect+1;
		Select:
			TNT1 AA 0 A_Raise;
			SHRL A 1 A_Raise;
			Goto Select+1;
		Fire:
			TNT1 A 0
			{
				if (CountInv("PowerSuper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 24);
				}
			}
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper") > 0, "SuperFire");
			SHRL B 12 A_FireProjectile("Shuriken", 0, 1);
			SHRL CDEFG 1;
			TNT1 A 0 A_ReFire();
			Goto Ready;
		SuperFire:
			SHRL B 3 A_FireProjectile("Shuriken", 0, 1);
			TNT1 A 1 A_ReFire();
			SHRL CDEFG 1;
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicKick");
			Goto Ready;
		Spawn:
			SURI A -1;
			Stop;
	}
}


class EclipseBlaster : Weapon
{
	action void EclipseFire()
	{
		if (CountInv("PowerSuper")) {
			A_FireProjectile("ChaosEnergyBallEX", 0, 0);
		}
		else {
			A_FireProjectile("ChaosEnergyBall", 0, 1);
		}
	}
	Default
	{
		Weapon.SelectionOrder 1400;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse 4;
		Weapon.AmmoGive 25;
		Weapon.KickBack 100000000;
		Weapon.BobSpeed 1.5;
		+EXTREMEDEATH
		+WEAPON.NOAUTOFIRE
		Inventory.PickupMessage "\c[SonicBlue]The Eclipse Blaster Mk. V, the ultimate in plasma weaponry!";
		Tag "Eclipse Blaster Mk. V";
	}
	States
	{
		Ready:
			ECBL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			TNT1 AA 0 A_Lower;
			ECBL A 1 A_Lower;
			Goto Deselect+1;
		Select:
			TNT1 AA 0 A_Raise;
			ECBL A 1 A_Raise;
			Goto Select+1;
		Fire:
			ECBL B 1 EclipseFire();
			TNT1 A 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") > 0, "RingCheck");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") < 1, "Error");
		RingCheck:
			TNT1 A 0 A_JumpIf(Health > 299, "Error");
			TNT1 A 0 A_JumpIf(Health < 300, "ChaosHeal");
		Error:
			TNT1 A 0 A_PlaySound("sonic/error", 4096);
			Goto Ready;
		ChaosHeal:
			ECBL C 0 A_PlaySound("sweapons/healthcharge", 4096);
			ECBL C 0 A_TakeInventory("ChaosEnergy", 8);
			ECBL C 1 A_GiveInventory("Health", 4);
			TNT1 A 0 { if (Health > 300) { A_SetHealth(300); } }
			TNT1 A 0 A_ReFire();
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicKick");
			Goto Ready;
		Spawn:
			ECLI A -1;
			Stop;
	}
}

class AirStrikeLauncher : Weapon
{
	Default
	{
		Weapon.SelectionOrder 1500;
		Weapon.AmmoUse 40;
		Weapon.AmmoGive 200;
		Weapon.AmmoType "ChaosEnergy";
		Inventory.PickupMessage "\c[SonicBlue]Time for some sick air strikes!";
		Tag "Rocket Rioter";
		Weapon.BobSpeed 1.5;
		Weapon.Kickback 1000;
		+WEAPON.NOAUTOFIRE
		+WEAPON.NOAUTOAIM
		+WEAPON.ALT_AMMO_OPTIONAL
	}
	States
	{
		Ready:
			MISG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			TNT1 AA 0 A_Lower;
			MISG A 1 A_Lower;
			Goto Deselect+1;
		Select:
			TNT1 AA 0 A_Raise;
			MISG A 1 A_Raise;
			Goto Select+1;
		Fire:
			TNT1 A 0 A_TakeInventory("KickCooldown", 3);
			TNT1 A 0 A_CheckFloor("StandardRocket");
			TNT1 A 0 A_Jump(256, "AirstrikeRocket");
			Goto Ready;
		StandardRocket:
			MISG A 0 A_FireProjectile("ChaosRocket", 0, 1);
			TNT1 A 0
			{
				if (CountInv("PowerSuper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 40);
					A_FireProjectile("ChaosRocket", 0, 0, -10);
					A_FireProjectile("ChaosRocket", 0, 0, 10);
					A_FireProjectile("ChaosRocket", 0, 0, 0, -10);
					A_FireProjectile("ChaosRocket", 0, 0, 0, 10);
				}
			}
			MISG A 1;
			MISG B 2;
			Goto Ready;
		AirstrikeRocket:
			MISG A 0 A_FireProjectile("AirstrikeRocket", 0, 1);
			TNT1 A 0
			{
				if (CountInv("PowerSuper"))
				{
					A_GiveInventory("ChaosEnergy", 40);
					A_FireProjectile("AirstrikeRocket", 0, 0, -10);
					A_FireProjectile("AirstrikeRocket", 0, 0, 10);
					A_FireProjectile("AirstrikeRocket", 0, 0, 0, -10);
					A_FireProjectile("AirstrikeRocket", 0, 0, 0, 10);
				}
			}
			MISG A 0 A_ChangeVelocity (Cos(Pitch) * -10, 0, Sin(Pitch) * 10, CVF_Relative);
			MISG A 1;
			MISG B 2;
			Goto Ready;
		AltFire:
			MISG A 1 A_GiveInventory("RemoteDet");
			MISG B 1 A_ReFire();
			MISG A 1 A_TakeInventory("RemoteDet");
		Reload:
			TNT1 A 0 A_GiveInventory("SonicKick");
			Goto Ready;
		Spawn:
			LAUN A -1;
			Stop;
	}
}