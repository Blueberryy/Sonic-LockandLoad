class ShadowAbilities : Weapon
{
	Default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 9999999999999;
		Weapon.BobRangeX 0.0;
		Weapon.BobRangeY 0.0;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Shadow the Hedgehog";
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			TNT1 A 1 A_WeaponReady();
			Loop;
		Deselect:
			TNT1 AA 0 A_Lower;
			Goto Select;
		Select:
			TNT1 A 1 A_Lower;
			Goto Deselect;
		Fire:
			TNT1 A 0 A_PlaySound("sweapons/swordswing", 1);
			DPNR ABC 1;
			DPNR D 2 A_CustomPunch(random(1,64)*15, true, CPF_NOTURN, "ShadowMeleeAtk", 95, 0, 0, "ArmorBonus", "sweapons/finalhit");
			DPNR CBA 1;
			TNT1 A 2;
			Goto Ready;
		AltFire:
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") < 2, "Ready");
			SARM ABC 1;
			SARM D 6 {
				A_PlaySound("sweapons/chaosspear", CHAN_WEAPON);
				if (CountInv("PowerSuper")) {
					A_FireProjectile("ChaosSpearEX");
				}
				else {
					A_FireProjectile("ChaosSpear");
					A_TakeInventory("ChaosEnergy", 2);
				}
			}
			TNT1 A 0 { if (CountInv("PowerSuper")) { A_ReFire(); } }
			SARM CBA 1;
			TNT1 A 5;
			Goto Ready;
		Spawn:
			SHAD A -1;
			Stop;
	}
}

class HighShovel : Weapon
{
	Default
	{
		Weapon.SelectionOrder 1400;
		Weapon.KickBack 1500;
		Tag "High Shovel";
		Inventory.PickupMessage "\c[ShadowRedBlack]High shovel!";
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SHOV A 1 A_WeaponReady();
			Loop;
		Deselect:
			SHOV A 1 A_Lower;
			Loop;
		Select:
			SHOV A 1 A_Raise;
			Loop;
		Fire:
			SHOV D 1;
			TNT1 A 0 A_ReFire();
			SHOV A 1 A_PlaySound("sweapons/swordswing", 1);
			SHOV B 1;
			SHOV C 10 {
				if (CountInv("PowerSuper")) {
					A_CustomPunch(600, 0, 0, "ShadowMeleeAtk", 75, 0, 0, "ArmorBonus", "sweapons/shovelbonk");
				}
				else {
					A_CustomPunch(300, 0, 0, "ShadowMeleeAtk", 75, 0, 0, "ArmorBonus", "sweapons/shovelbonk");
				}
			}
			SHOV B 1;
			SHOV A 1;
			Goto Ready;
		Spawn:
			SHVL A -1;
			Stop;
	}
}

class DarkAssault : Weapon
{
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 20;
		Weapon.AmmoGive 20;
		Weapon.KickBack 500;
		Weapon.AmmoType "ChaosEnergy";
		AttackSound "weapons/shotgf";
		Tag "Dark Assaulter";
		Inventory.PickupMessage "\c[ShadowRedBlack]Looks like this shotgun still works.";
	}
	States
	{
		Ready:
			AA12 A 1 A_WeaponReady();
			Loop;
		Deselect:
			AA12 A 1 A_Lower;
			Loop;
		Select:
			AA12 A 1 A_Raise;
			Loop;
		Fire:
			AA12 A 2;
			AA12 A 0 { if (CountInv("PowerSuper")) { A_GiveInventory("ChaosEnergy", 20); } }
			AA12 A 0 A_FireBullets(6, 2, 8, 9, "BulletPuff");
			AA12 A 0 A_PlaySound("sweapons/darkshotty", CHAN_WEAPON);
			AA12 A 0 {
				if (CountInv("PowerSuper")) { A_GunFlash("SuperFlash"); } 
				else { A_GunFlash(); }
			}
			AA12 A 3 { if (CountInv("PowerSuper")) { A_ReFire(); } }
			AA12 B 2;
			Goto Ready;
		Flash:
			AAFL A 2 Bright A_Light1;
			Goto LightDone;
		SuperFlash:
			AAFL A 1 Bright A_Light1;
			Goto LightDone;
		Spawn:
			SHOT A -1;
			Stop;
	}
}

class ChaosEmerald : Weapon
{
	Default
	{
		Weapon.SelectionOrder 3700;
		Weapon.AmmoType "ChaosEnergy";
		Weapon.AmmoUse 400;
		Inventory.PickupMessage "\c[ShadowRedBlack]That damn 4th Chaos Emerald!";
		Tag "Chaos Emerald";
		+WEAPON.AMMO_OPTIONAL
	}
	States
	{
		Ready:
			CARM A 1 A_WeaponReady();
			TNT1 A 0
			{
				if (!CountInv("Damn4thChaos")) {
					A_GiveInventory("Damn4thChaos");
					ACS_NamedExecute("Damn4thChaosEmerald");
				}
				if (!CountInv("PowerSuper") && !CountInv("Charging") && CountInv("ChaosEnergy") < 401) {
					A_GiveInventory("ChaosEnergy", 1);
					if (CountInv("ChaosEnergy") > 400) { A_SetInventory("ChaosEnergy", 400); }
				}
			}
			Loop;
		Deselect:
			CARM AA 0 A_Lower;
			Goto Select;
		Select:
			CARM A 1 A_Lower;
			Goto Deselect;
		Fire:
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "AFire");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") < 400, "Error");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") >= 400, "AFire");
			Goto Ready;
		AFire:
			TNT1 A 0 A_PlaySound("shadow/cgrunt", 2);
			CARM A 1 {
				if (CountInv("PowerSuper")) { A_FireProjectile("SuperChaosEnergyBall", 0, false); }
				else { A_FireProjectile("SuperChaosEnergyBall", 0, true); }
			}
			CARM BCDE 1;
			CARM E 10;
			CARM DCB 1;
			TNT1 A 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") > 15, "RingCheck");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") < 1, "Error");
			Goto Ready;
		RingCheck:
			TNT1 A 0 A_JumpIf(Health > 299, "Error");
			TNT1 A 0 A_JumpIf(Health < 299, "ChaosCharge");
			Goto Ready;
		Error:
			TNT1 A 0 A_TakeInventory("Charging");
			TNT1 A 0 A_PlaySound("shadow/error", 4096);
			Goto Ready;
		ChaosCharge:
			TNT1 A 0 A_GiveInventory("Charging");
			TNT1 A 0 A_PlaySound("sweapons/healthcharge", 4096);
			CARM F 1 A_TakeInventory("ChaosEnergy", 5);
			TNT1 A 0 A_GiveInventory("Health", 15);
			TNT1 A 0 { if (Health > 300) { A_SetHealth(300); } }
			TNT1 A 0 A_ReFire("AltFire");
			TNT1 A 0 A_TakeInventory("Charging");
			Goto Ready;
		Spawn:
			CHSM G -1;
			Stop;
	}
}

class ShadowKnife : Weapon
{
	Default
	{
		Weapon.SelectionOrder 3800;
		Weapon.KickBack 0;
		Inventory.PickupSound "theycant/trollyouif";
		Inventory.PickupMessage "\c[ShadowRedBlack]They cant troll you if there dead!";
		Tag "Troll Slaiying Knife";
		+WEAPON.MELEEWEAPON
	}
	States
	{
		Ready:
			KNIF A 1 A_WeaponReady;
			Loop;
		Deselect:
			KNIF A 1 A_Lower;
			Loop;
		Select:
			KNIF A 1 A_Raise;
			Loop;
		Fire:
			KNIF B 2;
			KNIF C 2;
			KNIF D 3;
			KNIF E 6 A_CustomPunch(6900, true, 0, "ShadowMeleeAtk", 64, 0, 0, "ArmorBonus", "sonicdoom/finalhit");
			KNIF C 2;
			KNIF B 5 A_ReFire();
			Goto Ready;
		Spawn:
			SLAI Y -1;
			Stop;
	}
}

class QuadShotty : Weapon
{
	Default
	{
		Weapon.SelectionOrder 400;
		Weapon.AmmoUse 40;
		Weapon.AmmoGive 160;
		Weapon.AmmoType "ChaosEnergy";
		Inventory.PickupMessage "\c[ShadowRedBlack]Too heavy? No problem.";
		Tag "Quarternary Decimator";
	}
	States
	{
		Ready:
			SHT4 A 1 A_WeaponReady();
			Loop;
		Deselect:
			SHT4 A 1 A_Lower;
			Loop;
		Select:
			SHT4 A 1 A_Raise;
			Loop;
		Fire:
			SHT4 A 3;
			SHT4 A 0 
			{
				A_FireBullets(12, 9, 60, 6, "BulletPuff");
				A_PlaySound("weapons/sshotf", CHAN_WEAPON);
				if (CountInv("PowerSuper")) { A_GiveInventory("ChaosEnergy", 40); }
			}
			SHT4 B 8 A_GunFlash();
			SHT4 B 16 { if (CountInv("PowerSuper")) { A_ReFire(); } }
			SHT4 A 4 A_PlaySound("weapons/sshotl");
			SHT4 C 10 A_PlaySound("weapons/sshotc");
			TNT1 A 0 A_ReFire();
			Goto Ready;
		Flash:
			SH4F A 4 Bright A_Light1;
			Goto LightDone;
		Spawn:
			SGN2 A -1;
			Stop;
	}
}

Class DualRockets : Weapon
{
	Default
	{
		Weapon.AmmoType "ChaosEnergy";
		Weapon.AmmoUse 32;
		Weapon.AmmoGive 128;
		Inventory.PickupMessage "\c[Shadow]Prepare to be assimilated!";
		Tag "Dual Assimilator";
		+Weapon.Explosive
		+Weapon.NoAutoFire
	}
	States
	{
		Ready:
			DGLG A 1 A_WeaponReady();
			Loop;
		Deselect:
			DGLG A 1 A_Lower();
			Loop;
		Select:
			DGLG A 1 A_Raise();
			Loop;
		Fire:
			DGLG A 3;
			DGLG B 7 Bright
			{
				if (CountInv("PowerSuper")) {
					A_FireProjectile("DuellingRocket", -3, 0,  3);
					A_FireProjectile("DuellingRocket", 3, 0, -3);
					A_FireProjectile("DuellingRocket", -5, 0,  5);
					A_FireProjectile("DuellingRocket", 5, 0, -5);
				} else {
					A_FireProjectile("DuellingRocket", -3, 1,  3);
					A_FireProjectile("DuellingRocket", 3, 1, -3);
				}
			}
			DGLG A 15;
			Goto Ready;
		Spawn:
			DOUG A -1;
			Stop;
	}
}