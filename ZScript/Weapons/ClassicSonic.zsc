class ClassicAbilities : Weapon replaces Fist
{
	bool PeeloutCheck;
	int SpinCharges;
	int SpinDamageMultiplier;
	int ShweeDelay;
	Default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 10;
		Tag "Sonic the Hedgehog";
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			TNT1 A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			TNT1 A 1 A_Lower;
			Loop;
		Select:
			TNT1 A 1 A_Raise;
			Loop;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicThok");
			Goto Ready;
		Fire:
			PUNG B 1;
			PUNG C 1
			{
				if (CountInv("PowerHyper"))
				{
					A_CustomPunch(160, false, 0, "InvisiblePuff", 86, 0, 0, "ArmorBonus", "sweapons/finalhit");
					A_FireProjectile("ChaosEnergyBallEX", 0, false);
				}
				else if (CountInv("PowerSuper"))
				{
					A_CustomPunch(40, false, 0, "InvisiblePuff", 86, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else
				{
					A_CustomPunch(4, false, 0, "InvisiblePuff", 86, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
			}
			PUNG D 1;
			PUNG C 1;
			PUNG B 1 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0 {
				int buttons = GetPlayerInput(MODINPUT_BUTTONS);
				if (buttons & BT_CROUCH && A_CheckFloor("Null")) {
					invoker.ShweeDelay = 10;
					return ResolveState("SpinCharge");
				}
				else
				{
					if (random[HereWeGo](1, 2) == 1) {
						A_PlaySound("classic/driftline", 7);
					}
					return ResolveState("Drift");
				}
				return ResolveState(null);
			}
			// intentional passthrough
		Drift:
			TNT1 A 0 {
				A_ClearOverlays(0, 0);
				A_PlaySound("sweapons/drift", 2);
				A_Light(2);
				if (A_CheckFloor("Drift")) {
					A_Recoil(-12); // on the ground
				} else {
					A_Recoil(-6); // in the air
				}
			}
			TNT1 A 0 {
				if (CountInv("PowerSuper") < 1 && CountInv("PowerHyper") < 1) {
					A_GiveInventory("ChaosEnergy");
				}
			}
			SPIN A 1 {
				if (CountInv("PowerSuper") > 0) {
					A_SetSpeed(8);
					A_CustomPunch(4, false, 0, "LightAttack", 86, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else if (CountInv("PowerHyper") > 0) {
					A_SetSpeed(12);
					A_CustomPunch(8, false, 0, "LightAttack", 86, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else {
					A_SetSpeed(4);
					A_CustomPunch(2, false, 0, "LightAttack", 64, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
			}
			TNT1 A 0 A_ReFire("Drift");
			TNT1 A 0 A_StopSound(2);
			TNT1 A 0 A_Light(0);
			Goto Ready;
		SpinCharge:
			TNT1 A 1 {
				A_OverlayFlags(9, PSPF_ADDWEAPON, true);
				A_Overlay(9, "SpinAnim", true);
				invoker.PeeloutCheck = true;
				if (invoker.SpinCharges > 30) { invoker.ShweeDelay = 3; }
				if (invoker.SpinCharges < 1 || invoker.SpinCharges % invoker.ShweeDelay == 0) {
					A_PlaySound("sweapons/peelout", 5);
				}
				invoker.SpinCharges++;
				A_Light(3);
			}
			TNT1 A 0 A_SetSpeed(0.1);
			TNT1 A 1 A_ReFire;
			TNT1 A 0 A_ClearOverlays(0, 0);
			TNT1 A 0 {
				A_Light(0);
				A_SetSpeed(4);
				A_PlaySound("sweapons/peeloutrelease", 5);
				invoker.PeeloutCheck = false;
			}
		SpinDash:
			TNT1 AAAAAAAAAAAA 1 {
				if (invoker.SpinCharges > 16) {
					A_ChangeVelocity(Cos(Pitch) * invoker.SpinCharges * 4, 0, Vel.Z * 1.1, CVF_Relative|CVF_Replace);
				} else {
					A_ChangeVelocity(Cos(Pitch) * invoker.SpinCharges * 8, 0, Vel.Z * 1.05, CVF_Relative|CVF_Replace);
				}
				if (CountInv("PowerHyper")) { 
					invoker.SpinDamageMultiplier = 8; 
				} else if (CountInv("PowerSuper")) {
					invoker.SpinDamageMultiplier = 2;
				} else {
					invoker.SpinDamageMultiplier = 1;
				}
				A_CustomPunch(invoker.SpinCharges * invoker.SpinDamageMultiplier, false, 0, "LightAttack", 86, 0, 0, "ArmorBonus", "sweapons/finalhit");
			}
			TNT1 A 0 { invoker.SpinCharges = 0; }
			Goto Ready;
		SpinAnim:
			SPIN ABCDEFEDCB 1;
			Loop;
	}
}

class ChaosBlaster : Weapon
{
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 2;
		Weapon.AmmoGive 25;
		Weapon.KickBack 100;
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Chaos Blaster";
		Inventory.PickupMessage "Picked up the Chaos energy blaster!";
	}
	States
	{
		Ready:
			PLSG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			PLSG A 1 A_Lower;
			Loop;
		Select:
			PLSG A 1 A_Raise;
			Loop;
		Fire:
			PLSG A 0 A_FireProjectile("MinorChaosEnergyBall");
			PLSG A 1
			{
				if (CountInv("PowerSuper") > 0 || CountInv("PowerHyper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 2);
				}
			}
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicThok");
			Goto Ready;
		Flash:
			PLSF A 4 Bright A_Light1;
			Goto LightDone;
			PLSF B 4 Bright A_Light1;
			Goto LightDone;
		Spawn:
			PLAS A -1;
			Stop;
	}
}
class SpeedyShotgun : Weapon
{
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse1 16;
		Weapon.AmmoUse2 8;
		Weapon.AmmoGive 32;
		Weapon.KickBack 500;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		AttackSound "weapons/shotgf";
		Tag "Speedy Shotgun";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "Picked up the speedy shotgun!";
	}
	States
	{
		Ready:
			SHTG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			SHTG A 1 A_Lower;
			Loop;
		Select:
			SHTG A 1 A_Raise;
			Loop;
		Fire:
			SHTG A 2;
			SHTG A 0
			{
				if (CountInv("PowerSuper") > 0 || CountInv("PowerHyper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 16);
				}
			}
			SHTG A 0 A_FireBullets(5.6, 0, 7, 3, "BulletPuff");
			SHTG A 0 A_PlaySound ("weapons/shotgf", CHAN_WEAPON);
			SHTG A 0
			{
				if (CountInv("PowerHyper") > 0)
				{
					A_GunFlash("HyperFlash");
				}
				else
				{
					A_GunFlash();
				}
			}
			SHTG A 1
			{
				if (CountInv("PowerHyper") > 0)
				{
					A_ReFire();
				}
			}
			SHTG A 2;
			Goto Ready;
		AltFire:
			TNT1 A 0 A_JumpIf(CountInv("PowerHyper"), "HyperFire");
			SHTG A 0 A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
			SHTG A 0 A_FireBullets (8, 3, 10, 4, "BulletPuff");
			SHTG A 0
			{
				if (CountInv("PowerSuper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 8);
				}
			}
			SHTG A 3 A_GunFlash("QuickFlash");
			SHTG A 0 A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
			SHTG A 0 A_FireBullets (5, 2, 10, 5, "BulletPuff");
			SHTG A 0
			{
				if (CountInv("PowerSuper") > 0 || CountInv("PowerHyper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 8);
				}
			}
			SHTG A 3 A_GunFlash("QuickFlash");
			SHTG A 0 A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
			SHTG A 0 A_FireBullets (3, 1, 10, 6, "BulletPuff");
			SHTG A 0
			{
				if (CountInv("PowerSuper") > 0 || CountInv("PowerHyper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 8);
				}
			}
			SHTG A 3 A_GunFlash("QuickFlash");
			SHTG A 0 A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
			SHTG A 0 A_FireBullets (1, 0, 10, 7, "BulletPuff");
			SHTG A 0
			{
				if (CountInv("PowerSuper") > 0 || CountInv("PowerHyper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 8);
				}
			}
			SHTG A 3 A_GunFlash("QuickFlash");
			SHTG A 0 A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
			SHTG A 0 A_FireBullets (0, 0, 10, 8, "BulletPuff");
			SHTG A 0
			{
				if (CountInv("PowerSuper") > 0 || CountInv("PowerHyper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 8);
				}
			}
			SHTG A 0
			{
				if (CountInv("PowerSuper") > 0 || CountInv("PowerHyper") > 0)
				{
					A_GunFlash();
					A_ReFire();
				}
			}
			SHTG A 7 A_GunFlash();
			SHTG BC 5;
			SHTG D 4;
			SHTG CB 5;
			SHTG A 3;
			SHTG A 7 A_ReFire();
			Goto Ready;
		HyperFire:
			SHTG A 1
			{
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (8, 3, 10, 4, "BulletPuff");
				A_GiveInventory("ChaosEnergy", 8);
				A_GunFlash("HyperFlash");
			}
			SHTG A 1
			{
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (5, 2, 10, 5, "BulletPuff");
				A_GiveInventory("ChaosEnergy", 8);
				A_GunFlash("HyperFlash");
			}
			SHTG A 1
			{
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (3, 1, 10, 6, "BulletPuff");
				A_GiveInventory("ChaosEnergy", 8);
				A_GunFlash("HyperFlash");
			}
			SHTG A 1
			{
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (1, 0, 10, 7, "BulletPuff");
				A_GiveInventory("ChaosEnergy", 8);
				A_GunFlash("HyperFlash");
			}
			SHTG A 1
			{
				A_ChangeVelocity (Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets (0, 0, 10, 8, "BulletPuff");
				A_GiveInventory("ChaosEnergy", 8);
				A_GunFlash("HyperFlash");
				A_ReFire();
			}
			SHTG BC 3;
			SHTG D 2;
			SHTG CB 3;
			SHTG A 1;
			SHTG A 5 A_ReFire();
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicThok");
			Goto Ready;
		Flash:
			SHTF A 4 Bright A_Light1;
			SHTF B 3 Bright A_Light2;
			Goto LightDone;
		QuickFlash:
			SHTF A 1 Bright A_Light1;
			SHTF B 1 Bright A_Light2;
			Goto LightDone;
		HyperFlash:
			TNT1 A 0 A_JumpIf(random(1, 2) > 1, "HFlash2");
		HFlash1:
			SHTF A 1 Bright A_Light1;
			Goto LightDone;
		HFlash2:
			SHTF B 1 Bright A_Light1;
			Goto LightDone;
		Spawn:
			SHOT A -1;
			Stop;
	}
}

class ClassicRocketStream : Weapon
{
	Default
	{
		Weapon.SelectionOrder 2500;
		Weapon.AmmoUse 15;
		Weapon.AmmoGive 45;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Rocket Stream";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "Picked up the rocket stream launcher!";
	}
	States
	{
		Ready:
			MISG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			MISG A 1 A_Lower;
			Loop;
		Select:
			MISG A 1 A_Raise;
			Loop;
		Fire:
			MISG B 1 A_GunFlash();
			MISG B 0 A_FireProjectile("StreamRocket");
			MISG A 1
			{
				if (CountInv("PowerSuper") > 0 || CountInv("PowerHyper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 15);
				}
			} 
			Goto Ready;
		Flash:
			MISF A 3 Bright A_Light1;
			MISF B 4 Bright;
			MISF CD 4 Bright A_Light2;
			Goto LightDone;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicThok");
			Goto Ready;
		Spawn:
			LAUN A -1;
			Stop;
	}
}

class ChaosRain : Weapon
{
	Default
	{
		Weapon.SelectionOrder 700;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Chaos Rain";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "Picked up the Chaos Rain cannon!";
	}
	States
	{
		Ready:
			CHGG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			CHGG A 1 A_Lower;
			Loop;
		Select:
			CHGG A 1 A_Raise;
			Loop;
		Fire:
			CHGG A 0 
			{
				if (CountInv("PowerSuper") > 0)
				{
					A_PlaySound("weapons/shotgf", CHAN_WEAPON);
					A_GunFlash();
					A_FireBullets(4, 2, 5, 10, "BulletPuff");
				}
				else if (CountInv("PowerHyper") > 0)
				{
					A_PlaySound("weapons/shotgf", CHAN_WEAPON);
					A_GunFlash();
					A_FireBullets(6, 4, 15, 30, "BulletPuff");
				}
				else
				{
					A_PlaySound("weapons/chngun", CHAN_WEAPON);
					A_GunFlash();
					A_FireBullets(2, 0, 1, 5, "BulletPuff");
				}
			}
			CHGG A 1
			{
				if (CountInv("PowerSuper") > 0 || CountInv("PowerHyper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 1);
				}
			}
			CHGG B 0 
			{
				if (CountInv("PowerSuper") > 0)
				{
					A_PlaySound("weapons/shotgf", CHAN_WEAPON);
					A_GunFlash();
					A_FireBullets(4, 2, 5, 10, "BulletPuff");
				}
				else if (CountInv("PowerHyper") > 0)
				{
					A_PlaySound("weapons/shotgf", CHAN_WEAPON);
					A_GunFlash();
					A_FireBullets(6, 4, 15, 30, "BulletPuff");
				}
				
				else
				{
					A_PlaySound("weapons/chngun", CHAN_WEAPON);
					A_GunFlash();
					A_FireBullets(2, 0, 1, 5, "BulletPuff");
				}
			}
			CHGG B 1
			{
				if (CountInv("PowerSuper") > 0 || CountInv("PowerHyper") > 0)
				{
					A_GiveInventory("ChaosEnergy", 1);
				}
			}
			CHGG B 0 A_ReFire();
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("SonicThok");
			Goto Ready;
		Spawn:
			MGUN A -1;
			Stop;
	}
}